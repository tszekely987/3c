<?xml version="1.0" encoding="UTF-8" standalone="no"?><NikuDataBus xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../xsd/nikuxog_contentPack.xsd">
      <Header action="write" externalSource="NIKU" objectType="contentPack" version="16.1.2.1567"/>
      <contentPack update="true">
        <Processes>
          <Process allowOneRunningInstance="true" code="rallyPPMDataSync" createdBy="admin" endStep="Finish" source="customer" startOption="ON_DEMAND" startStep="Start">
            
            
            
            
            <nls description="Runs the Clarity Solution Engineering demo data sync GEL scripts to reconnect the Clarity demo data with the specified Rally workspace. This should be done right after setting or changing the Rally setup in the Integration object." languageCode="en" name="Rally Clarity Demo Data Sync"/>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            <Security/>
            <Objects>
              <Object manualStart="false" name="thisXmlDocument" objectType="xml_document" partitionCode="NIKU.ROOT" partitionModeCode="PARTITION_ONLY" type="BPM_POT_PRIMARY"/>
            </Objects>
            <Steps>
              <Step id="Start" isMileStone="false" sequenceNo="1">
                
                
                
                
                <nls languageCode="en" name="Start"/>
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                <Notifications notifyOwner="false">
                  <NotifyWhen stepCompleted="false" stepInError="false" stepStarted="false"/>
                  <Assignees/>
                </Notifications>
                <Operations/>
                <TransitionRestrictions>
                  <TransitionRestriction>
                    <Join type="BPM_JT_NONE">
                      <Condition sequencNo="1" type="BPM_SCT_PRECONDITION"/>
                    </Join>
                  </TransitionRestriction>
                  <TransitionRestriction>
                    <Split type="BPM_ST_SEQUENCE">
                      <Condition sequencNo="1" type="BPM_SCT_POSTCONDITION">
                        <Transitions>
                          <Transition to="syncEpic"/>
                        </Transitions>
                      </Condition>
                    </Split>
                  </TransitionRestriction>
                </TransitionRestrictions>
              </Step>
              <Step id="Finish" isMileStone="false" sequenceNo="2">
                
                
                
                
                <nls languageCode="en" name="Finish"/>
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                <Notifications notifyOwner="false">
                  <NotifyWhen stepCompleted="false" stepInError="false" stepStarted="false"/>
                  <Assignees/>
                </Notifications>
                <Operations/>
                <TransitionRestrictions>
                  <TransitionRestriction>
                    <Join type="BPM_JT_NONE">
                      <Condition sequencNo="1" type="BPM_SCT_PRECONDITION"/>
                    </Join>
                  </TransitionRestriction>
                  <TransitionRestriction>
                    <Split type="BPM_ST_SEQUENCE">
                      <Condition sequencNo="1" type="BPM_SCT_POSTCONDITION">
                        <Transitions/>
                      </Condition>
                    </Split>
                  </TransitionRestriction>
                </TransitionRestrictions>
              </Step>
              <Step id="syncIntMap" isMileStone="false" sequenceNo="4">
                
                
                
                
                <nls languageCode="en" name="Sync IntMap"/>
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                <Notifications notifyOwner="false">
                  <NotifyWhen stepCompleted="false" stepInError="false" stepStarted="false"/>
                  <Assignees/>
                </Notifications>
                <Operations>
                  <Action code="runGEL" synchronized="true" type="BPM_SAT_CUSTOM">
                    
                    
                    
                    
                    <nls languageCode="en" name="Run GEL"/>
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    <customScript languageCode="gel">
                      <scriptText>
                        <gel:script xmlns:core="jelly:core" xmlns:file="jelly:com.niku.union.gel.FileTagLibrary" xmlns:gel="jelly:com.niku.union.gel.GELTagLibrary" xmlns:soap="jelly:com.niku.union.gel.SOAPTagLibrary" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sql="jelly:sql" xmlns:u="jelly:util" xmlns:xog="http://www.niku.com/xog" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                          <!-- Copyright 2021 Broadcom. All Rights Reserved.  -->
                          <!-- Rally-PPM Data Sync, Clarity Integration Mapping to Rally objects
        Reconnects Solution Engineering Clarity Demo systems with the connected Rally Demo workspace data, 
        Specifically the newer OOB Clarity Connections OOB Integration Mapping configurations.
        RallyDataSyncIntMap08.gel

    08/11/2022 - Matt Schulze - Dataset 16.0.3, remove Clarity Mapping attributes if not in Rally (RallyDataSyncIntMap08.gel)
    01/13/2022 - Matt Schulze - Autoconnect bool cleanup (RallyDataSyncIntMap07.gel)
    11/17/2021 - Matt Schulze - Dataset 16.0.0, minor cleanup (RallyDataSyncIntMap06.gel)
    09/03/2021 - Matt Schulze - Added to 15.9.3 dataset as syncIntMap step in Rally Clarity Demo Data Sync process on Integraion action (RallyDataSyncIntMap05.gel)
    08/24/2021 - Matt Schulze - Added update of int_integrationmappings URL (Update_IntMap_Clarity_URL)
    08/23/2021 - Matt Schulze - Added better list of attributes based on object code to handle duplicate Rally objects in mapping table
    08/19/2021 - Matt Schulze - Initial, from RallyDataSyncRoad06.gel as a base

    Notes: 
      ClarityUser: admin
      RI_Linked_ObjectId: clr_epic
      RI_Linked_Object_AttrId: custClrEpics

    Processing parameters - Optional
      RI_Linked_ObjectId      - Specifies the Object ID of the linked CIT to the Roadmap Item. Default is "clr_epic"
      RI_Linked_Object_AttrId - Specifies the API Attribute ID of the linked CIT to the Roadmap Item. Default is "custClrEpics"

    Testing / Debugging variables
      bSkipRESTUpdate     = if true, then we run through everything but do not update the BO. Used for looking at the debug output without updating.
    -->
                          <!-- Debug Flags, which get disabled when running in a PPM process -->
                          <core:set value="true" var="bDebug"/>
                          <core:set value="true" var="bDebugREST"/>
                          <core:set value="true" var="bDebugJSON"/>
                          <core:set value="true" var="bDebugVerLog"/>
                          <core:if test="${gel_processId != null}">
                            <core:set value="Xtrue" var="bDebug"/>
                            <core:set value="Xtrue" var="bDebugREST"/>
                            <core:set value="Xtrue" var="bDebugJSON"/>
                            <core:set value="Xtrue" var="bDebugVerLog"/>
                          </core:if>
                          <!-- This is just for Debugging. true will skip updates to the target linked CIT (Business Outcomes) -->
                          <core:set value="Xtrue" var="bSkipUpdate"/>
                          <!-- skip sql:update calls on Int Mapping tables -->
                          <core:set value="Xtrue" var="bSkipDelete"/>
                          <!-- skip sql:update Delete calls on Int Mapping tables -->
                          <core:set value="Xtrue" var="bSkipRESTUpdate"/>
                          <core:if test="${bSkipRESTUpdate}">
                            <core:set value="bSkipRESTUpdate: ${bSkipRESTUpdate}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- Set some defaults or get parameters from the system -->
                          <!-- <gel:parameter default="admin" var="ClarityUser"/> -->
                          <core:set value="admin" var="ClarityUser"/>
                          <!-- ___ Verbose Log Messages  ___ -->
                          <gel:parameter default="" var="VerboseLogMessages"/>
                          <core:set value="false" var="bVerboseLogMessages"/>
                          <core:if test="${(VerboseLogMessages != null)}">
                            <!-- AND -->
                            <core:if test="${(VerboseLogMessages.equalsIgnoreCase('Yes') || VerboseLogMessages.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bVerboseLogMessages"/>
                              <core:if test="${bDebug}">
                                <gel:out/>
                                <gel:out>Setting to True: Verbose Log Messages</gel:out>
                              </core:if>
                              <core:set value="true" var="bDebugVerLog"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Verbose Log Messages: ${bDebugVerLog} " var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify if we should update the Integration Mapping setup Clarity URL to the current server ___ -->
                          <!-- <gel:parameter var="Update_IntMap_Clarity_URL" default="" /> -->
                          <core:set value="true" var="bUpdIntMapURL"/>
                          <core:if test="${(Update_IntMap_Clarity_URL != null)}">
                            <!-- AND -->
                            <core:if test="${(Update_IntMap_Clarity_URL.equalsIgnoreCase('Yes') || Update_IntMap_Clarity_URL.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bUpdIntMapURL"/>
                              <core:if test="${bDebug}">
                                <gel:out/>
                                <gel:out>Set to True: Update Integration Mapping URL</gel:out>
                              </core:if>
                            </core:if>
                            <core:if test="${(Update_IntMap_Clarity_URL.equalsIgnoreCase('No') || Update_IntMap_Clarity_URL.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bUpdIntMapURL"/>
                              <core:if test="${bDebug}">
                                <gel:out/>
                                <gel:out>Set to False: Do Not update Integration Mapping URL</gel:out>
                              </core:if>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Update Integration Mapping Clarity URL flag: ${bUpdIntMapURL} " var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify to use the Rally Project from the Integrations object when searching for the Rally PIs  ___ -->
                          <gel:parameter default="" var="Use_Rally_Project_Scope"/>
                          <core:set value="false" var="bUseRallyProjectScope"/>
                          <!-- default -->
                          <core:if test="${(Use_Rally_Project_Scope != null)}">
                            <!-- AND -->
                            <core:if test="${(Use_Rally_Project_Scope.equalsIgnoreCase('No') || Use_Rally_Project_Scope.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bUseRallyProjectScope"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Use_Rally_Project_Scope != null)}">
                            <!-- AND -->
                            <core:if test="${(Use_Rally_Project_Scope.equalsIgnoreCase('Yes') || Use_Rally_Project_Scope.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bUseRallyProjectScope"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="bUseRallyProjectScope: ${bUseRallyProjectScope}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify if we need to check the Integration Demo Setup flag for this script run  ___ -->
                          <gel:parameter default="" var="Chk_Int_Demo_Setup"/>
                          <core:set value="false" var="bChkIntDemoSetup"/>
                          <!-- default -->
                          <core:if test="${(Chk_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Chk_Int_Demo_Setup.equalsIgnoreCase('No') || Chk_Int_Demo_Setup.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bChkIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Chk_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Chk_Int_Demo_Setup.equalsIgnoreCase('Yes') || Chk_Int_Demo_Setup.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bChkIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Check Integration Demo Setup flag: ${bChkIntDemoSetup}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify if we should reset the Integration Demo Setup flag at the end of this script (dependent on Chk_Int_Demo_Setup true)  ___ -->
                          <gel:parameter default="" var="Reset_Int_Demo_Setup"/>
                          <core:set value="false" var="bResetIntDemoSetup"/>
                          <!-- default -->
                          <core:if test="${(Reset_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Reset_Int_Demo_Setup.equalsIgnoreCase('No') || Reset_Int_Demo_Setup.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bResetIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Reset_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Reset_Int_Demo_Setup.equalsIgnoreCase('Yes') || Reset_Int_Demo_Setup.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bResetIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Reset the Integration Demo Setup flag: ${bResetIntDemoSetup}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify to set the Integrations object to Active  ___ -->
                          <gel:parameter default="" var="Set_Int_Demo_to_Active"/>
                          <core:set value="false" var="bSetIntDemoToActive"/>
                          <!-- default -->
                          <core:if test="${(Set_Int_Demo_to_Active != null)}">
                            <!-- AND -->
                            <core:if test="${(Set_Int_Demo_to_Active.equalsIgnoreCase('No') || Set_Int_Demo_to_Active.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bSetIntDemoToActive"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Set_Int_Demo_to_Active != null)}">
                            <!-- AND -->
                            <core:if test="${(Set_Int_Demo_to_Active.equalsIgnoreCase('Yes') || Set_Int_Demo_to_Active.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bSetIntDemoToActive"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Set Integration to Active flag: ${bSetIntDemoToActive}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- Script timing variables -->
                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart"/>
                          <core:new className="java.util.Date" var="dteElapse"/>
                          <core:new className="java.text.SimpleDateFormat" var="sdFmtElapse">
                            <core:arg type="java.lang.String" value="HH:mm:ss.SSS"/>
                          </core:new>
                          <core:new className="java.text.DecimalFormat" var="sdFmtElapseNum">
                            <core:arg type="java.lang.String" value="0.000"/>
                          </core:new>
                          <core:invokeStatic className="java.lang.Runtime" method="getRuntime" var="myRuntime"/>
                          <core:invokeStatic className="java.util.TimeZone" method="getTimeZone" var="tzGMT">
                            <core:arg type="java.lang.String" value="GMT"/>
                          </core:invokeStatic>
                          <core:set value="${sdFmtElapse.setTimeZone(tzGMT)}" var="dummy"/>
                          <!-- we need to set GMT, otherwise timings add the GMT hr offset of 18 hrs -->
                          <gel:formatDate format="yyyy-MM-dd HH:MM:S" stringVar="today"/>
                          <!-- Basic Rally Variables -->
                          <core:set value="/slm/webservice/v2.0" var="RallyUrlPath"/>
                          <!-- becomes: ${RallyHost}${RallyUrlPath}  -->
                          <core:set value="/ppm/rest/v1" var="PPMUrlPath"/>
                          <!-- becomes: ${XOGURL}${PPMUrlPath}  -->
                          <!-- CA PPM XOG URL Settings -->
                          <core:invokeStatic className="com.niku.union.config.ConfigurationManager" method="getInstance" var="config"/>
                          <core:set value="${config.getProperties().getWebServer().getWebServerInstance(0).getId()}" var="WebServerid"/>
                          <core:if test="${WebServerid == 'app'}">
                            <core:set value="${config.getProperties().getWebServer().getWebServerInstance(0).getEntryUrl()}" var="EntryURL"/>
                          </core:if>
                          <core:if test="${WebServerid != 'app'}">
                            <!-- Try the second entry to see if it is the app definition -->
                            <core:set value="${config.getProperties().getWebServer().getWebServerInstance(1).getId()}" var="WebServerid"/>
                            <core:if test="${WebServerid == 'app'}">
                              <core:set value="${config.getProperties().getWebServer().getWebServerInstance(1).getEntryUrl()}" var="EntryURL"/>
                            </core:if>
                          </core:if>
                          <!-- XOGURL can be used for debugging to override local URL -->
                          <core:if test="${XOGURL == null || XOGURL.length() == 0}">
                            <core:set value="${EntryURL}" var="XOGURL"/>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Clarity URL: ${XOGURL}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!--Get sessionID by Username-->
                          <!-- <gel:parameter default="admin" var="username"/> -->
                          <core:new className="com.niku.union.security.DefaultSecurityIdentifier" var="secId"/>
                          <core:invokeStatic className="com.niku.union.security.UserSessionControllerFactory" method="getInstance" var="userSessionCtrl"/>
                          <core:set value="${userSessionCtrl.init(ClarityUser,secId)}" var="secId"/>
                          <core:set value="${secId.getSessionId()}" var="sessionID"/>
                          <core:set value="authToken" var="h_authToken"/>
                          <core:set value="${sessionID}" var="v_authToken"/>
                          <!-- If a password was supplied, we could use it here -->
                          <core:set value="" var="v_PPMencoded"/>
                          <core:if test="${(ClarityPwd != null)}">
                            <core:set value="${ClarityUser}:${ClarityPwd}" var="credentials"/>
                            <core:invokeStatic className="com.niku.union.utility.Base64" method="encode" var="v_PPMencoded">
                              <core:arg type="java.lang.String" value="${credentials}"/>
                            </core:invokeStatic>
                            <core:set value="Authorization" var="h_authToken"/>
                            <core:set value="Basic ${v_PPMencoded}" var="v_authToken"/>
                            <core:set value="Using supplied credentials for user: ${ClarityUser}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                            <core:if test="${bDebug}">
                              <gel:out>PPMencodedCredentials: ${v_PPMencoded}</gel:out>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="ClarityUser: ${ClarityUser}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="sessionID: ${sessionID}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="v_PPMencoded: ${v_PPMencoded}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="using... ${h_authToken}: ${v_authToken}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Use the Roadmap Internal ID from the Object Id tied to the process. Can optionally set it for debugging or as a parameter ___ -->
                          <!-- ___ Use the Roadmap Internal ID from the Object Id tied to the process. Can optionally set it for debugging  ___ -->
                          <core:choose>
                            <core:when test="${gel_objectInstanceId == null}">
                              <!-- Debugging -->
                              <core:if test="${(v_PPMRoadmapIntId != null)}">
                                <!-- AND -->
                                <core:if test="${(v_PPMRoadmapIntId.length() &gt; 0)}">
                                  <core:set value="${v_PPMRoadmapIntId}" var="v_RoadmapIntId"/>
                                </core:if>
                              </core:if>
                            </core:when>
                            <core:otherwise>
                              <core:set value="${gel_objectInstanceId}" var="v_RoadmapIntId"/>
                            </core:otherwise>
                          </core:choose>
                          <!-- This is outbound Apache HttpClient class for the REST calls to Clarity -->
                          <core:invokeStatic className="org.apache.http.impl.client.HttpClients" method="createDefault" var="client"/>
                          <core:catch var="exvar1">
                            <core:set value="false" var="bRunDemoSetup"/>
                            <core:if test="${bChkIntDemoSetup}">
                              <!-- ________________________ -->
                              <!-- ___ Get the Integrations for one with Run Data Sync checked   ___ -->
                              <core:set var="httpRESTURL">${XOGURL}${PPMUrlPath}/integrations</core:set>
                              <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                              </core:new>
                              <core:set value="${httpURI.setParameter('fields', 'name,code,isActive')}" var="void"/>
                              <core:set value="${httpURI.setParameter('limit', '200')}" var="void"/>
                              <core:set value="${httpURI.setParameter('filter', '(z_runDataSync = true)')}" var="void"/>
                              <core:new className="org.apache.http.client.methods.HttpGet" var="httpget">
                                <core:arg type="java.net.URI" value="${httpURI.build()}"/>
                              </core:new>
                              <core:if test="${bDebugREST}">
                                <gel:out>httpget.getURI():  ${httpget.getURI()}</gel:out>
                              </core:if>
                              <core:expr value="${httpget.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                              <core:expr value="${httpget.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                              <core:expr value="${httpget.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                              <core:expr value="${httpget.setHeader(h_authToken, v_authToken)}"/>
                              <!-- Should be just client.execute(httpget), but we need to identify the httpget class by specifying it using the core:arg parameter -->
                              <core:invoke method="execute" on="${client}" var="response">
                                <core:arg type="org.apache.http.client.methods.HttpGet" value="${httpget}"/>
                              </core:invoke>
                              <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                              <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                              <!-- this is usually empty, pointless -->
                              <core:if test="${bDebugREST}">
                                <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                              </core:if>
                              <core:set value="${null}" var="httpInputStream"/>
                              <core:set value="${response.getEntity()}" var="entity"/>
                              <core:if test="${entity != null}">
                                <core:set value="${entity.getContent()}" var="httpInputStream"/>
                              </core:if>
                              <core:if test="${response_code != null}">
                                <core:if test="${(response_code != 200)}">
                                  <core:set value="ERROR on REST. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="WARN">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <core:if test="${httpInputStream == null}">
                                  <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="WARN">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <!-- OR -->
                                <core:if test="${httpInputStream != null}">
                                  <core:new className="java.io.InputStreamReader" var="v_Input">
                                    <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                  </core:new>
                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                  </core:new>
                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                  <core:if test="${bDebugREST}">
                                    <gel:out>httpData: ${httpData}</gel:out>
                                  </core:if>
                                  <!-- free up some resources -->
                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                  <core:if test="${(response_code == 200) }">
                                    <core:if test="${bDebug}">
                                      <core:set value="Getting list of Integrations..." var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                  </core:if>
                                  <!-- (response_code == 200) -->
                                  <!-- JSON Response -->
                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                  </core:new>
                                </core:if>
                                <!-- (httpInputStream != null) -->
                              </core:if>
                              <!-- (response_code != null) -->
                              <core:if test="${jsonResp == null}">
                                <core:if test="${bDebug}">
                                  <gel:out>jsonResp is null</gel:out>
                                </core:if>
                              </core:if>
                              <core:set value="" var="v_IntId"/>
                              <core:set value="" var="v_IntIdInt"/>
                              <core:set value="" var="v_IntCode"/>
                              <core:set value="" var="v_IntName"/>
                              <core:if test="${jsonResp != null}">
                                <core:set value="${jsonResp.get('_recordsReturned')}" var="v_recordsReturned"/>
                                <core:if test="${bDebug}">
                                  <gel:out trim="false">v_recordsReturned[${v_recordsReturned}]</gel:out>
                                </core:if>
                                <core:if test="${(v_recordsReturned &gt; 0)}">
                                  <core:set value="Integration Found with Run Data Sync checked" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:set value="true" var="bRunDemoSetup"/>
                                  <!-- Results, in a single entry array  -->
                                  <core:set value="${jsonResp.getJSONArray('_results')}" var="jarrRArray"/>
                                  <core:if test="${jarrRArray == null}">
                                    <core:if test="${bDebug}">
                                      <core:if test="${bDebug}">
                                        <gel:out>jarrRArray is null</gel:out>
                                      </core:if>
                                    </core:if>
                                  </core:if>
                                  <core:if test="${jarrRArray != null}">
                                    <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                    <core:if test="${bDebug}">
                                      <gel:out>Integration # Results: ${len_jarrRArray}</gel:out>
                                    </core:if>
                                    <core:set value="0" var="i_jarrRArray"/>
                                    <!-- this is a String -->
                                    <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                    <!-- convert to numeric, but the default is a long -->
                                    <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                    <!-- convert the long to an int, which we need for the json calls to work -->
                                    <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                      <!-- Get the JSON Object from the Array -->
                                      <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                      <core:if test="${bDebugJSON}">
                                        <gel:out>jsonRArray:</gel:out>
                                        <gel:out>${jsonRArray.toString(1)}</gel:out>
                                      </core:if>
                                      <!-- we add wrapper spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                      <core:set value=" ${jsonRArray.get('_internalId')} " var="im_Id"/>
                                      <core:set value="${im_Id.trim()}" var="im_Id"/>
                                      <core:set value="${jsonRArray.get('_internalId')}" var="im_IdInt"/>
                                      <core:set value="${jsonRArray.getString('name')}" var="im_Name"/>
                                      <core:set value="${jsonRArray.getString('code')}" var="im_Code"/>
                                      <core:set value="${jsonRArray.get('isActive')}" var="im_isActive"/>
                                      <core:if test="${bDebugVerLog}">
                                        <gel:out trim="false">Found Integration: Id.Code[${im_Id}.${im_Code}] Name[${im_Name}] isActive[${im_isActive}]</gel:out>
                                      </core:if>
                                      <core:if test="${bDebugVerLog}">
                                        <gel:out trim="false"/>
                                      </core:if>
                                      <!-- Save the Integration object name for later use -->
                                      <core:set value="${im_Id}" var="v_IntId"/>
                                      <core:set value="${im_IdInt}" var="v_IntIdInt"/>
                                      <core:set value="${im_Code}" var="v_IntCode"/>
                                      <core:set value="${im_Name}" var="v_IntName"/>
                                      <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                      <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                      <!-- convert the long back to an int, which we need for the json calls -->
                                    </core:while>
                                    <!-- i_jarrRArray < len_jarrRArray -->
                                    <core:if test="${bDebug}">
                                      <gel:out/>
                                    </core:if>
                                  </core:if>
                                </core:if>
                                <!-- (v_recordsReturned > 0) -->
                                <core:if test="${(v_recordsReturned == 0)}">
                                  <core:set value="No Integrations with Run Data Sync Found" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <!-- (v_recordsReturned == 0) -->
                              </core:if>
                              <!-- jsonResp != null -->
                            </core:if>
                            <!-- bChkIntDemoSetup -->
                            <core:if test="${(!(bChkIntDemoSetup)) || ((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup))}">
                              <!-- DB Debug Settings -->
                              <core:choose>
                                <core:when test="${gel_processId == null}">
                                  <core:set value="Setting datasource to ${v_nikuDB}..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <gel:setDataSource dbId="${v_nikuDB}"/>
                                </core:when>
                                <core:otherwise>
                                  <!-- default to niku for out demos -->
                                  <gel:setDataSource dbId="niku"/>
                                  <!-- override default if we were given a specific value -->
                                  <core:if test="${(v_nikuDB != null)}">
                                    <!-- AND -->
                                    <core:if test="${(v_nikuDB.length() &gt; 0)}">
                                      <gel:setDataSource dbId="${v_nikuDB}"/>
                                    </core:if>
                                  </core:if>
                                </core:otherwise>
                              </core:choose>
                              <core:new className="java.util.HashMap" var="mapRRCodeId"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeName"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeURL"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeAuthType"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeKey"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeEnc"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeUser"/>
                              <core:new className="java.util.HashMap" var="mapRRCodePass"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeIsActive"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeWrk"/>
                              <core:new className="java.util.HashMap" var="mapRRCodePrjPI"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeTskPI"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeDefOwn"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeDefPrj"/>
                              <!-- ________________ -->
                              <!-- ___ Get the Remote API settings for Rally ___ -->
                              <sql:query var="v_invRemoteRally">
        SELECT  int.code
              , int.id
              , int.name
              , int.endpoint_url
              , int.api_key
              , int.auth_type
              , int.user_name
              , int.password
              , int.is_active
              , int.integration_instance agl_workspace 
              , oint.agl_tsk_sync
              , oint.agl_create_direction
              , oint.agl_prj_template
              , oint.agl_ctr_prj_pi_type
              , oint.agl_ctr_tsk_pi_type
              , oint.agl_ctr_def_own_id
              , oint.agl_ctr_def_prj_id
         FROM nmc_integrations int, odf_ca_integration oint
        WHERE int.id  = oint.id
          AND int.integration_vendor_code = 'RALLY'
      </sql:query>
                              <core:if test="${bDebug}">
                                <gel:out trim="false">Got PPM DB Connection.</gel:out>
                              </core:if>
                              <core:set var="v_PrjAglSys">XXX</core:set>
                              <core:set value="${v_invRemoteRally.rows.size()}" var="len_arrRemoteRally"/>
                              <core:if test="${bDebug}">
                                <gel:out/>
                                <gel:out>Number of Rally integrations found: ${len_arrRemoteRally}</gel:out>
                              </core:if>
                              <core:forEach indexVar="i" items="${v_invRemoteRally.rows}" var="thisrow">
                                <core:set var="v_RRcode"><![CDATA[${v_invRemoteRally.rows[i].code}]]></core:set>
                                <core:set var="v_RRid"><![CDATA[${v_invRemoteRally.rows[i].id}]]></core:set>
                                <core:set var="v_RRname"><![CDATA[${v_invRemoteRally.rows[i].name}]]></core:set>
                                <core:set var="v_RRendpoint_url"><![CDATA[${v_invRemoteRally.rows[i].endpoint_url}]]></core:set>
                                <core:set var="v_RRapi_key"><![CDATA[${v_invRemoteRally.rows[i].api_key}]]></core:set>
                                <core:set var="v_RRauth_type"><![CDATA[${v_invRemoteRally.rows[i].auth_type}]]></core:set>
                                <core:set var="v_RRuser"><![CDATA[${v_invRemoteRally.rows[i].user_name}]]></core:set>
                                <core:set var="v_RRpass"><![CDATA[${v_invRemoteRally.rows[i].password}]]></core:set>
                                <core:set var="v_RRworkspace"><![CDATA[${v_invRemoteRally.rows[i].agl_workspace}]]></core:set>
                                <core:set var="v_RRis_active"><![CDATA[${v_invRemoteRally.rows[i].is_active}]]></core:set>
                                <core:set var="v_RRagl_tsk_sync"><![CDATA[${v_invRemoteRally.rows[i].agl_tsk_sync}]]></core:set>
                                <core:set var="v_RRagl_create_direction"><![CDATA[${v_invRemoteRally.rows[i].agl_create_direction}]]></core:set>
                                <core:set var="v_RRagl_prj_template"><![CDATA[${v_invRemoteRally.rows[i].agl_prj_template}]]></core:set>
                                <core:set var="v_RRprj_pi_type"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_prj_pi_type}]]></core:set>
                                <core:set var="v_RRtsk_pi_type"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_tsk_pi_type}]]></core:set>
                                <core:set var="v_RRdef_own_id"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_def_own_id}]]></core:set>
                                <core:set var="v_RRdef_prj_id"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_def_prj_id}]]></core:set>
                                <!-- Use any Integration object, does not matter. Assume that there is only one or they are all the same - No Longer -->
                                <core:set var="v_PrjAglSys">${v_RRcode}</core:set>
                                <core:set var="v_RRprj_pi_type">${v_RRprj_pi_type.toString().replace(' ','')}</core:set>
                                <core:set var="v_RRtsk_pi_type">${v_RRtsk_pi_type.toString().replace(' ','')}</core:set>
                                <core:set value="${v_RRapi_key}" var="v_secKey"/>
                                <core:set value="${v_RRpass}" var="v_secPass"/>
                                <core:invokeStatic className="com.niku.union.security.StringEncrypter" method="getDefaultInstance" var="v_secIdDef"/>
                                <core:set value="${v_secIdDef.decrypt(v_RRapi_key)}" var="v_secKey"/>
                                <core:set value="${v_secIdDef.decrypt(v_RRpass)}" var="v_secPass"/>
                                <core:if test="${v_RRauth_type.equals('BASIC')}">
                                  <core:if test="${(v_RRuser != null) &amp;&amp; (v_RRuser.length() &gt; 0)}">
                                    <core:set value="${v_RRuser}:${v_secPass}" var="credentials"/>
                                    <core:invokeStatic className="java.util.Base64" method="getEncoder" var="encoder"/>
                                    <core:set value="${encoder.encodeToString( credentials.getBytes() )}" var="v_RRencoded"/>
                                    <core:if test="${bDebug}">
                                      <gel:out>encodedCredentials: ${v_RRencoded}</gel:out>
                                    </core:if>
                                  </core:if>
                                </core:if>
                                <core:if test="${bDebug || bDebugSec}">
                                  <core:set value="v_secIdDef ${v_RRname}: v_RRapi_key[${v_RRapi_key}] v_secKey[${v_secKey}] " var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:set value="v_secIdDef ${v_RRname}: v_RRpass[${v_RRpass}] v_secPass[${v_secPass}] v_RRencoded(${v_RRencoded})" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <core:if test="${bDebug || bDebugSec}">
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRid(${v_RRid}) URL(${v_RRendpoint_url})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: wrkSpc(${v_RRworkspace}) PrgPI(${v_RRprj_pi_type}) TskPI(${v_RRtsk_pi_type})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRauth_type(${v_RRauth_type}) v_RRapi_key(${v_RRapi_key}) v_secKey(${v_secKey})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRuser(${v_RRuser}) v_RRpass(${v_RRpass}) v_secPass(${v_secPass})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRencoded(${v_RRencoded}) </gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRagl_create_direction(${v_RRagl_create_direction}) v_RRagl_tsk_sync(${v_RRagl_tsk_sync}) v_RRagl_prj_template(${v_RRagl_prj_template})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRcps_use_for_cit(${v_RRcps_use_for_cit})</gel:out>
                                  <gel:out/>
                                </core:if>
                                <core:set value="${mapRRCodeId.put(v_RRcode,v_RRid)}" var="void"/>
                                <core:set value="${mapRRCodeName.put(v_RRcode,v_RRname)}" var="void"/>
                                <core:set value="${mapRRCodeURL.put(v_RRcode,v_RRendpoint_url)}" var="void"/>
                                <core:set value="${mapRRCodeAuthType.put(v_RRcode,v_RRauth_type)}" var="void"/>
                                <core:set value="${mapRRCodeKey.put(v_RRcode,v_secKey)}" var="void"/>
                                <core:set value="${mapRRCodeEnc.put(v_RRcode,v_RRencoded)}" var="void"/>
                                <core:set value="${mapRRCodeUser.put(v_RRcode,v_RRuser)}" var="void"/>
                                <core:set value="${mapRRCodePass.put(v_RRcode,v_secPass)}" var="void"/>
                                <core:set value="${mapRRCodeIsActive.put(v_RRcode,v_RRis_active)}" var="void"/>
                                <core:set value="${mapRRCodeWrk.put(v_RRcode,v_RRworkspace)}" var="void"/>
                                <core:set value="${mapRRCodePrjPI.put(v_RRcode,v_RRprj_pi_type)}" var="void"/>
                                <core:set value="${mapRRCodeTskPI.put(v_RRcode,v_RRtsk_pi_type)}" var="void"/>
                                <core:set value="${mapRRCodeDefOwn.put(v_RRcode,v_RRdef_own_id)}" var="void"/>
                                <core:set value="${mapRRCodeDefPrj.put(v_RRcode,v_RRdef_prj_id)}" var="void"/>
                              </core:forEach>
                              <core:if test="${bDebug}">
                                <core:set value="v_PrjAglSys: ${v_PrjAglSys}" var="logMessage"/>
                                <core:choose>
                                  <core:when test="${gel_processId == null}">
                                    <gel:out>${logMessage}</gel:out>
                                  </core:when>
                                  <core:otherwise>
                                    <gel:log level="INFO">${logMessage}</gel:log>
                                  </core:otherwise>
                                </core:choose>
                              </core:if>
                              <!-- ___ Useful message to our users, if they can find the job message log. ___ -->
                              <core:if test="${len_arrRemoteRally == 0}">
                                <core:if test="${bDebug}">
                                  <gel:out/>
                                </core:if>
                                <core:set value="ERROR: Remote API Setup not found for Rally Integration. Call your CA PPM Admin or your CA PPM Presales Core Team." var="logMessage"/>
                                <core:choose>
                                  <core:when test="${gel_processId == null}">
                                    <gel:out>${logMessage}</gel:out>
                                  </core:when>
                                  <core:otherwise>
                                    <gel:log level="ERROR">${logMessage}</gel:log>
                                  </core:otherwise>
                                </core:choose>
                              </core:if>
                              <core:if test="${bDebug}">
                                <gel:out/>
                              </core:if>
                              <!-- ___ Useful message to our users, if they can find the job message log. ___ -->
                              <core:if test="${v_PrjAglSys.equals('XXX')}">
                                <core:if test="${bDebug}">
                                  <gel:out/>
                                </core:if>
                                <core:set value="ERROR: Please choose an Integration configuration to use for Custom Objects. Call your Clarity Admin or your Clarity Presales Core Team." var="logMessage"/>
                                <core:choose>
                                  <core:when test="${gel_processId == null}">
                                    <gel:out>${logMessage}</gel:out>
                                  </core:when>
                                  <core:otherwise>
                                    <gel:log level="ERROR">${logMessage}</gel:log>
                                  </core:otherwise>
                                </core:choose>
                              </core:if>
                              <core:if test="${bDebug}">
                                <gel:out/>
                              </core:if>
                              <core:catch var="exvar5">
                                <!-- ________________________ -->
                                <!-- ___ If appropriate, update the Integration Mapping Clarity URL  ___ -->
                                <core:if test="${(bUpdIntMapURL)}">
                                  <!-- ________________ -->
                                  <!-- ___ Get the Remote API settings for Rally ___ -->
                                  <sql:query var="v_intObjects">
            SELECT id, code, name, internal_url url, integration int_code, is_active  
              FROM int_integrationmappings
          </sql:query>
                                  <core:if test="${bDebug}">
                                    <gel:out trim="false">Got PPM DB Connection for Int Mapping.</gel:out>
                                  </core:if>
                                  <core:set value="${v_intObjects.rows.size()}" var="len_arrIntObjects"/>
                                  <core:if test="${bDebug}">
                                    <gel:out>Number of Integration Mappings found: ${len_arrIntObjects}</gel:out>
                                    <gel:out/>
                                  </core:if>
                                  <core:forEach indexVar="i" items="${v_intObjects.rows}" var="thisrow">
                                    <core:set var="v_IM_id"><![CDATA[${v_intObjects.rows[i].id}]]></core:set>
                                    <core:set var="v_IM_code"><![CDATA[${v_intObjects.rows[i].code}]]></core:set>
                                    <core:set var="v_IM_name"><![CDATA[${v_intObjects.rows[i].name}]]></core:set>
                                    <core:set var="v_IM_url"><![CDATA[${v_intObjects.rows[i].url}]]></core:set>
                                    <core:set var="v_IM_int_code"><![CDATA[${v_intObjects.rows[i].int_code}]]></core:set>
                                    <core:set var="v_IM_is_active"><![CDATA[${v_intObjects.rows[i].is_active}]]></core:set>
                                    <core:if test="${bDebug}">
                                      <gel:out>v_IM_id        (${v_IM_id})</gel:out>
                                      <gel:out>v_IM_code      (${v_IM_code})</gel:out>
                                      <gel:out>v_IM_name      (${v_IM_name})</gel:out>
                                      <gel:out>v_IM_url       (${v_IM_url})</gel:out>
                                      <gel:out>v_IM_int_code  (${v_IM_int_code})</gel:out>
                                      <gel:out>v_IM_is_active (${v_IM_is_active})</gel:out>
                                    </core:if>
                                    <core:set value="Checking Integration Mappings: ${v_IM_name}(${v_IM_code}.${v_IM_id})" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                        <gel:out/>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <core:if test="${bDebug}">
                                      <core:set value="${v_IM_name}: id:code[${v_IM_id}:${v_IM_code}] url[${v_IM_url}] int_code[${v_IM_int_code}] is_active[${v_IM_is_active}] " var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                      <gel:out/>
                                    </core:if>
                                    <core:choose>
                                      <core:when test="${!(v_RRis_active eq 1)}">
                                        <core:set value="Integration is NOT Active: ${v_RRname}(${tmpIOIntCode})" var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="INFO">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:when>
                                      <core:otherwise>
                                        <!-- Integration is Active -->
                                        <!-- Update the Clarity Integration Mapping with the new Clarity URL -->
                                        <core:if test="${(v_IM_url.length() &gt; 0) }">
                                          <core:set value="false" var="bIntChangesFound"/>
                                          <core:set value="" var="bUpdateFlds"/>
                                          <core:if test="${(!(v_IM_url.equalsIgnoreCase(XOGURL)))}">
                                            <core:set value="true" var="bIntChangesFound"/>
                                            <core:set var="bUpdateFlds">internal_url = '${XOGURL}'</core:set>
                                          </core:if>
                                          <core:if test="${(bIntChangesFound)}">
                                            <core:if test="${bDebug}">
                                              <gel:out>Updating Integration Mappings: ${bUpdateFlds}</gel:out>
                                            </core:if>
                                            <core:if test="${bDebug || bDebugVerLog}">
                                              <core:set value="Updating Integration Mappings: ${v_IM_name}(${v_IM_code}.${v_IM_id}) with new URL old:new(${v_IM_url}:${XOGURL})" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${!bSkipUpdate}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Updating Integration Mappings...</gel:out>
                                              </core:if>
                                              <sql:update var="v_invProj">
                      UPDATE int_integrationmappings
                         SET ${bUpdateFlds}
                       WHERE id = '${v_IM_id}'
                    </sql:update>
                                            </core:if>
                                            <!-- !(bSkipUpdate) -->
                                          </core:if>
                                          <!-- !(bIntChangesFound) -->
                                        </core:if>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:forEach>
                                  <!-- ___ Useful message to our users, if they can find the job message log. ___ -->
                                  <core:if test="${len_arrIntObjects == 0}">
                                    <core:if test="${bDebug}">
                                      <gel:out/>
                                    </core:if>
                                    <core:set value="Warning: No Integration Mappings found." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="WARN">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                </core:if>
                                <!-- (bUpdIntMapURL) -->
                                <!-- ________________________ -->
                                <!-- ___ Get and process the list of Integration Mapping Objects (Rally Portfolio Item Types)  ___ -->
                                <!--
        /ppm/rest/v1/integrationMappings?fields: name,code,isActive,integration
        -->
                                <core:new className="java.util.HashMap" var="mapIOCodeName"/>
                                <core:new className="java.util.HashMap" var="mapIOCodeIntId"/>
                                <core:new className="java.util.HashMap" var="mapIOCodeID"/>
                                <core:new className="java.util.HashMap" var="mapIOCodeUUID"/>
                                <core:new className="java.util.HashMap" var="mapIOCodeType"/>
                                <core:new className="java.util.HashMap" var="mapIOCodeExtAPI"/>
                                <core:new className="java.util.HashMap" var="mapIOCodeIntCode"/>
                                <core:new className="java.util.HashMap" var="mapIONameID"/>
                                <!-- ________________ -->
                                <!-- ___ Get the Remote API settings for Rally ___ -->
                                <sql:query var="v_intObjects">
          SELECT  ieob.id ob_id
              	, ieob.code ob_code
              	, ieob.name ob_name
              	, ieob.external_api_alias ob_ext_api
              	, ieob.type_path ob_type_path
              	, ieob.im_id ob_im_id	
              	, ieob.obj_id ob_obj_id
                , ieob.obj_uuid ob_obj_uuid
                , ieob.im_id ob_im_id
                , iim.integration ob_int_code
            FROM int_external_objects ieob
            LEFT OUTER JOIN int_integrationmappings iim ON iim.id = ieob.im_id
        </sql:query>
                                <core:if test="${bDebug}">
                                  <gel:out trim="false">Got PPM DB Connection for Int Mapping.</gel:out>
                                </core:if>
                                <core:set value="${v_intObjects.rows.size()}" var="len_arrIntObjects"/>
                                <core:if test="${bDebug}">
                                  <gel:out>Number of Integration Mapping Objects found: ${len_arrIntObjects}</gel:out>
                                  <gel:out/>
                                </core:if>
                                <core:forEach indexVar="i" items="${v_intObjects.rows}" var="thisrow">
                                  <core:set var="v_Iob_id"><![CDATA[${v_intObjects.rows[i].ob_id}]]></core:set>
                                  <core:set var="v_Iob_code"><![CDATA[${v_intObjects.rows[i].ob_code}]]></core:set>
                                  <core:set var="v_Iob_name"><![CDATA[${v_intObjects.rows[i].ob_name}]]></core:set>
                                  <core:set var="v_Iob_ext_api"><![CDATA[${v_intObjects.rows[i].ob_ext_api}]]></core:set>
                                  <core:set var="v_Iob_type_path"><![CDATA[${v_intObjects.rows[i].ob_type_path}]]></core:set>
                                  <core:set var="v_Iob_im_id"><![CDATA[${v_intObjects.rows[i].ob_im_id}]]></core:set>
                                  <core:set var="v_Iob_obj_id"><![CDATA[${v_intObjects.rows[i].ob_obj_id}]]></core:set>
                                  <core:set var="v_Iob_obj_uuid"><![CDATA[${v_intObjects.rows[i].ob_obj_uuid}]]></core:set>
                                  <core:set var="v_Iob_int_code"><![CDATA[${v_intObjects.rows[i].ob_int_code}]]></core:set>
                                  <core:if test="${bDebug}">
                                    <gel:out>v_Iob_id        (${v_Iob_id})</gel:out>
                                    <gel:out>v_Iob_code      (${v_Iob_code})</gel:out>
                                    <gel:out>v_Iob_name      (${v_Iob_name})</gel:out>
                                    <gel:out>v_Iob_ext_api   (${v_Iob_ext_api})</gel:out>
                                    <gel:out>v_Iob_type_path (${v_Iob_type_path})</gel:out>
                                    <gel:out>v_Iob_im_id     (${v_Iob_im_id})</gel:out>
                                    <gel:out>v_Iob_obj_id    (${v_Iob_obj_id})</gel:out>
                                    <gel:out>v_Iob_obj_uuid  (${v_Iob_obj_uuid})</gel:out>
                                    <gel:out>v_Iob_int_code  (${v_Iob_int_code})</gel:out>
                                  </core:if>
                                  <core:if test="${bDebug}">
                                    <core:set value="${v_Iob_name}: intId:code[${v_Iob_id}:${v_Iob_code}] ext_api[${v_Iob_ext_api}] type_path[${v_Iob_type_path}] ID:UUID[${v_Iob_obj_id}:${v_Iob_obj_uuid}] " var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <gel:out/>
                                  </core:if>
                                  <core:set value="${mapIOCodeIntId.put(v_Iob_code,v_Iob_id)}" var="void"/>
                                  <core:set value="${mapIOCodeName.put(v_Iob_code,v_Iob_name)}" var="void"/>
                                  <core:set value="${mapIOCodeID.put(v_Iob_code,v_Iob_obj_id)}" var="void"/>
                                  <core:set value="${mapIOCodeUUID.put(v_Iob_code,v_Iob_obj_uuid)}" var="void"/>
                                  <core:set value="${mapIOCodeType.put(v_Iob_code,v_Iob_type_path)}" var="void"/>
                                  <core:set value="${mapIOCodeExtAPI.put(v_Iob_code,v_Iob_ext_api)}" var="void"/>
                                  <core:set value="${mapIOCodeIntCode.put(v_Iob_code,v_Iob_int_code)}" var="void"/>
                                  <core:set value="${mapIONameID.put(v_Iob_name,v_Iob_obj_id)}" var="void"/>
                                </core:forEach>
                                <!-- ___ Useful message to our users, if they can find the job message log. ___ -->
                                <core:if test="${len_arrIntObjects == 0}">
                                  <core:if test="${bDebug}">
                                    <gel:out/>
                                  </core:if>
                                  <core:set value="Warning: No Integration Mapping Objects found." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="WARN">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <core:if test="${bDebug}">
                                  <gel:out/>
                                </core:if>
                                <!-- ________________________ -->
                                <!-- ___ Get and process the list of Integration Mapping Attributes (Rally Portfolio Item Type Attributes)  ___ -->
                                <!--
        -->
                                <core:new className="java.util.HashMap" var="mapIAtKeyIntId"/>
                                <core:new className="java.util.HashMap" var="mapIAtKeyName"/>
                                <core:new className="java.util.HashMap" var="mapIAtKeyID"/>
                                <core:new className="java.util.HashMap" var="mapIAtKeyUUID"/>
                                <core:new className="java.util.HashMap" var="mapIAtKeyExtAPI"/>
                                <core:new className="java.util.HashMap" var="mapIAtKeyObjId"/>
                                <core:new className="java.util.HashMap" var="mapIAtKeyObjName"/>
                                <core:new className="java.util.HashMap" var="mapIAtKeyIntCode"/>
                                <!-- ________________ -->
                                <!-- ___ Get the Remote API settings for Rally ___ -->
                                <sql:query escapeText="false" var="v_intObjects"><![CDATA[
            SELECT  ieat.id at_id 
                  , ieat.name at_name
                  , ieat.external_api_alias at_ext_api
                  , ieat.obj_id at_obj_id
                  , ieat.obj_uuid at_obj_uuid
                  , ieob.code ob_code
                  , ieob.name ob_name	
                  , ieob.obj_id ob_obj_id
                  , ieob.obj_uuid ob_obj_uuid
                  , ieob.external_api_alias ob_ext_api
                  , ieob.type_path ob_type_path
                  , ieob.im_id ob_im_id
                  , iim.integration ob_int_code
            FROM  int_external_attributes ieat 
            LEFT OUTER JOIN int_external_objects ieob ON ieob.id = ieat.external_object_id
            LEFT OUTER JOIN int_integrationmappings iim ON iim.id = ieob.im_id
            WHERE ieat.obj_id > 0
            ORDER BY ieob.name, ieat.external_api_alias
        ]]></sql:query>
                                <core:if test="${bDebug}">
                                  <gel:out trim="false">Got PPM DB Connection for Int Mapping.</gel:out>
                                </core:if>
                                <core:set value="${v_intObjects.rows.size()}" var="len_arrIntObjects"/>
                                <core:if test="${bDebug}">
                                  <gel:out>Number of Integration Mapping Attributes found: ${len_arrIntObjects}</gel:out>
                                  <gel:out/>
                                </core:if>
                                <core:forEach indexVar="i" items="${v_intObjects.rows}" var="thisrow">
                                  <core:set var="v_Iat_id"><![CDATA[${v_intObjects.rows[i].at_id}]]></core:set>
                                  <core:set var="v_Iat_name"><![CDATA[${v_intObjects.rows[i].at_name}]]></core:set>
                                  <core:set var="v_Iat_ext_api"><![CDATA[${v_intObjects.rows[i].at_ext_api}]]></core:set>
                                  <core:set var="v_Iat_obj_id"><![CDATA[${v_intObjects.rows[i].at_obj_id}]]></core:set>
                                  <core:set var="v_Iat_obj_uuid"><![CDATA[${v_intObjects.rows[i].at_obj_uuid}]]></core:set>
                                  <core:set var="v_Iob_code"><![CDATA[${v_intObjects.rows[i].ob_code}]]></core:set>
                                  <core:set var="v_Iob_name"><![CDATA[${v_intObjects.rows[i].ob_name}]]></core:set>
                                  <core:set var="v_Iob_obj_id"><![CDATA[${v_intObjects.rows[i].ob_obj_id}]]></core:set>
                                  <core:set var="v_Iob_obj_uuid"><![CDATA[${v_intObjects.rows[i].ob_obj_uuid}]]></core:set>
                                  <core:set var="v_Iob_ext_api"><![CDATA[${v_intObjects.rows[i].ob_ext_api}]]></core:set>
                                  <core:set var="v_Iob_type_path"><![CDATA[${v_intObjects.rows[i].ob_type_path}]]></core:set>
                                  <core:set var="v_Iob_im_id"><![CDATA[${v_intObjects.rows[i].ob_im_id}]]></core:set>
                                  <core:set var="v_Iob_int_code"><![CDATA[${v_intObjects.rows[i].ob_int_code}]]></core:set>
                                  <core:set var="v_Iat_key">${v_Iob_code}:${v_Iat_name}</core:set>
                                  <core:if test="${bDebug}">
                                    <gel:out>v_Iat_key       (${v_Iat_key})</gel:out>
                                    <gel:out>v_Iat_id        (${v_Iat_id})</gel:out>
                                    <gel:out>v_Iat_name      (${v_Iat_name})</gel:out>
                                    <gel:out>v_Iat_ext_api   (${v_Iat_ext_api})</gel:out>
                                    <gel:out>v_Iat_obj_id    (${v_Iat_obj_id})</gel:out>
                                    <gel:out>v_Iat_obj_uuid  (${v_Iat_obj_uuid})</gel:out>
                                    <gel:out>v_Iob_code      (${v_Iob_code})</gel:out>
                                    <gel:out>v_Iob_name      (${v_Iob_name})</gel:out>
                                    <gel:out>v_Iob_obj_id    (${v_Iob_obj_id})</gel:out>
                                    <gel:out>v_Iob_obj_uuid  (${v_Iob_obj_uuid})</gel:out>
                                    <gel:out>v_Iob_ext_api   (${v_Iob_ext_api})</gel:out>
                                    <gel:out>v_Iob_type_path (${v_Iob_type_path})</gel:out>
                                    <gel:out>v_Iob_im_id     (${v_Iob_im_id})</gel:out>
                                    <gel:out>v_Iob_int_code  (${v_Iob_int_code})</gel:out>
                                  </core:if>
                                  <core:if test="${bDebug}">
                                    <core:set value="${v_Iat_name}(${v_Iat_id}): ob_obj_id(${v_Iob_obj_id}) ext_api[${v_Iat_ext_api}] ID:UUID[${v_Iat_obj_id}:${v_Iat_obj_uuid}] " var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <core:set value="${v_Iob_name}(${v_Iob_code}): ext_api[${v_Iob_ext_api}] ob_type_path(${v_Iob_type_path}) ID:UUID[${v_Iob_obj_id}:${v_Iob_obj_uuid}] im_id:int_code[${v_Iob_im_id}:${v_Iob_int_code}] " var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <gel:out/>
                                  </core:if>
                                  <core:set value="${mapIAtKeyIntId.put(  v_Iat_key,v_Iat_id)}" var="void"/>
                                  <core:set value="${mapIAtKeyName.put(   v_Iat_key,v_Iat_name)}" var="void"/>
                                  <core:set value="${mapIAtKeyID.put(     v_Iat_key,v_Iat_obj_id)}" var="void"/>
                                  <core:set value="${mapIAtKeyUUID.put(   v_Iat_key,v_Iat_obj_uuid)}" var="void"/>
                                  <core:set value="${mapIAtKeyExtAPI.put( v_Iat_key,v_Iat_ext_api)}" var="void"/>
                                  <core:set value="${mapIAtKeyObjId.put(  v_Iat_key,v_Iob_obj_id)}" var="void"/>
                                  <core:set value="${mapIAtKeyObjName.put(v_Iat_key,v_Iob_name)}" var="void"/>
                                  <core:set value="${mapIAtKeyIntCode.put(v_Iat_key,v_Iob_int_code)}" var="void"/>
                                </core:forEach>
                                <core:if test="${bDebug}">
                                  <gel:out/>
                                  <core:set value="Got the list of Integration Mapping Attributes. Now loop throug them to get the Rally info and update..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="WARN">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <!-- ___ Useful message to our users, if they can find the job message log. ___ -->
                                <core:if test="${len_arrIntObjects == 0}">
                                  <core:if test="${bDebug}">
                                    <gel:out/>
                                  </core:if>
                                  <core:set value="Warning: No Integration Mapping Attributes found." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="WARN">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <core:if test="${bDebug}">
                                  <gel:out/>
                                </core:if>
                                <!-- ________________________ -->
                                <!-- Walk the list of IntMap Objects that we want to update -->
                                <core:set value="${mapIOCodeUUID.keySet()}" var="keysetIOCodeUUID"/>
                                <core:set value="${keysetIOCodeUUID.iterator()}" var="keyIOCodeUUID"/>
                                <core:while test="${keyIOCodeUUID.hasNext()}">
                                  <core:set value="${keyIOCodeUUID.next()}" var="tmpIOCode"/>
                                  <core:set value="" var="tmpIOIntId"/>
                                  <core:set value="" var="tmpIOName"/>
                                  <core:set value="" var="tmpIOID"/>
                                  <core:set value="" var="tmpIOUUID"/>
                                  <core:set value="" var="tmpIOType"/>
                                  <core:set value="" var="tmpIOExtAPI"/>
                                  <core:set value="" var="tmpIOIntCode"/>
                                  <core:set value="${mapIOCodeIntId.get(tmpIOCode)}" var="tmpIOIntId"/>
                                  <core:set value="${mapIOCodeName.get(tmpIOCode)}" var="tmpIOName"/>
                                  <core:set value="${mapIOCodeID.get(tmpIOCode)}" var="tmpIOID"/>
                                  <core:set value="${mapIOCodeUUID.get(tmpIOCode)}" var="tmpIOUUID"/>
                                  <core:set value="${mapIOCodeType.get(tmpIOCode)}" var="tmpIOType"/>
                                  <core:set value="${mapIOCodeExtAPI.get(tmpIOCode)}" var="tmpIOExtAPI"/>
                                  <core:set value="${mapIOCodeIntCode.get(tmpIOCode)}" var="tmpIOIntCode"/>
                                  <core:set value="${mapRRCodeId.get(tmpIOIntCode)}" var="v_RRid"/>
                                  <core:set value="${mapRRCodeName.get(tmpIOIntCode)}" var="v_RRname"/>
                                  <core:set value="${mapRRCodeURL.get(tmpIOIntCode)}" var="v_RRendpoint_url"/>
                                  <core:set value="${mapRRCodeAuthType.get(tmpIOIntCode)}" var="v_RRauth_type"/>
                                  <core:set value="${mapRRCodeKey.get(tmpIOIntCode)}" var="v_secKey"/>
                                  <core:set value="${mapRRCodeEnc.get(tmpIOIntCode)}" var="v_RRencoded"/>
                                  <core:set value="${mapRRCodeUser.get(tmpIOIntCode)}" var="v_RRuser"/>
                                  <core:set value="${mapRRCodePass.get(tmpIOIntCode)}" var="v_secPass"/>
                                  <core:set value="${mapRRCodeIsActive.get(tmpIOIntCode)}" var="v_RRis_active"/>
                                  <core:set value="${mapRRCodeWrk.get(tmpIOIntCode)}" var="v_RRworkspace"/>
                                  <core:if test="${bDebug}">
                                    <gel:out/>
                                    <core:set value="${tmpIOName}: intId:code[${tmpIOIntId}:${tmpIOCode}] ext_api[${tmpIOExtAPI}] type_path[${tmpIOType}] ID:UUID[${tmpIOID}:${tmpIOUUID}] Int_Code:wrksp[${tmpIOIntCode}:${v_RRworkspace}]" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                  <core:choose>
                                    <core:when test="${!(v_RRis_active eq 1)}">
                                      <core:set value="Integration is NOT Active: ${v_RRname}(${tmpIOIntCode})" var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:when>
                                    <core:otherwise>
                                      <!-- Integration is Active -->
                                      <!-- ________________________ -->
                                      <!-- Get the Rally info for this Portfolio Item Type to update the Clarity table  -->
                                      <!--
              https://rally1.rallydev.com/slm/webservice/v2.0/typedefinition?
              query=(Name = "Feature")
              &fetch=Name,ElementName,ObjectID,ObjectUUID,TypePath
              &workspace=/workspace/600250152233
              -->
                                      <core:set var="httpRESTURL">${v_RRendpoint_url}${RallyUrlPath}/typedefinition</core:set>
                                      <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                        <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                      </core:new>
                                      <core:set encode="false" var="v_query">(Name = "${tmpIOName}")</core:set>
                                      <core:set value="${httpURI.setParameter('query', v_query)}" var="void"/>
                                      <core:set value="${httpURI.setParameter('fetch', 'Name,ElementName,ObjectID,ObjectUUID,TypePath')}" var="void"/>
                                      <core:set value="${httpURI.setParameter('limit', '200')}" var="void"/>
                                      <core:set encode="false" var="v_workspace">/workspace/${v_RRworkspace}</core:set>
                                      <core:set value="${httpURI.setParameter('workspace', v_workspace)}" var="void"/>
                                      <core:new className="org.apache.http.client.methods.HttpGet" var="httpget">
                                        <core:arg type="java.net.URI" value="${httpURI.build()}"/>
                                      </core:new>
                                      <core:if test="${bDebugREST}">
                                        <gel:out>httpget.getURI():  ${httpget.getURI()}</gel:out>
                                      </core:if>
                                      <core:expr value="${httpget.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                      <core:expr value="${httpget.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                      <core:expr value="${httpget.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                                      <core:if test="${v_RRauth_type.equals('API')}">
                                        <core:expr value="${httpget.setHeader(&quot;zsessionid&quot;, v_secKey)}"/>
                                      </core:if>
                                      <core:if test="${v_RRauth_type.equals('BASIC')}">
                                        <core:if test="${v_RRencoded != null}">
                                          <!-- AND -->
                                          <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                            <core:set value="Basic ${v_RRencoded}" var="tmpAuth"/>
                                            <core:expr value="${httpget.setHeader(&quot;Authorization&quot;, tmpAuth)}"/>
                                          </core:if>
                                        </core:if>
                                      </core:if>
                                      <!-- Should be just client.execute(httpget), but we need to identify the httpget class by specifying it using the core:arg parameter -->
                                      <core:invoke method="execute" on="${client}" var="response">
                                        <core:arg type="org.apache.http.client.methods.HttpGet" value="${httpget}"/>
                                      </core:invoke>
                                      <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                                      <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                                      <!-- this is usually empty, pointless -->
                                      <core:if test="${bDebugREST}">
                                        <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                                      </core:if>
                                      <core:set value="${null}" var="httpInputStream"/>
                                      <core:set value="${response.getEntity()}" var="entity"/>
                                      <core:if test="${entity != null}">
                                        <core:set value="${entity.getContent()}" var="httpInputStream"/>
                                      </core:if>
                                      <core:set value="${null}" var="jsonQR"/>
                                      <core:set value="${null}" var="jsonResp"/>
                                      <core:set value="false" var="bGoodForDelete"/>
                                      <core:if test="${response_code != null}">
                                        <core:if test="${(response_code != 200)}">
                                          <core:set value="ERROR on REST. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="WARN">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                        </core:if>
                                        <core:if test="${httpInputStream == null}">
                                          <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="WARN">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                        </core:if>
                                        <!-- OR -->
                                        <core:if test="${httpInputStream != null}">
                                          <core:new className="java.io.InputStreamReader" var="v_Input">
                                            <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                          </core:new>
                                          <core:new className="java.io.BufferedReader" var="v_InputData">
                                            <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                          </core:new>
                                          <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>httpData: ${httpData}</gel:out>
                                          </core:if>
                                          <!-- free up some resources -->
                                          <core:set value="${httpInputStream.close()}" var="dummy"/>
                                          <core:if test="${(response_code == 200) }">
                                            <core:if test="${bDebug}">
                                              <core:set value="Object info..." var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:set value="true" var="bGoodForDelete"/>
                                          </core:if>
                                          <!-- (response_code == 200) -->
                                          <core:if test="${httpData != null}">
                                            <!-- JSON Response -->
                                            <core:new className="org.json.JSONObject" var="jsonResp">
                                              <core:arg type="java.lang.String" value="${httpData}"/>
                                            </core:new>
                                            <core:if test="${bDebugJSON}">
                                              <gel:out>jsonResp:</gel:out>
                                              <gel:out>${jsonResp.toString(1)}</gel:out>
                                              <gel:out>__________________</gel:out>
                                            </core:if>
                                            <!-- PortfolioItemType, top level JSON object -->
                                            <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                          </core:if>
                                        </core:if>
                                        <!-- (httpInputStream != null) -->
                                      </core:if>
                                      <!-- (response_code != null) -->
                                      <core:if test="${jsonResp == null}">
                                        <core:if test="${bDebug}">
                                          <gel:out>jsonResp is null</gel:out>
                                        </core:if>
                                      </core:if>
                                      <core:if test="${jsonQR == null}">
                                        <core:if test="${bDebug}">
                                          <gel:out>jsonQR is null</gel:out>
                                        </core:if>
                                        <core:set value="Not Found Object (${tmpIOName}) " var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="INFO">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <core:set value="" var="ral_ObjectID"/>
                                      <core:set value="" var="ral_UUID"/>
                                      <core:set value="" var="ral_Name"/>
                                      <core:set value="" var="ral_EleName"/>
                                      <core:set value="" var="ral_TypePath"/>
                                      <core:set value="${0+0}" var="jarrQRCount"/>
                                      <core:if test="${jsonQR != null}">
                                        <!-- check for data returned from Rally for this attribute. TotalResultCount -->
                                        <core:set value="${jsonQR.get('TotalResultCount')}" var="jarrQRCount"/>
                                        <core:if test="${bDebug}">
                                          <gel:out>TotalResultCount jarrQRCount(${jarrQRCount}) </gel:out>
                                        </core:if>
                                        <!-- Results, in a single entry array  -->
                                        <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRIArray"/>
                                        <core:if test="${jarrRIArray != null and jarrRIArray.length() gt 0}">
                                          <core:if test="${bDebug}">
                                            <gel:out>Found Object </gel:out>
                                          </core:if>
                                        </core:if>
                                        <core:if test="${jarrRIArray == null or jarrRIArray.length() eq 0}">
                                          <core:if test="${bDebug}">
                                            <gel:out>Not Found Object</gel:out>
                                          </core:if>
                                        </core:if>
                                      </core:if>
                                      <core:choose>
                                        <core:when test="${jarrQRCount == 0}">
                                          <!-- Attribute not found in Rally: Delete the row in Clarity -->
                                          <core:if test="${bDebug}">
                                            <gel:out>Not Found Object </gel:out>
                                          </core:if>
                                          <core:if test="${bDebug}">
                                            <gel:out>Deleting Integration Mapping Object: ${bUpdateFlds}</gel:out>
                                          </core:if>
                                          <core:if test="${bDebug || bDebugVerLog}">
                                            <core:set value="Deleting Int Mapping External Object(${tmpIOName}.${tmpIOIntId}) " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                                <gel:out/>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:choose>
                                            <core:when test="${bSkipDelete or !bGoodForDelete}">
                                              <core:set value="Skipping Delete: bSkipDelete(${bSkipDelete}) bGoodForDelete(${bGoodForDelete})" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:when>
                                            <core:otherwise>
                                              <core:if test="${bDebug}">
                                                <gel:out>Deleting Integration Mapping Object...</gel:out>
                                              </core:if>
                                              <sql:update var="v_invProj">
                  DELETE FROM int_external_objects
                   WHERE id = '${tmpIOIntId}'
                </sql:update>
                                            </core:otherwise>
                                          </core:choose>
                                          <!-- !(bSkipDelete) -->
                                        </core:when>
                                        <core:otherwise>
                                          <!-- Attribute found in Rally: Update the row in Clarity -->
                                          <core:if test="${bDebug}">
                                            <gel:out>Found Object</gel:out>
                                          </core:if>
                                          <core:if test="${jarrRIArray != null}">
                                            <core:set value="${jarrRIArray.length()}" var="len_jarrRIArray"/>
                                            <core:if test="${bDebug}">
                                              <gel:out># Results     : ${len_jarrRIArray}</gel:out>
                                            </core:if>
                                            <core:set value="0" var="i_jarrRIArray"/>
                                            <!-- this is a String -->
                                            <core:set value="${i_jarrRIArray+0}" var="i_jarrRIArray"/>
                                            <!-- convert to numeric, but the default is a long -->
                                            <core:set value="${i_jarrRIArray.intValue()}" var="i_jarrRIArray"/>
                                            <!-- convert the long to an int, which we need for the json calls to work -->
                                            <core:while test="${i_jarrRIArray lt len_jarrRIArray}">
                                              <!-- Get the NameArray JSON Object -->
                                              <core:set value="${jarrRIArray.get(i_jarrRIArray)}" var="jsonRIArray"/>
                                              <core:set value="${jsonRIArray.getString('Name')}" var="ral_Name"/>
                                              <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                              <core:set value=" ${jsonRIArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                              <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                              <core:set value="${jsonRIArray.getString('ObjectUUID')}" var="ral_UUID"/>
                                              <core:set value="${jsonRIArray.getString('ElementName')}" var="ral_EleName"/>
                                              <core:set value="${jsonRIArray.getString('TypePath')}" var="ral_TypePath"/>
                                              <core:if test="${bDebug}">
                                                <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                <gel:out>ral_ObjectID  : ${ral_ObjectID}</gel:out>
                                                <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                <gel:out>ral_EleName   : ${ral_EleName}</gel:out>
                                                <gel:out>ral_TypePath  : ${ral_TypePath}</gel:out>
                                              </core:if>
                                              <core:if test="${bDebug || bDebugVerLog}">
                                                <core:set value="C IntMapObj: ObjId:UUID(${tmpIOID}:${tmpIOUUID}) Name:ElementName(${tmpIOName}:${tmpIOExtAPI}) TypePath(${tmpIOType}) Clarity IntId(${tmpIOIntId}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${bDebug || bDebugVerLog}">
                                                <core:set value="RallyPIType: ObjId:UUID(${ral_ObjectID}:${ral_UUID}) Name:ElementName(${ral_Name}:${ral_EleName}) TypePath(${ral_TypePath})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <!-- Update the Clarity Int Mapping Object with new Rally info -->
                                              <core:if test="${(ral_ObjectID.length() &gt; 0) &amp;&amp; (ral_UUID.length() &gt; 0)}">
                                                <core:set value="false" var="bIntChangesFound"/>
                                                <core:set value="" var="bUpdateFlds"/>
                                                <core:if test="${(!(ral_ObjectID.equalsIgnoreCase(tmpIOID)))}">
                                                  <core:set value="true" var="bIntChangesFound"/>
                                                  <core:set var="bUpdateFlds">obj_id = '${ral_ObjectID}'</core:set>
                                                </core:if>
                                                <core:if test="${(!(ral_UUID.equalsIgnoreCase(tmpIOUUID)))}">
                                                  <core:set value="true" var="bIntChangesFound"/>
                                                  <core:if test="${(bUpdateFlds.length() &gt; 0)}">
                                                    <core:set var="bUpdateFlds">${bUpdateFlds} ,</core:set>
                                                  </core:if>
                                                  <core:set var="bUpdateFlds">${bUpdateFlds} obj_uuid = '${ral_UUID}'</core:set>
                                                </core:if>
                                                <core:if test="${(bIntChangesFound)}">
                                                  <core:if test="${bDebug}">
                                                    <gel:out>Updating Integration Mapping Object: ${bUpdateFlds}</gel:out>
                                                  </core:if>
                                                  <core:if test="${bDebug || bDebugVerLog}">
                                                    <core:set value="Updating Int Mapping External Object(${tmpIOName}.${tmpIOIntId}) with new ObjId:UUID(${ral_ObjectID}:${ral_UUID})" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                        <gel:out/>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${!bSkipUpdate}">
                                                    <core:if test="${bDebug}">
                                                      <gel:out>Updating Integration Mapping Object...</gel:out>
                                                    </core:if>
                                                    <sql:update var="v_invProj">
                          UPDATE int_external_objects
                             SET ${bUpdateFlds}
                           WHERE id = '${tmpIOIntId}'
                        </sql:update>
                                                  </core:if>
                                                  <!-- !(bSkipUpdate) -->
                                                </core:if>
                                                <!-- !(bIntChangesFound) -->
                                              </core:if>
                                              <!--
                  <core:set var="void" value="${mapIONameID.put(ral_Name,ral_ObjectID)}"/>
                  <core:set var="void" value="${mapIONameUUID.put(ral_Name,ral_UUID)}"/>
                    -->
                                              <core:set value="${mapIONameID.put(ral_EleName,ral_ObjectID)}" var="void"/>
                                              <core:set value="${i_jarrRIArray+1}" var="i_jarrRIArray"/>
                                              <core:set value="${i_jarrRIArray.intValue()}" var="i_jarrRIArray"/>
                                              <!-- convert the long back to an int, which we need for the json calls -->
                                            </core:while>
                                            <!-- i_jarrRIArray < len_jarrRIArray -->
                                          </core:if>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:otherwise>
                                  </core:choose>
                                </core:while>
                                <!-- keyIONameUUID.hasNext() -->
                                <!-- ________________________ -->
                                <!-- Walk the list of IntMap Attributes that we want to update -->
                                <core:set value="${mapIAtKeyIntId.keySet()}" var="keysetIAtKeyIntId"/>
                                <core:set value="${keysetIAtKeyIntId.iterator()}" var="keyIAtKeyIntId"/>
                                <core:while test="${keyIAtKeyIntId.hasNext()}">
                                  <core:set value="${keyIAtKeyIntId.next()}" var="tmpIAtKey"/>
                                  <core:set value="" var="tmpIAtIntId"/>
                                  <core:set value="" var="tmpIAtName"/>
                                  <core:set value="" var="tmpIAtID"/>
                                  <core:set value="" var="tmpIAtUUID"/>
                                  <core:set value="" var="tmpIAtExtAPI"/>
                                  <core:set value="" var="tmpIAtObjId"/>
                                  <core:set value="" var="tmpIAtObjName"/>
                                  <core:set value="" var="tmpIAtIIntCode"/>
                                  <core:set value="${mapIAtKeyIntId.get(tmpIAtKey)}" var="tmpIAtIntId"/>
                                  <core:set value="${mapIAtKeyName.get(tmpIAtKey)}" var="tmpIAtName"/>
                                  <core:set value="${mapIAtKeyID.get(tmpIAtKey)}" var="tmpIAtID"/>
                                  <core:set value="${mapIAtKeyUUID.get(tmpIAtKey)}" var="tmpIAtUUID"/>
                                  <core:set value="${mapIAtKeyExtAPI.get(tmpIAtKey)}" var="tmpIAtExtAPI"/>
                                  <core:set value="${mapIAtKeyObjId.get(tmpIAtKey)}" var="tmpIAtObjId"/>
                                  <core:set value="${mapIAtKeyObjName.get(tmpIAtKey)}" var="tmpIAtObjName"/>
                                  <core:set value="${mapIAtKeyIntCode.get(tmpIAtKey)}" var="tmpIAtIIntCode"/>
                                  <core:set value="${mapIONameID.get(tmpIAtObjName)}" var="tmpRal_ID"/>
                                  <core:set value="${mapRRCodeId.get(tmpIAtIIntCode)}" var="v_RRid"/>
                                  <core:set value="${mapRRCodeName.get(tmpIAtIIntCode)}" var="v_RRname"/>
                                  <core:set value="${mapRRCodeURL.get(tmpIAtIIntCode)}" var="v_RRendpoint_url"/>
                                  <core:set value="${mapRRCodeAuthType.get(tmpIAtIIntCode)}" var="v_RRauth_type"/>
                                  <core:set value="${mapRRCodeKey.get(tmpIAtIIntCode)}" var="v_secKey"/>
                                  <core:set value="${mapRRCodeEnc.get(tmpIAtIIntCode)}" var="v_RRencoded"/>
                                  <core:set value="${mapRRCodeUser.get(tmpIAtIIntCode)}" var="v_RRuser"/>
                                  <core:set value="${mapRRCodePass.get(tmpIAtIIntCode)}" var="v_secPass"/>
                                  <core:set value="${mapRRCodeIsActive.get(tmpIAtIIntCode)}" var="v_RRis_active"/>
                                  <core:set value="${mapRRCodeWrk.get(tmpIAtIIntCode)}" var="v_RRworkspace"/>
                                  <core:if test="${bDebug}">
                                    <gel:out/>
                                    <core:set value="${tmpIAtName}(${tmpIAtIntId}): ObjId[${tmpIAtObjName}(${tmpIAtObjId})] ext_api[${tmpIAtExtAPI}] ID:UUID[${tmpIAtID}:${tmpIAtUUID}] Int_Code:wrksp[${tmpIAtIIntCode}:${v_RRworkspace}]" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                  <core:choose>
                                    <core:when test="${!(v_RRis_active eq 1)}">
                                      <core:set value="Integration is NOT Active: ${v_RRname}(${tmpIAtIIntCode})" var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:when>
                                    <core:otherwise>
                                      <!-- Integration is Active -->
                                      <!-- ________________________ -->
                                      <!-- Get the Rally info for this Portfolio Item Attribute to update the Clarity table  -->
                                      <!--
              -->
                                      <core:set var="httpRESTURL">${v_RRendpoint_url}${RallyUrlPath}/typedefinition/${tmpRal_ID}/Attributes</core:set>
                                      <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                        <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                      </core:new>
                                      <core:set encode="false" var="v_query">(Name = "${tmpIAtName}")</core:set>
                                      <core:set value="${httpURI.setParameter('query', v_query)}" var="void"/>
                                      <core:set value="${httpURI.setParameter('fetch', 'Name,ElementName,ObjectID,ObjectUUID')}" var="void"/>
                                      <core:set value="${httpURI.setParameter('limit', '200')}" var="void"/>
                                      <core:set encode="false" var="v_workspace">/workspace/${v_RRworkspace}</core:set>
                                      <core:set value="${httpURI.setParameter('workspace', v_workspace)}" var="void"/>
                                      <core:new className="org.apache.http.client.methods.HttpGet" var="httpget">
                                        <core:arg type="java.net.URI" value="${httpURI.build()}"/>
                                      </core:new>
                                      <core:if test="${bDebugREST}">
                                        <gel:out>httpget.getURI():  ${httpget.getURI()}</gel:out>
                                      </core:if>
                                      <core:expr value="${httpget.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                      <core:expr value="${httpget.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                      <core:expr value="${httpget.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                                      <core:if test="${v_RRauth_type.equals('API')}">
                                        <core:expr value="${httpget.setHeader(&quot;zsessionid&quot;, v_secKey)}"/>
                                      </core:if>
                                      <core:if test="${v_RRauth_type.equals('BASIC')}">
                                        <core:if test="${v_RRencoded != null}">
                                          <!-- AND -->
                                          <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                            <core:set value="Basic ${v_RRencoded}" var="tmpAuth"/>
                                            <core:expr value="${httpget.setHeader(&quot;Authorization&quot;, tmpAuth)}"/>
                                          </core:if>
                                        </core:if>
                                      </core:if>
                                      <!-- Should be just client.execute(httpget), but we need to identify the httpget class by specifying it using the core:arg parameter -->
                                      <core:invoke method="execute" on="${client}" var="response">
                                        <core:arg type="org.apache.http.client.methods.HttpGet" value="${httpget}"/>
                                      </core:invoke>
                                      <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                                      <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                                      <!-- this is usually empty, pointless -->
                                      <core:if test="${bDebugREST}">
                                        <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                                      </core:if>
                                      <core:set value="${null}" var="httpInputStream"/>
                                      <core:set value="${response.getEntity()}" var="entity"/>
                                      <core:if test="${entity != null}">
                                        <core:set value="${entity.getContent()}" var="httpInputStream"/>
                                      </core:if>
                                      <core:set value="${null}" var="jsonQR"/>
                                      <core:set value="${null}" var="jsonResp"/>
                                      <core:set value="false" var="bGoodForDelete"/>
                                      <core:if test="${response_code != null}">
                                        <core:if test="${(response_code != 200)}">
                                          <core:set value="ERROR on REST. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="WARN">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                        </core:if>
                                        <core:if test="${httpInputStream == null}">
                                          <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="WARN">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                        </core:if>
                                        <!-- OR -->
                                        <core:if test="${httpInputStream != null}">
                                          <core:new className="java.io.InputStreamReader" var="v_Input">
                                            <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                          </core:new>
                                          <core:new className="java.io.BufferedReader" var="v_InputData">
                                            <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                          </core:new>
                                          <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>httpData: ${httpData}</gel:out>
                                          </core:if>
                                          <!-- free up some resources -->
                                          <core:set value="${httpInputStream.close()}" var="dummy"/>
                                          <core:if test="${(response_code == 200) }">
                                            <core:if test="${bDebug}">
                                              <core:set value="Attrib info..." var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:set value="true" var="bGoodForDelete"/>
                                          </core:if>
                                          <!-- (response_code == 200) -->
                                          <core:if test="${httpData != null}">
                                            <!-- JSON Response -->
                                            <core:new className="org.json.JSONObject" var="jsonResp">
                                              <core:arg type="java.lang.String" value="${httpData}"/>
                                            </core:new>
                                            <core:if test="${bDebugJSON}">
                                              <gel:out>jsonResp:</gel:out>
                                              <gel:out>${jsonResp.toString(1)}</gel:out>
                                              <gel:out>__________________</gel:out>
                                            </core:if>
                                            <!-- PortfolioItemType, top level JSON object -->
                                            <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                          </core:if>
                                        </core:if>
                                        <!-- (httpInputStream != null) -->
                                      </core:if>
                                      <!-- (response_code != null) -->
                                      <core:if test="${jsonResp == null}">
                                        <core:if test="${bDebug}">
                                          <gel:out>jsonResp is null</gel:out>
                                        </core:if>
                                      </core:if>
                                      <core:if test="${jsonQR == null}">
                                        <core:if test="${bDebug}">
                                          <gel:out>jsonQR is null</gel:out>
                                        </core:if>
                                        <core:set value="Not Found Attr (${tmpIAtName}) " var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="INFO">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <core:set value="" var="ral_ObjectID"/>
                                      <core:set value="" var="ral_UUID"/>
                                      <core:set value="" var="ral_Name"/>
                                      <core:set value="" var="ral_EleName"/>
                                      <core:set value="${0+0}" var="jarrQRCount"/>
                                      <core:if test="${jsonQR != null}">
                                        <!-- check for data returned from Rally for this attribute. TotalResultCount -->
                                        <core:set value="${jsonQR.get('TotalResultCount')}" var="jarrQRCount"/>
                                        <core:if test="${bDebug}">
                                          <gel:out>TotalResultCount jarrQRCount(${jarrQRCount}) </gel:out>
                                        </core:if>
                                        <!-- Results, in a single entry array  -->
                                        <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRIArray"/>
                                        <core:if test="${jarrRIArray != null and jarrRIArray.length() gt 0}"/>
                                        <core:if test="${jarrRIArray == null or jarrRIArray.length() eq 0}">
                                          <core:if test="${bDebug}">
                                            <gel:out>Not Found Attribute</gel:out>
                                          </core:if>
                                        </core:if>
                                      </core:if>
                                      <!-- jsonQR != null -->
                                      <core:choose>
                                        <core:when test="${jarrQRCount == 0}">
                                          <!-- Attribute not found in Rally: Delete the row in Clarity -->
                                          <core:if test="${bDebug}">
                                            <gel:out>Not Found Attribute </gel:out>
                                          </core:if>
                                          <core:if test="${bDebug}">
                                            <gel:out>Deleting Integration Mapping Attribute: ${bUpdateFlds}</gel:out>
                                          </core:if>
                                          <core:if test="${bDebug || bDebugVerLog}">
                                            <core:set value="Deleting Int Mapping External Attrib(${tmpIAtName}.${tmpIAtIntId}) " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                                <gel:out/>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <!-- Skip deleting the system attribute Integration Mapping -->
                                          <core:if test="${tmpIAtExtAPI.equalsIgnoreCase('c_IntegrationMappings')}">
                                            <core:set value="Skip cleanup of system attribute Integration Mapping " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                                <gel:out/>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                            <core:set value="false" var="bGoodForDelete"/>
                                          </core:if>
                                          <core:choose>
                                            <core:when test="${bSkipDelete or !bGoodForDelete}">
                                              <core:set value="Skipping Delete: bSkipDelete(${bSkipDelete}) bGoodForDelete(${bGoodForDelete})" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:when>
                                            <core:otherwise>
                                              <core:if test="${bDebug}">
                                                <gel:out>Deleting Integration Mapping Attribute...</gel:out>
                                              </core:if>
                                              <sql:update var="v_invProj">
                  DELETE FROM int_external_attributes
                   WHERE id = '${tmpIAtIntId}'
                </sql:update>
                                            </core:otherwise>
                                          </core:choose>
                                          <!-- !(bSkipDelete) -->
                                        </core:when>
                                        <core:otherwise>
                                          <!-- Attribute found in Rally: Update the row in Clarity -->
                                          <core:if test="${bDebug}">
                                            <gel:out>Found Attribute</gel:out>
                                          </core:if>
                                          <core:if test="${jarrRIArray != null}">
                                            <core:set value="${jarrRIArray.length()}" var="len_jarrRIArray"/>
                                            <core:if test="${bDebug}">
                                              <gel:out># Results     : ${len_jarrRIArray}</gel:out>
                                            </core:if>
                                            <core:set value="0" var="i_jarrRIArray"/>
                                            <!-- this is a String -->
                                            <core:set value="${i_jarrRIArray+0}" var="i_jarrRIArray"/>
                                            <!-- convert to numeric, but the default is a long -->
                                            <core:set value="${i_jarrRIArray.intValue()}" var="i_jarrRIArray"/>
                                            <!-- convert the long to an int, which we need for the json calls to work -->
                                            <core:while test="${i_jarrRIArray lt len_jarrRIArray}">
                                              <!-- Get the NameArray JSON Object -->
                                              <core:set value="${jarrRIArray.get(i_jarrRIArray)}" var="jsonRIArray"/>
                                              <core:set value="${jsonRIArray.getString('Name')}" var="ral_Name"/>
                                              <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                              <core:set value=" ${jsonRIArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                              <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                              <core:set value="${jsonRIArray.getString('ObjectUUID')}" var="ral_UUID"/>
                                              <core:set value="${jsonRIArray.getString('ElementName')}" var="ral_EleName"/>
                                              <core:if test="${bDebug}">
                                                <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                <gel:out>ral_ObjectID  : ${ral_ObjectID}</gel:out>
                                                <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                <gel:out>ral_EleName   : ${ral_EleName}</gel:out>
                                              </core:if>
                                              <core:if test="${bDebug || bDebugVerLog}">
                                                <core:set value="C IntMapAttr: ObjId:UUID(${tmpIAtID}:${tmpIAtUUID}) Name:ElementName(${tmpIAtName}:${tmpIAtExtAPI})  Clarity IntId(${tmpIAtIntId}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${bDebug || bDebugVerLog}">
                                                <core:set value="RallyPI Attr: ObjId:UUID(${ral_ObjectID}:${ral_UUID}) Name:ElementName(${ral_Name}:${ral_EleName}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <!-- Update the Clarity Int Mapping Object with new Rally info -->
                                              <core:if test="${(ral_ObjectID.length() &gt; 0) &amp;&amp; (ral_UUID.length() &gt; 0)}">
                                                <core:set value="false" var="bIntChangesFound"/>
                                                <core:set value="" var="bUpdateFlds"/>
                                                <core:if test="${(!(ral_ObjectID.equalsIgnoreCase(tmpIAtID)))}">
                                                  <core:set value="true" var="bIntChangesFound"/>
                                                  <core:set var="bUpdateFlds">obj_id = '${ral_ObjectID}'</core:set>
                                                </core:if>
                                                <core:if test="${(!(ral_UUID.equalsIgnoreCase(tmpIAtUUID)))}">
                                                  <core:set value="true" var="bIntChangesFound"/>
                                                  <core:if test="${(bUpdateFlds.length() &gt; 0)}">
                                                    <core:set var="bUpdateFlds">${bUpdateFlds} ,</core:set>
                                                  </core:if>
                                                  <core:set var="bUpdateFlds">${bUpdateFlds} obj_uuid = '${ral_UUID}'</core:set>
                                                </core:if>
                                                <core:if test="${(bIntChangesFound)}">
                                                  <core:if test="${bDebug}">
                                                    <gel:out>Updating Integration Mapping Attribute: ${bUpdateFlds}</gel:out>
                                                  </core:if>
                                                  <core:if test="${bDebug || bDebugVerLog}">
                                                    <core:set value="Updating Int Mapping External Attrib(${tmpIAtName}.${tmpIAtIntId}) with new ObjId:UUID(${ral_ObjectID}:${ral_UUID})" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                        <gel:out/>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${!bSkipUpdate}">
                                                    <core:if test="${bDebug}">
                                                      <gel:out>Updating Integration Mapping Attribute...</gel:out>
                                                    </core:if>
                                                    <sql:update var="v_invProj">
                          UPDATE int_external_attributes
                             SET ${bUpdateFlds}
                           WHERE id = '${tmpIAtIntId}'
                        </sql:update>
                                                  </core:if>
                                                  <!-- !(bSkipUpdate) -->
                                                </core:if>
                                                <!-- !(bIntChangesFound) -->
                                              </core:if>
                                              <core:set value="${i_jarrRIArray+1}" var="i_jarrRIArray"/>
                                              <core:set value="${i_jarrRIArray.intValue()}" var="i_jarrRIArray"/>
                                              <!-- convert the long back to an int, which we need for the json calls -->
                                            </core:while>
                                            <!-- i_jarrRIArray < len_jarrRIArray -->
                                          </core:if>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:otherwise>
                                  </core:choose>
                                </core:while>
                                <!-- keyIAtNameUUID.hasNext() -->
                                <!--
        <gel:out/>Breaking...<gel:out/>
        <core:break/>
          -->
                              </core:catch>
                              <!-- exvar5 -->
                              <!-- ___ Error Exception processing  ___ -->
                              <core:if test="${not empty exvar5}">
                                <core:set value="EXCEPTION: ${exvar5.getMessage()}" var="logMessage"/>
                                <core:choose>
                                  <core:when test="${gel_processId == null}">
                                    <gel:out>${logMessage}</gel:out>
                                  </core:when>
                                  <core:otherwise>
                                    <gel:log level="INFO">${logMessage}</gel:log>
                                  </core:otherwise>
                                </core:choose>
                                <core:if test="${bDebug}">
                                  <gel:out>exvar5.toString() ${exvar5.toString()}</gel:out>
                                  <gel:out>exvar5.getName() ${exvar5.getName()}</gel:out>
                                  <gel:out>ERROR - Exception: ${exvar5}</gel:out>
                                  <gel:out/>
                                </core:if>
                                <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                                  <core:arg type="java.lang.Throwable" value="${exvar5}"/>
                                </core:new>
                                <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                                <gel:out/>
                              </core:if>
                            </core:if>
                            <!-- (!(bChkIntDemoSetup)) || ((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup)) -->
                            <!-- ________________________ -->
                            <!-- ___ If needed, reset the Demo Setup flag and/or set the Integrations instance to Active  ___ -->
                            <core:if test="${(v_IntId != null) &amp;&amp; (v_IntId.length() &gt; 0)}">
                              <core:if test="${((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup) &amp;&amp; (bResetIntDemoSetup)) || (bSetIntDemoToActive)}">
                                <core:new className="org.json.JSONObject" var="jsonPatchInt"/>
                                <!-- Supply the Integrations object Internal Id on the URL for the PATCH, not in the body
        <core:set var="dummy" value='${jsonPatchInt.put("_internalId",v_IntIdInt)}'/>
        -->
                                <core:set value="false" var="bIntChangesFound"/>
                                <core:if test="${(bResetIntDemoSetup)}">
                                  <core:set value="true" var="bIntChangesFound"/>
                                  <core:set value="${(1==0)}" var="bTemp"/>
                                  <core:set value="${jsonPatchInt.put(&quot;z_runDataSync&quot;,bTemp)}" var="dummy"/>
                                  <core:if test="${bDebug}">
                                    <core:set value="set z_runDataSync to false" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                </core:if>
                                <core:if test="${(bSetIntDemoToActive)}">
                                  <core:set value="true" var="bIntChangesFound"/>
                                  <core:set value="${(1==1)}" var="bTemp"/>
                                  <core:set value="${jsonPatchInt.put(&quot;isActive&quot;,bTemp)}" var="dummy"/>
                                  <core:if test="${bDebug}">
                                    <core:set value="set isActive to true" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                </core:if>
                                <core:if test="${(bIntChangesFound)}">
                                  <core:set value="Updating (${v_IntId}.${v_IntCode}) ${v_IntName}" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:if test="${bDebugREST}">
                                    <core:set value="jsonPatchInt: ${jsonPatchInt}" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                  <!-- PATCH the linked object -->
                                  <core:set var="httpRESTURL">${XOGURL}${PPMUrlPath}/integrations/${v_IntId}</core:set>
                                  <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                    <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                  </core:new>
                                  <core:new className="org.apache.http.client.methods.HttpPatch" var="httppatch">
                                    <core:arg type="java.net.URI" value="${httpURI.build()}"/>
                                  </core:new>
                                  <core:if test="${bDebugREST}">
                                    <gel:out>httppatch.getURI():  ${httppatch.getURI()}</gel:out>
                                  </core:if>
                                  <core:new className="org.apache.http.entity.StringEntity" var="httpEntity">
                                    <core:arg type="java.lang.String" value="${jsonPatchInt.toString(1)}"/>
                                  </core:new>
                                  <core:expr value="${httppatch.setEntity(httpEntity)}"/>
                                  <core:expr value="${httppatch.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                  <core:expr value="${httppatch.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                  <core:expr value="${httppatch.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                                  <core:expr value="${httppatch.setHeader(h_authToken, v_authToken)}"/>
                                  <core:if test="${!(bSkipRESTUpdate)}">
                                    <core:if test="${bDebug}">
                                      <gel:out trim="false">Patching Integration...</gel:out>
                                    </core:if>
                                    <!-- Should be just client.execute(httppatch), but we need to identify the httppatch class by specifying it using the core:arg parameter -->
                                    <core:invoke method="execute" on="${client}" var="response">
                                      <core:arg type="org.apache.http.client.methods.HttpPatch" value="${httppatch}"/>
                                    </core:invoke>
                                    <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                                    <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                                    <!-- this is usually empty, pointless -->
                                    <core:if test="${bDebugREST}">
                                      <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                                    </core:if>
                                    <core:set value="${null}" var="jsonQR"/>
                                    <core:set value="${null}" var="httpInputStream"/>
                                    <core:set value="${response.getEntity()}" var="entity"/>
                                    <core:if test="${entity != null}">
                                      <core:set value="${entity.getContent()}" var="httpInputStream"/>
                                    </core:if>
                                    <core:if test="${response_code == null}">
                                      <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                      <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                          <gel:out/>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="WARN">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                    <core:if test="${response_code != null}">
                                      <core:if test="${(response_code != 200)}">
                                        <core:set value="ERROR on PATCH. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="WARN">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <core:if test="${httpInputStream == null}">
                                        <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="WARN">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <!-- OR -->
                                      <core:if test="${httpInputStream != null}">
                                        <core:new className="java.io.InputStreamReader" var="v_Input">
                                          <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                        </core:new>
                                        <core:new className="java.io.BufferedReader" var="v_InputData">
                                          <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                        </core:new>
                                        <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                        <core:if test="${bDebugREST}">
                                          <gel:out>httpData: ${httpData}</gel:out>
                                        </core:if>
                                        <!-- free up some resources -->
                                        <core:set value="${httpInputStream.close()}" var="dummy"/>
                                        <!-- JSON Response -->
                                        <core:new className="org.json.JSONObject" var="jsonResp">
                                          <core:arg type="java.lang.String" value="${httpData}"/>
                                        </core:new>
                                      </core:if>
                                      <!-- (httpInputStream != null) -->
                                    </core:if>
                                    <!-- (response_code != null) -->
                                    <core:if test="${response_code == 200}">
                                      <!-- Successful Update -->
                                      <core:set value="Update of Integration successful (${v_IntId}.${v_IntCode}): ${v_IntName} " var="logMessage"/>
                                    </core:if>
                                    <core:if test="${jsonResp == null}">
                                      <core:if test="${bDebug}">
                                        <gel:out>jsonResp is null</gel:out>
                                      </core:if>
                                    </core:if>
                                  </core:if>
                                  <!-- !(bSkipRESTUpdate) -->
                                </core:if>
                                <!-- (bIntChangesFound) -->
                              </core:if>
                              <!-- (v_IntId != null) -->
                            </core:if>
                            <!-- ((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup) &amp;&amp; (bResetIntDemoSetup)) || (bSetIntDemoToActive) -->
                          </core:catch>
                          <!-- exvar1 -->
                          <!-- ___ Error Exception processing  ___ -->
                          <core:if test="${not empty exvar1}">
                            <core:set value="EXCEPTION: ${exvar1.getMessage()}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                            <core:if test="${bDebug}">
                              <gel:out>exvar1.toString() ${exvar1.toString()}</gel:out>
                              <gel:out>exvar1.getName() ${exvar1.getName()}</gel:out>
                              <gel:out>ERROR - Exception: ${exvar1}</gel:out>
                              <gel:out/>
                            </core:if>
                            <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                              <core:arg type="java.lang.Throwable" value="${exvar1}"/>
                            </core:new>
                            <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                            <gel:out/>
                          </core:if>
                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                          <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                          <core:new className="java.util.Date" var="dteElapse">
                            <core:arg type="java.lang.Long" value="${elapsedTime}"/>
                          </core:new>
                          <core:set value="Script Elapse: ${sdFmtElapse.format(dteElapse)} sec[${sdFmtElapseNum.format(elapsedTime/1000)}] " var="logMessage"/>
                          <core:choose>
                            <core:when test="${gel_processId == null}">
                              <gel:out>${logMessage}</gel:out>
                            </core:when>
                            <core:otherwise>
                              <gel:log level="INFO">${logMessage}</gel:log>
                            </core:otherwise>
                          </core:choose>
                        </gel:script>
                      </scriptText>
                      <scriptParameter isSecure="false" name="VerboseLogMessages"/>
                      <scriptParameter isSecure="false" name="Use_Rally_Project_Scope"/>
                      <scriptParameter isSecure="false" name="Chk_Int_Demo_Setup"/>
                      <scriptParameter isSecure="false" name="Reset_Int_Demo_Setup"/>
                      <scriptParameter isSecure="false" name="Set_Int_Demo_to_Active"/>
                    </customScript>
                    <Notifications notifyOwner="false">
                      <NotifyWhen stepActionInError="false" stepActionPerformed="false" value="0"/>
                      <Assignees/>
                    </Notifications>
                  </Action>
                </Operations>
                <TransitionRestrictions>
                  <TransitionRestriction>
                    <Join type="BPM_JT_NONE">
                      <Condition sequencNo="1" type="BPM_SCT_PRECONDITION"/>
                    </Join>
                  </TransitionRestriction>
                  <TransitionRestriction>
                    <Split type="BPM_ST_SEQUENCE">
                      <Condition sequencNo="1" type="BPM_SCT_POSTCONDITION">
                        <Transitions>
                          <Transition to="syncCIT"/>
                        </Transitions>
                      </Condition>
                    </Split>
                  </TransitionRestriction>
                </TransitionRestrictions>
              </Step>
              <Step id="syncCIT" isMileStone="false" sequenceNo="6">
                
                
                
                
                <nls languageCode="en" name="Sync CIT"/>
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                <Notifications notifyOwner="false">
                  <NotifyWhen stepCompleted="false" stepInError="false" stepStarted="false"/>
                  <Assignees/>
                </Notifications>
                <Operations>
                  <Action code="runGEL" synchronized="true" type="BPM_SAT_CUSTOM">
                    
                    
                    
                    
                    <nls languageCode="en" name="Run GEL"/>
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    <customScript languageCode="gel">
                      <scriptText>
                        <gel:script xmlns:core="jelly:core" xmlns:file="jelly:com.niku.union.gel.FileTagLibrary" xmlns:gel="jelly:com.niku.union.gel.GELTagLibrary" xmlns:soap="jelly:com.niku.union.gel.SOAPTagLibrary" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sql="jelly:sql" xmlns:u="jelly:util" xmlns:xog="http://www.niku.com/xog" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                          <!-- Copyright 2021 Broadcom. All Rights Reserved.  -->
                          <!-- Rally-PPM Data Sync, Clarity Roadmap to Rally objects, POR RIs with Agile ObjectID populated.
        Reconnects Solution Engineering Clarity Demo systems with the connected Rally Demo workspace data.
        Specifically CITs that have been connected to Rally using the Clarity Connections OOB integration.
        RallyDataSyncCIT05.gel

    01/13/2022 - Matt Schulze - Autoconnect bool cleanup (RallyDataSyncCIT05.gel)
    11/17/2021 - Matt Schulze - Dataset 16.0.0, minor cleanup (RallyDataSyncCIT04.gel)
    09/09/2021 - Matt Schulze - extra code cleanup, unused flags removed. VSM 15.9.3 (RallyDataSyncCIT03.gel)
    09/08/2021 - Matt Schulze - Special chars handled on name search for Rally query by using encode=false
    09/06/2021 - Matt Schulze - Can be used in demo dataset or VSM dataset, anything that has Clarity Connections
    09/01/2021 - Matt Schulze - Initial, started with RallyDataSyncRoad06.gel

    Notes: 
      ClarityUser: admin

    Processing parameters - Optional

    Testing / Debugging variables
      bSkipRESTUpdate     = if true, then we run through everything but do not update the BO. Used for looking at the debug output without updating.
    -->
                          <!-- Debug Flags, which get disabled when running in a PPM process -->
                          <core:set value="true" var="bDebug"/>
                          <core:set value="true" var="bDebugREST"/>
                          <core:set value="true" var="bDebugJSON"/>
                          <core:set value="true" var="bDebugVerLog"/>
                          <core:if test="${gel_processId != null}">
                            <core:set value="Xtrue" var="bDebug"/>
                            <core:set value="Xtrue" var="bDebugREST"/>
                            <core:set value="Xtrue" var="bDebugJSON"/>
                            <core:set value="Xtrue" var="bDebugVerLog"/>
                          </core:if>
                          <!-- This is just for Debugging. true will skip updates to the target linked CIT (Business Outcomes) -->
                          <core:set value="Xtrue" var="bSkipUpdate"/>
                          <!-- skip sql:update calls -->
                          <core:set value="Xtrue" var="bSkipRESTUpdate"/>
                          <!-- for debugging -->
                          <core:if test="${bSkipRESTUpdate}">
                            <core:set value="bSkipRESTUpdate: ${bSkipRESTUpdate}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:set value="100" var="piPageSize"/>
                          <!-- Set some defaults or get parameters from the system -->
                          <!-- <gel:parameter default="admin" var="ClarityUser"/> -->
                          <core:set value="admin" var="ClarityUser"/>
                          <!-- ___ Verbose Log Messages  ___ -->
                          <gel:parameter default="" var="VerboseLogMessages"/>
                          <core:set value="false" var="bVerboseLogMessages"/>
                          <core:if test="${(VerboseLogMessages != null)}">
                            <!-- AND -->
                            <core:if test="${(VerboseLogMessages.equalsIgnoreCase('Yes') || VerboseLogMessages.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bVerboseLogMessages"/>
                              <core:if test="${bDebug}">
                                <gel:out/>
                                <gel:out>Setting to True: Verbose Log Messages</gel:out>
                              </core:if>
                              <core:set value="true" var="bDebugVerLog"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Verbose Log Messages: ${bDebugVerLog} " var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify to use the Rally Project from the Integrations object when searching for the Rally PIs  ___ -->
                          <gel:parameter default="" var="Use_Rally_Project_Scope"/>
                          <core:set value="false" var="bUseRallyProjectScope"/>
                          <!-- default -->
                          <core:if test="${(Use_Rally_Project_Scope != null)}">
                            <!-- AND -->
                            <core:if test="${(Use_Rally_Project_Scope.equalsIgnoreCase('No') || Use_Rally_Project_Scope.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bUseRallyProjectScope"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Use_Rally_Project_Scope != null)}">
                            <!-- AND -->
                            <core:if test="${(Use_Rally_Project_Scope.equalsIgnoreCase('Yes') || Use_Rally_Project_Scope.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bUseRallyProjectScope"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="bUseRallyProjectScope: ${bUseRallyProjectScope}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify if we need to check the Integration Demo Setup flag for this script run  ___ -->
                          <gel:parameter default="" var="Chk_Int_Demo_Setup"/>
                          <core:set value="false" var="bChkIntDemoSetup"/>
                          <!-- default -->
                          <core:if test="${(Chk_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Chk_Int_Demo_Setup.equalsIgnoreCase('No') || Chk_Int_Demo_Setup.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bChkIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Chk_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Chk_Int_Demo_Setup.equalsIgnoreCase('Yes') || Chk_Int_Demo_Setup.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bChkIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Check Integration Demo Setup flag: ${bChkIntDemoSetup}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify if we should reset the Integration Demo Setup flag at the end of this script (dependent on Chk_Int_Demo_Setup true)  ___ -->
                          <gel:parameter default="" var="Reset_Int_Demo_Setup"/>
                          <core:set value="false" var="bResetIntDemoSetup"/>
                          <!-- default -->
                          <core:if test="${(Reset_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Reset_Int_Demo_Setup.equalsIgnoreCase('No') || Reset_Int_Demo_Setup.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bResetIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Reset_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Reset_Int_Demo_Setup.equalsIgnoreCase('Yes') || Reset_Int_Demo_Setup.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bResetIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Reset the Integration Demo Setup flag: ${bResetIntDemoSetup}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify to set the Integrations object to Active  ___ -->
                          <gel:parameter default="" var="Set_Int_Demo_to_Active"/>
                          <core:set value="false" var="bSetIntDemoToActive"/>
                          <!-- default -->
                          <core:if test="${(Set_Int_Demo_to_Active != null)}">
                            <!-- AND -->
                            <core:if test="${(Set_Int_Demo_to_Active.equalsIgnoreCase('No') || Set_Int_Demo_to_Active.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bSetIntDemoToActive"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Set_Int_Demo_to_Active != null)}">
                            <!-- AND -->
                            <core:if test="${(Set_Int_Demo_to_Active.equalsIgnoreCase('Yes') || Set_Int_Demo_to_Active.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bSetIntDemoToActive"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Set Integration to Active flag: ${bSetIntDemoToActive}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- Script timing variables -->
                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart"/>
                          <core:new className="java.util.Date" var="dteElapse"/>
                          <core:new className="java.text.SimpleDateFormat" var="sdFmtElapse">
                            <core:arg type="java.lang.String" value="HH:mm:ss.SSS"/>
                          </core:new>
                          <core:new className="java.text.DecimalFormat" var="sdFmtElapseNum">
                            <core:arg type="java.lang.String" value="0.000"/>
                          </core:new>
                          <core:invokeStatic className="java.lang.Runtime" method="getRuntime" var="myRuntime"/>
                          <core:invokeStatic className="java.util.TimeZone" method="getTimeZone" var="tzGMT">
                            <core:arg type="java.lang.String" value="GMT"/>
                          </core:invokeStatic>
                          <core:set value="${sdFmtElapse.setTimeZone(tzGMT)}" var="dummy"/>
                          <!-- we need to set GMT, otherwise timings add the GMT hr offset of 18 hrs -->
                          <gel:formatDate format="yyyy-MM-dd HH:MM:S" stringVar="today"/>
                          <!-- Basic Rally Variables -->
                          <core:set value="/slm/webservice/v2.0" var="RallyUrlPath"/>
                          <!-- becomes: ${RallyHost}${RallyUrlPath}  -->
                          <core:set value="/ppm/rest/v1" var="PPMUrlPath"/>
                          <!-- becomes: ${XOGURL}${PPMUrlPath}  -->
                          <!-- CA PPM XOG URL Settings -->
                          <core:invokeStatic className="com.niku.union.config.ConfigurationManager" method="getInstance" var="config"/>
                          <core:set value="${config.getProperties().getWebServer().getWebServerInstance(0).getId()}" var="WebServerid"/>
                          <core:if test="${WebServerid == 'app'}">
                            <core:set value="${config.getProperties().getWebServer().getWebServerInstance(0).getEntryUrl()}" var="EntryURL"/>
                          </core:if>
                          <core:if test="${WebServerid != 'app'}">
                            <!-- Try the second entry to see if it is the app definition -->
                            <core:set value="${config.getProperties().getWebServer().getWebServerInstance(1).getId()}" var="WebServerid"/>
                            <core:if test="${WebServerid == 'app'}">
                              <core:set value="${config.getProperties().getWebServer().getWebServerInstance(1).getEntryUrl()}" var="EntryURL"/>
                            </core:if>
                          </core:if>
                          <!-- XOGURL can be used for debugging to override local URL -->
                          <core:if test="${XOGURL == null || XOGURL.length() == 0}">
                            <core:set value="${EntryURL}" var="XOGURL"/>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Clarity URL: ${XOGURL}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!--Get sessionID by Username-->
                          <!-- <gel:parameter default="admin" var="username"/> -->
                          <core:new className="com.niku.union.security.DefaultSecurityIdentifier" var="secId"/>
                          <core:invokeStatic className="com.niku.union.security.UserSessionControllerFactory" method="getInstance" var="userSessionCtrl"/>
                          <core:set value="${userSessionCtrl.init(ClarityUser,secId)}" var="secId"/>
                          <core:set value="${secId.getSessionId()}" var="sessionID"/>
                          <core:set value="authToken" var="h_authToken"/>
                          <core:set value="${sessionID}" var="v_authToken"/>
                          <!-- If a password was supplied, we could use it here -->
                          <core:set value="" var="v_PPMencoded"/>
                          <core:if test="${(ClarityPwd != null)}">
                            <core:set value="${ClarityUser}:${ClarityPwd}" var="credentials"/>
                            <core:invokeStatic className="com.niku.union.utility.Base64" method="encode" var="v_PPMencoded">
                              <core:arg type="java.lang.String" value="${credentials}"/>
                            </core:invokeStatic>
                            <core:set value="Authorization" var="h_authToken"/>
                            <core:set value="Basic ${v_PPMencoded}" var="v_authToken"/>
                            <core:set value="Using supplied credentials for user: ${ClarityUser}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                            <core:if test="${bDebug}">
                              <gel:out>PPMencodedCredentials: ${v_PPMencoded}</gel:out>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="ClarityUser: ${ClarityUser}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="sessionID: ${sessionID}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="v_PPMencoded: ${v_PPMencoded}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="using... ${h_authToken}: ${v_authToken}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Use the Roadmap Internal ID from the Object Id tied to the process. Can optionally set it for debugging  ___ -->
                          <core:choose>
                            <core:when test="${gel_objectInstanceId == null}">
                              <!-- Debugging -->
                              <core:if test="${(v_PPMRoadmapIntId != null)}">
                                <!-- AND -->
                                <core:if test="${(v_PPMRoadmapIntId.length() &gt; 0)}">
                                  <core:set value="${v_PPMRoadmapIntId}" var="v_RoadmapIntId"/>
                                </core:if>
                              </core:if>
                            </core:when>
                            <core:otherwise>
                              <core:set value="${gel_objectInstanceId}" var="v_RoadmapIntId"/>
                            </core:otherwise>
                          </core:choose>
                          <!-- This is outbound Apache HttpClient class for the REST calls to Clarity -->
                          <core:invokeStatic className="org.apache.http.impl.client.HttpClients" method="createDefault" var="client"/>
                          <core:catch var="exvar1">
                            <core:set value="false" var="bRunDemoSetup"/>
                            <core:if test="${bChkIntDemoSetup}">
                              <!-- ________________________ -->
                              <!-- ___ Get the Integrations for one with Run Data Sync checked   ___ -->
                              <core:set var="httpRESTURL">${XOGURL}${PPMUrlPath}/integrations</core:set>
                              <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                              </core:new>
                              <core:set value="${httpURI.setParameter('fields', 'name,code,isActive')}" var="void"/>
                              <core:set value="${httpURI.setParameter('limit', '200')}" var="void"/>
                              <core:set value="${httpURI.setParameter('filter', '(z_runDataSync = true)')}" var="void"/>
                              <core:new className="org.apache.http.client.methods.HttpGet" var="httpget">
                                <core:arg type="java.net.URI" value="${httpURI.build()}"/>
                              </core:new>
                              <core:if test="${bDebugREST}">
                                <gel:out>httpget.getURI():  ${httpget.getURI()}</gel:out>
                              </core:if>
                              <core:expr value="${httpget.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                              <core:expr value="${httpget.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                              <core:expr value="${httpget.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                              <core:expr value="${httpget.setHeader(h_authToken, v_authToken)}"/>
                              <!-- Should be just client.execute(httpget), but we need to identify the httpget class by specifying it using the core:arg parameter -->
                              <core:invoke method="execute" on="${client}" var="response">
                                <core:arg type="org.apache.http.client.methods.HttpGet" value="${httpget}"/>
                              </core:invoke>
                              <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                              <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                              <!-- this is usually empty, pointless -->
                              <core:if test="${bDebugREST}">
                                <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                              </core:if>
                              <core:set value="${null}" var="httpInputStream"/>
                              <core:set value="${response.getEntity()}" var="entity"/>
                              <core:if test="${entity != null}">
                                <core:set value="${entity.getContent()}" var="httpInputStream"/>
                              </core:if>
                              <core:if test="${response_code != null}">
                                <core:if test="${(response_code != 200)}">
                                  <core:set value="ERROR on REST. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="WARN">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <core:if test="${httpInputStream == null}">
                                  <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="WARN">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <!-- OR -->
                                <core:if test="${httpInputStream != null}">
                                  <core:new className="java.io.InputStreamReader" var="v_Input">
                                    <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                  </core:new>
                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                  </core:new>
                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                  <core:if test="${bDebugREST}">
                                    <gel:out>httpData: ${httpData}</gel:out>
                                  </core:if>
                                  <!-- free up some resources -->
                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                  <core:if test="${(response_code == 200) }">
                                    <core:if test="${bDebug}">
                                      <core:set value="Getting list of Integrations..." var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                  </core:if>
                                  <!-- (response_code == 200) -->
                                  <!-- JSON Response -->
                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                  </core:new>
                                </core:if>
                                <!-- (httpInputStream != null) -->
                              </core:if>
                              <!-- (response_code != null) -->
                              <core:if test="${jsonResp == null}">
                                <core:if test="${bDebug}">
                                  <gel:out>jsonResp is null</gel:out>
                                </core:if>
                              </core:if>
                              <core:set value="" var="v_IntId"/>
                              <core:set value="" var="v_IntIdInt"/>
                              <core:set value="" var="v_IntCode"/>
                              <core:set value="" var="v_IntName"/>
                              <core:if test="${jsonResp != null}">
                                <core:set value="${jsonResp.get('_recordsReturned')}" var="v_recordsReturned"/>
                                <core:if test="${bDebugVerLog}">
                                  <gel:out trim="false">v_recordsReturned[${v_recordsReturned}]</gel:out>
                                </core:if>
                                <core:if test="${(v_recordsReturned &gt; 0)}">
                                  <core:set value="Integration Found with Run Data Sync checked" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:set value="true" var="bRunDemoSetup"/>
                                  <!-- Results, in a single entry array  -->
                                  <core:set value="${jsonResp.getJSONArray('_results')}" var="jarrRArray"/>
                                  <core:if test="${jarrRArray == null}">
                                    <core:if test="${bDebug}">
                                      <core:if test="${bDebug}">
                                        <gel:out>jarrRArray is null</gel:out>
                                      </core:if>
                                    </core:if>
                                  </core:if>
                                  <core:if test="${jarrRArray != null}">
                                    <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                    <core:if test="${bDebug}">
                                      <gel:out>Integration # Results: ${len_jarrRArray}</gel:out>
                                    </core:if>
                                    <core:set value="0" var="i_jarrRArray"/>
                                    <!-- this is a String -->
                                    <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                    <!-- convert to numeric, but the default is a long -->
                                    <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                    <!-- convert the long to an int, which we need for the json calls to work -->
                                    <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                      <!-- Get the JSON Object from the Array -->
                                      <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                      <core:if test="${bDebugJSON}">
                                        <gel:out>jsonRArray:</gel:out>
                                        <gel:out>${jsonRArray.toString(1)}</gel:out>
                                      </core:if>
                                      <!-- we add wrapper spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                      <core:set value=" ${jsonRArray.get('_internalId')} " var="im_Id"/>
                                      <core:set value="${im_Id.trim()}" var="im_Id"/>
                                      <core:set value="${jsonRArray.get('_internalId')}" var="im_IdInt"/>
                                      <core:set value="${jsonRArray.getString('name')}" var="im_Name"/>
                                      <core:set value="${jsonRArray.getString('code')}" var="im_Code"/>
                                      <core:set value="${jsonRArray.get('isActive')}" var="im_isActive"/>
                                      <core:if test="${bDebugVerLog}">
                                        <gel:out trim="false">Found Integration: Id.Code[${im_Id}.${im_Code}] Name[${im_Name}] isActive[${im_isActive}]</gel:out>
                                      </core:if>
                                      <core:if test="${bDebugVerLog}">
                                        <gel:out trim="false"/>
                                      </core:if>
                                      <!-- Save the Integration object name for later use -->
                                      <core:set value="${im_Id}" var="v_IntId"/>
                                      <core:set value="${im_IdInt}" var="v_IntIdInt"/>
                                      <core:set value="${im_Code}" var="v_IntCode"/>
                                      <core:set value="${im_Name}" var="v_IntName"/>
                                      <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                      <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                      <!-- convert the long back to an int, which we need for the json calls -->
                                    </core:while>
                                    <!-- i_jarrRArray < len_jarrRArray -->
                                    <core:if test="${bDebug}">
                                      <gel:out/>
                                    </core:if>
                                  </core:if>
                                </core:if>
                                <!-- (v_recordsReturned > 0) -->
                                <core:if test="${(v_recordsReturned == 0)}">
                                  <core:set value="No Integrations with Run Data Sync Found" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <!-- (v_recordsReturned == 0) -->
                              </core:if>
                              <!-- jsonResp != null -->
                            </core:if>
                            <!-- bChkIntDemoSetup -->
                            <core:if test="${(!(bChkIntDemoSetup)) || ((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup))}">
                              <!-- DB Debug Settings -->
                              <core:choose>
                                <core:when test="${gel_processId == null}">
                                  <core:set value="Setting datasource to ${v_nikuDB}..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <gel:setDataSource dbId="${v_nikuDB}"/>
                                </core:when>
                                <core:otherwise>
                                  <!-- default to niku for out demos -->
                                  <gel:setDataSource dbId="niku"/>
                                  <!-- override default if we were given a specific value -->
                                  <core:if test="${(v_nikuDB != null)}">
                                    <!-- AND -->
                                    <core:if test="${(v_nikuDB.length() &gt; 0)}">
                                      <gel:setDataSource dbId="${v_nikuDB}"/>
                                    </core:if>
                                  </core:if>
                                </core:otherwise>
                              </core:choose>
                              <core:new className="java.util.HashMap" var="mapRRCodeName"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeURL"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeAuthType"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeKey"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeEnc"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeUser"/>
                              <core:new className="java.util.HashMap" var="mapRRCodePass"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeIsActive"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeWrk"/>
                              <core:new className="java.util.HashMap" var="mapRRCodePrjPI"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeTskPI"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeDefOwn"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeDefPrj"/>
                              <!-- ________________ -->
                              <!-- ___ Get the Remote API settings for Rally ___ -->
                              <sql:query var="v_invRemoteRally">
        SELECT  int.code
              , int.name
              , int.endpoint_url
              , int.api_key
              , int.auth_type
              , int.user_name
              , int.password
              , int.is_active
              , int.integration_instance agl_workspace 
              , oint.agl_tsk_sync
              , oint.agl_create_direction
              , oint.agl_prj_template
              , oint.agl_ctr_prj_pi_type
              , oint.agl_ctr_tsk_pi_type
              , oint.agl_ctr_def_own_id
              , oint.agl_ctr_def_prj_id
         FROM nmc_integrations int, odf_ca_integration oint
        WHERE int.id  = oint.id
          AND int.integration_vendor_code = 'RALLY'
      </sql:query>
                              <core:if test="${bDebug}">
                                <gel:out trim="false">Got PPM DB Connection.</gel:out>
                              </core:if>
                              <core:set value="${v_invRemoteRally.rows.size()}" var="len_arrRemoteRally"/>
                              <core:if test="${bDebug}">
                                <gel:out/>
                                <gel:out>Number of Rally integrations found: ${len_arrRemoteRally}</gel:out>
                              </core:if>
                              <core:forEach indexVar="i" items="${v_invRemoteRally.rows}" var="thisrow">
                                <core:set var="v_RRcode"><![CDATA[${v_invRemoteRally.rows[i].code}]]></core:set>
                                <core:set var="v_RRname"><![CDATA[${v_invRemoteRally.rows[i].name}]]></core:set>
                                <core:set var="v_RRendpoint_url"><![CDATA[${v_invRemoteRally.rows[i].endpoint_url}]]></core:set>
                                <core:set var="v_RRapi_key"><![CDATA[${v_invRemoteRally.rows[i].api_key}]]></core:set>
                                <core:set var="v_RRauth_type"><![CDATA[${v_invRemoteRally.rows[i].auth_type}]]></core:set>
                                <core:set var="v_RRuser"><![CDATA[${v_invRemoteRally.rows[i].user_name}]]></core:set>
                                <core:set var="v_RRpass"><![CDATA[${v_invRemoteRally.rows[i].password}]]></core:set>
                                <core:set var="v_RRworkspace"><![CDATA[${v_invRemoteRally.rows[i].agl_workspace}]]></core:set>
                                <core:set var="v_RRis_active"><![CDATA[${v_invRemoteRally.rows[i].is_active}]]></core:set>
                                <core:set var="v_RRagl_tsk_sync"><![CDATA[${v_invRemoteRally.rows[i].agl_tsk_sync}]]></core:set>
                                <core:set var="v_RRagl_create_direction"><![CDATA[${v_invRemoteRally.rows[i].agl_create_direction}]]></core:set>
                                <core:set var="v_RRagl_prj_template"><![CDATA[${v_invRemoteRally.rows[i].agl_prj_template}]]></core:set>
                                <core:set var="v_RRprj_pi_type"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_prj_pi_type}]]></core:set>
                                <core:set var="v_RRtsk_pi_type"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_tsk_pi_type}]]></core:set>
                                <core:set var="v_RRdef_own_id"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_def_own_id}]]></core:set>
                                <core:set var="v_RRdef_prj_id"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_def_prj_id}]]></core:set>
                                <core:set var="v_RRprj_pi_type">${v_RRprj_pi_type.toString().replace(' ','')}</core:set>
                                <core:set var="v_RRtsk_pi_type">${v_RRtsk_pi_type.toString().replace(' ','')}</core:set>
                                <core:set value="${v_RRapi_key}" var="v_secKey"/>
                                <core:set value="${v_RRpass}" var="v_secPass"/>
                                <core:invokeStatic className="com.niku.union.security.StringEncrypter" method="getDefaultInstance" var="v_secIdDef"/>
                                <core:set value="${v_secIdDef.decrypt(v_RRapi_key)}" var="v_secKey"/>
                                <core:set value="${v_secIdDef.decrypt(v_RRpass)}" var="v_secPass"/>
                                <core:if test="${v_RRauth_type.equals('BASIC')}">
                                  <core:if test="${(v_RRuser != null) &amp;&amp; (v_RRuser.length() &gt; 0)}">
                                    <core:set value="${v_RRuser}:${v_secPass}" var="credentials"/>
                                    <core:invokeStatic className="java.util.Base64" method="getEncoder" var="encoder"/>
                                    <core:set value="${encoder.encodeToString( credentials.getBytes() )}" var="v_RRencoded"/>
                                    <core:if test="${bDebug}">
                                      <gel:out>encodedCredentials: ${v_RRencoded}</gel:out>
                                    </core:if>
                                  </core:if>
                                </core:if>
                                <core:if test="${bDebug || bDebugSec}">
                                  <core:set value="v_secIdDef ${v_RRname}: v_RRapi_key[${v_RRapi_key}] v_secKey[${v_secKey}] " var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:set value="v_secIdDef ${v_RRname}: v_RRpass[${v_RRpass}] v_secPass[${v_secPass}] v_RRencoded(${v_RRencoded})" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <core:if test="${bDebug || bDebugSec}">
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: URL(${v_RRendpoint_url})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: wrkSpc(${v_RRworkspace}) PrgPI(${v_RRprj_pi_type}) TskPI(${v_RRtsk_pi_type})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRauth_type(${v_RRauth_type}) v_RRapi_key(${v_RRapi_key}) v_secKey(${v_secKey})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRuser(${v_RRuser}) v_RRpass(${v_RRpass}) v_secPass(${v_secPass})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRencoded(${v_RRencoded}) </gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRagl_create_direction(${v_RRagl_create_direction}) v_RRagl_tsk_sync(${v_RRagl_tsk_sync}) v_RRagl_prj_template(${v_RRagl_prj_template})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRcps_use_for_cit(${v_RRcps_use_for_cit})</gel:out>
                                  <gel:out/>
                                </core:if>
                                <core:set value="${mapRRCodeName.put(v_RRcode,v_RRname)}" var="void"/>
                                <core:set value="${mapRRCodeURL.put(v_RRcode,v_RRendpoint_url)}" var="void"/>
                                <core:set value="${mapRRCodeAuthType.put(v_RRcode,v_RRauth_type)}" var="void"/>
                                <core:set value="${mapRRCodeKey.put(v_RRcode,v_secKey)}" var="void"/>
                                <core:set value="${mapRRCodeEnc.put(v_RRcode,v_RRencoded)}" var="void"/>
                                <core:set value="${mapRRCodeUser.put(v_RRcode,v_RRuser)}" var="void"/>
                                <core:set value="${mapRRCodePass.put(v_RRcode,v_secPass)}" var="void"/>
                                <core:set value="${mapRRCodeIsActive.put(v_RRcode,v_RRis_active)}" var="void"/>
                                <core:set value="${mapRRCodeWrk.put(v_RRcode,v_RRworkspace)}" var="void"/>
                                <core:set value="${mapRRCodePrjPI.put(v_RRcode,v_RRprj_pi_type)}" var="void"/>
                                <core:set value="${mapRRCodeTskPI.put(v_RRcode,v_RRtsk_pi_type)}" var="void"/>
                                <core:set value="${mapRRCodeDefOwn.put(v_RRcode,v_RRdef_own_id)}" var="void"/>
                                <core:set value="${mapRRCodeDefPrj.put(v_RRcode,v_RRdef_prj_id)}" var="void"/>
                              </core:forEach>
                              <!-- ___ Useful message to our users, if they can find the job message log. ___ -->
                              <core:if test="${len_arrRemoteRally == 0}">
                                <core:if test="${bDebug}">
                                  <gel:out/>
                                </core:if>
                                <core:set value="ERROR: Remote API Setup not found for Rally Integration. Call your CA PPM Admin or your CA PPM Presales Core Team." var="logMessage"/>
                                <core:choose>
                                  <core:when test="${gel_processId == null}">
                                    <gel:out>${logMessage}</gel:out>
                                  </core:when>
                                  <core:otherwise>
                                    <gel:log level="ERROR">${logMessage}</gel:log>
                                  </core:otherwise>
                                </core:choose>
                              </core:if>
                              <core:if test="${bDebug}">
                                <gel:out/>
                              </core:if>
                              <core:catch var="exvar5">
                                <!-- ________________ -->
                                <!-- ___ Get the Remote API settings for Rally ___ -->
                                <sql:query var="v_intMappings">
          SELECT  iim.id iim_id
                , iim.code iim_code
                , iim.name iim_name
                , iim.integration int_id
                , iom.id iom_id
                , iom.code iom_code
                , iom.name iom_name
                , iom.clarity_object_id iom_clr_obj_id
                , iom.EXTERNAL_OBJECT_ID iom_ext_obj_id
                , ieo.code ieo_code
                , ieo.NAME ieo_name
                , ieo.EXTERNAL_API_ALIAS ieo_ext_api
                , ieo.TYPE_PATH ieo_ext_typepath
                , ieo.obj_id ieo_obj_id
                , ieo.obj_uuid ieo_obj_uuid
                , ieo.is_active ieo_is_active
                , oo.API_ALIAS oo_clr_api_alias
            FROM int_objectmappings iom
            LEFT OUTER JOIN int_integrationmappings iim ON iim.id = iom.im_id
            LEFT OUTER JOIN int_external_objects ieo ON ieo.code = iom.external_object_id
            LEFT OUTER JOIN odf_objects oo on oo.code = iom.clarity_object_id
        </sql:query>
                                <core:if test="${bDebug}">
                                  <gel:out trim="false">Got PPM DB Connection.</gel:out>
                                </core:if>
                                <core:set value="${v_intMappings.rows.size()}" var="len_arrRemoteRally"/>
                                <core:if test="${bDebug}">
                                  <gel:out/>
                                  <gel:out>Number of Rally integrations found: ${len_arrRemoteRally}</gel:out>
                                </core:if>
                                <core:forEach indexVar="i" items="${v_intMappings.rows}" var="thisrow">
                                  <core:set var="v_iim_id"><![CDATA[${v_intMappings.rows[i].iim_id}]]></core:set>
                                  <core:set var="v_iim_code"><![CDATA[${v_intMappings.rows[i].iim_code}]]></core:set>
                                  <core:set var="v_iim_name"><![CDATA[${v_intMappings.rows[i].iim_name}]]></core:set>
                                  <core:set var="v_int_id"><![CDATA[${v_intMappings.rows[i].int_id}]]></core:set>
                                  <core:set var="v_iom_id"><![CDATA[${v_intMappings.rows[i].iom_id}]]></core:set>
                                  <core:set var="v_iom_code"><![CDATA[${v_intMappings.rows[i].iom_code}]]></core:set>
                                  <core:set var="v_iom_name"><![CDATA[${v_intMappings.rows[i].iom_name}]]></core:set>
                                  <core:set var="v_iom_clr_obj_id"><![CDATA[${v_intMappings.rows[i].iom_clr_obj_id}]]></core:set>
                                  <core:set var="v_iom_ext_obj_id"><![CDATA[${v_intMappings.rows[i].iom_ext_obj_id}]]></core:set>
                                  <core:set var="v_ieo_code"><![CDATA[${v_intMappings.rows[i].ieo_code}]]></core:set>
                                  <core:set var="v_ieo_name"><![CDATA[${v_intMappings.rows[i].ieo_name}]]></core:set>
                                  <core:set var="v_ieo_ext_api"><![CDATA[${v_intMappings.rows[i].ieo_ext_api}]]></core:set>
                                  <core:set var="v_ieo_ext_typepath"><![CDATA[${v_intMappings.rows[i].ieo_ext_typepath}]]></core:set>
                                  <core:set var="v_ieo_obj_id"><![CDATA[${v_intMappings.rows[i].ieo_obj_id}]]></core:set>
                                  <core:set var="v_ieo_obj_uuid"><![CDATA[${v_intMappings.rows[i].ieo_obj_uuid}]]></core:set>
                                  <core:set var="v_ieo_is_active"><![CDATA[${v_intMappings.rows[i].ieo_is_active}]]></core:set>
                                  <core:set var="v_oo_clr_api_alias"><![CDATA[${v_intMappings.rows[i].oo_clr_api_alias}]]></core:set>
                                  <!--
          <core:set var="v_RRprj_pi_type">${v_RRprj_pi_type.toString().replace(' ','')}</core:set>	
          <core:set var="v_RRtsk_pi_type">${v_RRtsk_pi_type.toString().replace(' ','')}</core:set>	
            -->
                                  <core:set value="IntMapping(${v_iim_code}) ${v_iim_name}: ObjMapping(${v_iom_ext_obj_id}) ${v_iom_name}:  Clarity(${v_iom_clr_obj_id}) ${v_oo_clr_api_alias}:  Rally(${v_ieo_ext_api}) ${v_ieo_name}  " var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:if test="${bDebug}">
                                    <gel:out>v_iim_id           (${v_iim_id})            </gel:out>
                                    <gel:out>v_iim_code         (${v_iim_code})          </gel:out>
                                    <gel:out>v_iim_name         (${v_iim_name})          </gel:out>
                                    <gel:out>v_int_id           (${v_int_id})            </gel:out>
                                    <gel:out>v_iom_id           (${v_iom_id})            </gel:out>
                                    <gel:out>v_iom_code         (${v_iom_code})          </gel:out>
                                    <gel:out>v_iom_name         (${v_iom_name})          </gel:out>
                                    <gel:out>v_iom_clr_obj_id   (${v_iom_clr_obj_id})    </gel:out>
                                    <gel:out>v_iom_ext_obj_id   (${v_iom_ext_obj_id})    </gel:out>
                                    <gel:out>v_ieo_code         (${v_ieo_code})          </gel:out>
                                    <gel:out>v_ieo_name         (${v_ieo_name})          </gel:out>
                                    <gel:out>v_ieo_ext_api      (${v_ieo_ext_api})       </gel:out>
                                    <gel:out>v_ieo_ext_typepath (${v_ieo_ext_typepath})  </gel:out>
                                    <gel:out>v_ieo_obj_id       (${v_ieo_obj_id})        </gel:out>
                                    <gel:out>v_ieo_obj_uuid     (${v_ieo_obj_uuid})      </gel:out>
                                    <gel:out>v_ieo_is_active    (${v_ieo_is_active})     </gel:out>
                                    <gel:out>v_oo_clr_api_alias (${v_oo_clr_api_alias})  </gel:out>
                                    <gel:out/>
                                  </core:if>
                                  <!-- ________________________ -->
                                  <!-- ___ Get the list of connected CIT instances that use this Integration Mapping   ___ -->
                                  <core:if test="${bDebug}">
                                    <gel:out>Get the list of CITs for processing ...</gel:out>
                                  </core:if>
                                  <core:set var="httpRESTURL">${XOGURL}${PPMUrlPath}/${v_oo_clr_api_alias}</core:set>
                                  <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                    <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                  </core:new>
                                  <core:set value="code,name,objectType,integrationMapping,externalObject" var="v_FldNames"/>
                                  <core:set value="${httpURI.setParameter('fields', v_FldNames)}" var="void"/>
                                  <!-- <core:set var="void" value="${httpURI.setParameter('limit', '100')}"/> -->
                                  <core:set value="${httpURI.setParameter('limit', piPageSize)}" var="void"/>
                                  <core:set encode="false" value="((integrationMapping = '${v_iim_code}') and (externalObject != null))" var="v_Filter"/>
                                  <core:set value="${httpURI.setParameter('filter', v_Filter)}" var="void"/>
                                  <core:if test="${bDebugREST}">
                                    <gel:out>httpRESTURL: ${httpURI.toString()}</gel:out>
                                  </core:if>
                                  <core:new className="org.apache.http.client.methods.HttpGet" var="httpget">
                                    <core:arg type="java.net.URI" value="${httpURI.build()}"/>
                                  </core:new>
                                  <core:expr value="${httpget.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                  <core:expr value="${httpget.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                  <core:expr value="${httpget.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                                  <core:expr value="${httpget.setHeader(h_authToken, v_authToken)}"/>
                                  <!-- Should be just client.execute(httpget), but we need to identify the httpget class by specifying it using the core:arg parameter -->
                                  <core:invoke method="execute" on="${client}" var="response">
                                    <core:arg type="org.apache.http.client.methods.HttpGet" value="${httpget}"/>
                                  </core:invoke>
                                  <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                                  <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                                  <!-- this is usually empty, pointless -->
                                  <core:if test="${bDebugREST}">
                                    <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                                  </core:if>
                                  <core:set value="${null}" var="httpInputStream"/>
                                  <core:set value="${response.getEntity()}" var="entity"/>
                                  <core:if test="${entity != null}">
                                    <core:set value="${entity.getContent()}" var="httpInputStream"/>
                                  </core:if>
                                  <core:if test="${response_code != null}">
                                    <core:if test="${response_code == 400}">
                                      <core:set value="ERROR on REST: Probably a missing custom field on the CIT(${v_oo_clr_api_alias})" var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="WARN">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                    <core:if test="${response_code == 404}">
                                      <core:set value="ERROR: CIT Not found for: ${v_oo_clr_api_alias}" var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="WARN">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                    <core:if test="${(response_code != 200)}">
                                      <core:set value="ERROR on REST. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="WARN">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                    <core:if test="${httpInputStream == null}">
                                      <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="WARN">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                    <!-- OR -->
                                    <core:if test="${httpInputStream != null}">
                                      <core:new className="java.io.InputStreamReader" var="v_Input">
                                        <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                      </core:new>
                                      <core:new className="java.io.BufferedReader" var="v_InputData">
                                        <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                      </core:new>
                                      <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                      <core:if test="${bDebugREST}">
                                        <gel:out>httpData: ${httpData}</gel:out>
                                      </core:if>
                                      <!-- free up some resources -->
                                      <core:set value="${httpInputStream.close()}" var="dummy"/>
                                      <core:if test="${(response_code == 200) }">
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">Processing connected CITs...</gel:out>
                                        </core:if>
                                      </core:if>
                                      <!-- (response_code == 200) -->
                                      <!-- JSON Response -->
                                      <core:new className="org.json.JSONObject" var="jsonCIT">
                                        <core:arg type="java.lang.String" value="${httpData}"/>
                                      </core:new>
                                    </core:if>
                                    <!-- (httpInputStream != null) -->
                                  </core:if>
                                  <!-- (response_code != null) -->
                                  <core:if test="${jsonCIT == null}">
                                    <core:if test="${bDebug}">
                                      <core:if test="${bDebug}">
                                        <gel:out>jsonCIT is null</gel:out>
                                      </core:if>
                                    </core:if>
                                  </core:if>
                                  <core:if test="${bDebugJSON}">
                                    <gel:out>jsonCIT:</gel:out>
                                    <gel:out>${jsonCIT.toString(1)}</gel:out>
                                    <gel:out>__________________</gel:out>
                                  </core:if>
                                  <core:if test="${jsonCIT != null}">
                                    <core:set value="${mapRRCodeURL.get(v_int_id)}" var="RallyHost"/>
                                    <core:set value="${mapRRCodeAuthType.get(v_int_id)}" var="v_RRauth_type"/>
                                    <core:set value="${mapRRCodeIsActive.get(v_int_id)}" var="v_RRis_active"/>
                                    <core:set value="${mapRRCodeKey.get(v_int_id)}" var="v_RRapi_key"/>
                                    <core:set value="${mapRRCodeEnc.get(v_int_id)}" var="v_RRencoded"/>
                                    <core:set value="${mapRRCodePrjPI.get(v_int_id)}" var="v_Uagl_Prj_Code"/>
                                    <core:set value="${mapRRCodePrjPI.get(v_int_id)}" var="v_RRdef_prj_id"/>
                                    <core:set value="true" var="bProcessRIs"/>
                                    <core:while test="${(bProcessRIs)}">
                                      <!-- Results are in an array  -->
                                      <core:set value="${jsonCIT.getJSONArray('_results')}" var="jarrRArray"/>
                                      <core:if test="${jarrRArray == null}">
                                        <core:if test="${bDebug}">
                                          <core:if test="${bDebug}">
                                            <gel:out>jarrRArray is null</gel:out>
                                          </core:if>
                                        </core:if>
                                      </core:if>
                                      <core:if test="${jarrRArray != null}">
                                        <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                        <core:if test="${bDebug}">
                                          <gel:out>CIT# Results: ${len_jarrRArray}</gel:out>
                                          <gel:out/>
                                        </core:if>
                                        <core:set value="0" var="i_jarrRArray"/>
                                        <!-- this is a String -->
                                        <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                        <!-- convert to numeric, but the default is a long -->
                                        <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                        <!-- convert the long to an int, which we need for the json calls to work -->
                                        <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                          <!-- Get the JSON Object from the Array -->
                                          <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                          <!-- This is the main group of attributes that we need -->
                                          <core:set value="${jsonRArray.getString('_internalId')}" var="cit_IntId"/>
                                          <core:set value="${jsonRArray.getString('code')}" var="cit_Code"/>
                                          <core:set value="${jsonRArray.getString('name')}" var="cit_Name"/>
                                          <core:set value="${jsonRArray.get('externalObject')}" var="cit_extObj"/>
                                          <core:set value="${jsonRArray.get('objectType')}" var="cit_objType"/>
                                          <core:if test="${bDebug}">
                                            <gel:out>___ CIT Attributes ___</gel:out>
                                            <gel:out>cit_IntId            : ${cit_IntId}</gel:out>
                                            <gel:out>cit_Code             : ${cit_Code}</gel:out>
                                            <gel:out>cit_Name             : ${cit_Name}</gel:out>
                                            <gel:out>cit_extObj           : ${cit_extObj}</gel:out>
                                            <gel:out>cit_objType          : ${cit_objType}</gel:out>
                                          </core:if>
                                          <!-- MJS Start here -->
                                          <core:if test="${bDebugVerLog}">
                                            <core:set value="CIT (${cit_Code}.${cit_IntId}): ${cit_Name} linkedTo(${v_ieo_ext_api}) ${v_ieo_ext_typepath}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <!-- First, look to see if the linked CIT still exists -->
                                          <core:set value="false" var="bFoundLinkedPI"/>
                                          <!-- ________________________ -->
                                          <!-- ___ Get the Rally Initiative info  ___ -->
                                          <core:if test="${bDebug}">
                                            <gel:out>Get Rally PI Info...</gel:out>
                                          </core:if>
                                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_23"/>
                                          <core:catch var="exvar3">
                                            <!-- Rally REST Portfolio Item Calls Start... -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_ieo_ext_typepath}</core:set>
                                            <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set encode="false" trim="false" var="z_query">(Name contains "${cit_Name}")</core:set>
                                            <core:set trim="false" value="${httpURI.setParameter('query', z_query)}" var="void"/>
                                            <core:if test="${bUseRallyProjectScope}">
                                              <core:set trim="false" value="${httpURI.setParameter('projectScopeUp', 'false')}" var="void"/>
                                              <core:set trim="false" value="${httpURI.setParameter('projectScopeDown', 'true')}" var="void"/>
                                              <core:set encode="false" var="v_projectScope">${RallyHost}${RallyUrlPath}/project/${v_RRdef_prj_id}</core:set>
                                              <core:set value="${httpURI.setParameter('project', v_projectScope)}" var="void"/>
                                            </core:if>
                                            <core:set value="${httpURI.setParameter('fetch', 'ObjectID,FormattedID,Name')}" var="void"/>
                                            <core:if test="${(!(bSkipWorkspace) &amp;&amp; (v_RRworkspace != null) &amp;&amp; (v_RRworkspace.length() gt 0))}">
                                              <core:set encode="false" var="v_workspace">${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                              <core:set value="${httpURI.setParameter('workspace', v_workspace)}" var="void"/>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpURI.toString()}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpURI.toString()}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_int_id(${v_int_id}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_23"/>
                                            <core:set value="${(milEnd_23 - milStart_23)}" var="elapsedTime"/>
                                            <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                            <core:if test="${bDebugTimings}">
                                              <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                            </core:if>
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_24"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_int_id}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_int_id})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:new className="java.io.BufferedReader" var="v_InputData">
                                                  <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                </core:new>
                                                <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>httpData: ${httpData}</gel:out>
                                                </core:if>
                                                <!-- free up some resources -->
                                                <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                <!-- JSON Response -->
                                                <core:new className="org.json.JSONObject" var="jsonResp">
                                                  <core:arg type="java.lang.String" value="${httpData}"/>
                                                </core:new>
                                                <core:if test="${bDebugJSON}">
                                                  <gel:out>jsonResp:</gel:out>
                                                  <gel:out>${jsonResp.toString(1)}</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                </core:if>
                                                <!-- PortfolioItem, top level JSON object -->
                                                <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                              <core:set value="Not Found CIT(${cit_Code})[${cit_Name}] " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:set value="" var="ral_UUID"/>
                                            <core:set value="" var="ral_ObjectID"/>
                                            <core:set value="" var="ral_Name"/>
                                            <core:set value="" var="ral_FmtID"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRIArray"/>
                                              <core:if test="${jarrRIArray != null}">
                                                <core:set value="${jarrRIArray.length()}" var="len_jarrRIArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRIArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRIArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRIArray+0}" var="i_jarrRIArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRIArray.intValue()}" var="i_jarrRIArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRIArray lt len_jarrRIArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRIArray.get(i_jarrRIArray)}" var="jsonRIArray"/>
                                                  <core:set value="${jsonRIArray.getString('_refObjectName')}" var="ral_Name"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRIArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                  <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                  <core:set value="${jsonRIArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                  <core:set value="${jsonRIArray.getString('FormattedID')}" var="ral_FmtID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                    <gel:out>ral_ObjectID  : ${ral_ObjectID} ${ral_ObjectID.getClass()}</gel:out>
                                                    <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                    <gel:out>ral_FmtID     : ${ral_FmtID}</gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRIArray+1}" var="i_jarrRIArray"/>
                                                  <core:set value="${i_jarrRIArray.intValue()}" var="i_jarrRIArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRIArray < len_jarrRIArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_24"/>
                                            <core:set value="${(milEnd_24 - milStart_24)}" var="elapsedTime"/>
                                            <core:if test="${bDebugTimings}">
                                              <gel:out>Elapse JSON parsing: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                            </core:if>
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                            <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                            <core:if test="${bDebugTimings}">
                                              <gel:out>Script Elapse #27: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                            </core:if>
                                            <!-- MJS __  SQL Update the RI with new agile external id-->
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                              <gel:out>Checking CIT(${cit_Code})[${cit_Name}] agl_ext_id(${v_PrjExtId}) for new agl_ext_id ObjectID(${ral_ObjectID}) UUID(${ral_UUID})...</gel:out>
                                            </core:if>
                                            <core:if test="${bDebugVerbose}">
                                              <gel:out/>
                                              <gel:out>ral_ObjectID.getClass() : ${ral_ObjectID.getClass()} ral_ObjectID.length() :${ral_ObjectID.length()}  value[${ral_ObjectID}] </gel:out>
                                              <gel:out>v_PrjExtId.getClass(): ${v_PrjExtId.getClass()} v_PrjExtId.length():${v_PrjExtId.length()}  value[${v_PrjExtId}] </gel:out>
                                            </core:if>
                                            <core:set value="false" var="bCITChangesFound"/>
                                            <core:set var="httpRESTURL">${XOGURL}${PPMUrlPath}/${v_oo_clr_api_alias}/${cit_IntId}</core:set>
                                            <core:new className="org.json.JSONObject" var="jsonPatchCIT"/>
                                            <core:set value="" var="dbgMessage"/>
                                            <core:set value="" var="chgMessage"/>
                                            <core:set value="${dbgMessage}RallyID(${cit_extObj} vs ${ral_ObjectID}) " var="dbgMessage"/>
                                            <core:if test="${(ral_ObjectID.length() &gt; 0) &amp;&amp; (!(ral_ObjectID.equals(cit_extObj)))}">
                                              <core:set value="${chgMessage}RallyID(${cit_extObj} vs ${ral_ObjectID}) " var="chgMessage"/>
                                              <core:set value="true" var="bCITChangesFound"/>
                                              <core:set value="${jsonPatchCIT.put(&quot;externalObject&quot;,ral_ObjectID)}" var="dummy"/>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <core:set value="jsonPatchCIT: ${jsonPatchCIT} " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Debug Compare: ${dbgMessage}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <!-- MJS check for changes 
                        Need a updated fields, BO to RI
                        -->
                                            <core:if test="${!(bCITChangesFound)}">
                                              <core:if test="${bDebugVerLog}">
                                                <core:set value="No changes: RI(${cit_Code})[${cit_Name}]" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${(bCITChangesFound)}">
                                              <!-- PATCH the linked object -->
                                              <core:set value="Updating CIT(${cit_Code})[${cit_Name}]" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${chgMessage.length() &gt; 0}">
                                                <core:set value="Changes: ${chgMessage}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${bDebugVerLog}">
                                                <core:set value="jsonPatchCIT: ${jsonPatchCIT} " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                              </core:if>
                                              <core:new className="org.apache.http.client.methods.HttpPatch" var="httppatch">
                                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                              </core:new>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httppatch.getURI():  ${httppatch.getURI()}</gel:out>
                                              </core:if>
                                              <core:new className="org.apache.http.entity.StringEntity" var="httpEntity">
                                                <core:arg type="java.lang.String" value="${jsonPatchCIT.toString(1)}"/>
                                              </core:new>
                                              <core:expr value="${httppatch.setEntity(httpEntity)}"/>
                                              <core:expr value="${httppatch.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                              <core:expr value="${httppatch.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                              <core:expr value="${httppatch.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                                              <core:expr value="${httppatch.setHeader(h_authToken, v_authToken)}"/>
                                              <core:set value="Processing Roadmap Item (${cit_Code}:${cit_IntId}) Name[${cit_Name}] to (${cit_linkedToObjectCode}:${cit_linkedInternalId}) ${cit_linkedToType} " var="logMessage"/>
                                              <core:if test="${!(bSkipRESTUpdate)}">
                                                <core:if test="${bDebug}">
                                                  <gel:out trim="false">Patching CIT...</gel:out>
                                                </core:if>
                                                <!-- Should be just client.execute(httppatch), but we need to identify the httppatch class by specifying it using the core:arg parameter -->
                                                <core:invoke method="execute" on="${client}" var="response">
                                                  <core:arg type="org.apache.http.client.methods.HttpPatch" value="${httppatch}"/>
                                                </core:invoke>
                                                <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                                                <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                                                <!-- this is usually empty, pointless -->
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                                                </core:if>
                                                <core:set value="${null}" var="jsonQR"/>
                                                <core:set value="${null}" var="httpInputStream"/>
                                                <core:set value="${response.getEntity()}" var="entity"/>
                                                <core:if test="${entity != null}">
                                                  <core:set value="${entity.getContent()}" var="httpInputStream"/>
                                                </core:if>
                                                <core:if test="${response_code == null}">
                                                  <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                  <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_int_id}): ${RallyHost}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                      <gel:out/>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${response_code != null}">
                                                  <core:if test="${(response_code != 200)}">
                                                    <core:set value="ERROR on PATCH. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${httpInputStream == null}">
                                                    <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <!-- OR -->
                                                  <core:if test="${httpInputStream != null}">
                                                    <core:new className="java.io.InputStreamReader" var="v_Input">
                                                      <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                    </core:new>
                                                    <core:new className="java.io.BufferedReader" var="v_InputData">
                                                      <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                    </core:new>
                                                    <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                    <core:if test="${bDebugREST}">
                                                      <gel:out>httpData: ${httpData}</gel:out>
                                                    </core:if>
                                                    <!-- free up some resources -->
                                                    <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                    <!-- JSON Response -->
                                                    <core:new className="org.json.JSONObject" var="jsonResp">
                                                      <core:arg type="java.lang.String" value="${httpData}"/>
                                                    </core:new>
                                                  </core:if>
                                                  <!-- (httpInputStream != null) -->
                                                </core:if>
                                                <!-- (response_code != null) -->
                                                <core:if test="${response_code == 200}">
                                                  <!-- Successful Update -->
                                                  <core:set value="Update of ${cit_linkedToType} (${cit_linkedToObjectCode}:${cit_linkedInternalId}) successful from CIT (${cit_Code}:${cit_IntId}) Name[${cit_Name}] " var="logMessage"/>
                                                </core:if>
                                              </core:if>
                                              <!-- !(bSkipRESTUpdate) -->
                                            </core:if>
                                            <!-- bCITChangesFound -->
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                              <gel:out/>
                                              <gel:out>==================</gel:out>
                                            </core:if>
                                          </core:catch>
                                          <!-- ___ Error Exception processing  ___ -->
                                          <core:if test="${not empty exvar3}">
                                            <gel:out/>
                                            <gel:out>__________________________________________________________________</gel:out>
                                            <core:set value="EXCEPTION: ${exvar3.getMessage()}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                            <core:if test="${bDebug}">
                                              <gel:out>exvar3.toString() ${exvar3.toString()}</gel:out>
                                              <gel:out>exvar3.getName() ${exvar3.getName()}</gel:out>
                                              <gel:out>ERROR - Exception: ${exvar3}</gel:out>
                                              <gel:out/>
                                            </core:if>
                                            <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                                              <core:arg type="java.lang.Throwable" value="${exvar3}"/>
                                            </core:new>
                                            <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                                            <gel:out/>
                                            <gel:out/>
                                            <gel:out>__________________________________________________________________</gel:out>
                                            <gel:out>__________________________________________________________________</gel:out>
                                          </core:if>
                                          <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                          <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                          <!-- convert the long back to an int, which we need for the json calls -->
                                        </core:while>
                                        <!-- i_jarrRArray lt len_jarrRArray -->
                                      </core:if>
                                      <!-- jarrRArray != null -->
                                      <!-- Check to see if we have more RIs to process. Check for a _next tag  -->
                                      <core:set value="${jsonCIT.get('_pageSize')}" var="z_pageSize"/>
                                      <core:set value="${jsonCIT.get('_recordsReturned')}" var="z_recordsReturned"/>
                                      <core:set value="${jsonCIT.get('_totalCount')}" var="z_totalCount"/>
                                      <core:set value="${null}" var="z_next"/>
                                      <core:if test="${jsonCIT.has('_next')}">
                                        <core:set value="${jsonCIT.get('_next')}" var="z_next"/>
                                      </core:if>
                                      <core:if test="${bDebugREST}">
                                        <gel:out>z_recordsReturned: ${z_recordsReturned} of totalCount: ${z_totalCount} with pageSize: ${z_pageSize}</gel:out>
                                        <core:if test="${(z_next != null)}">
                                          <gel:out>_next: ${z_next} </gel:out>
                                        </core:if>
                                      </core:if>
                                      <core:set value="false" var="bProcessRIs"/>
                                      <core:if test="${(z_next != null)}">
                                        <core:set value="true" var="bProcessRIs"/>
                                        <!-- There are more RIs to process, so get the next batch of RIs -->
                                        <core:set value="${z_next}" var="httpRESTURL"/>
                                        <core:if test="${bDebugREST}">
                                          <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                        </core:if>
                                        <core:new className="org.apache.http.client.methods.HttpGet" var="httpget">
                                          <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                        </core:new>
                                        <core:expr value="${httpget.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                        <core:expr value="${httpget.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                        <core:expr value="${httpget.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                                        <core:expr value="${httpget.setHeader(h_authToken, v_authToken)}"/>
                                        <core:invoke method="execute" on="${client}" var="response">
                                          <core:arg type="org.apache.http.client.methods.HttpGet" value="${httpget}"/>
                                        </core:invoke>
                                        <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                                        <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                                        <!-- this is usually empty, pointless -->
                                        <core:if test="${bDebugREST}">
                                          <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                                        </core:if>
                                        <core:set value="${null}" var="httpInputStream"/>
                                        <core:set value="${response.getEntity()}" var="entity"/>
                                        <core:if test="${entity != null}">
                                          <core:set value="${entity.getContent()}" var="httpInputStream"/>
                                        </core:if>
                                        <core:if test="${response_code != null}">
                                          <core:if test="${response_code == 400}">
                                            <core:set value="ERROR on REST: Probably a missing custom field on the Roadmap Item" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:if test="${response_code == 404}">
                                            <core:set value="ERROR: Next set of Roadmap Items Not found for ${z_next}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:if test="${(response_code != 200)}">
                                            <core:set value="ERROR on REST. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:if test="${httpInputStream == null}">
                                            <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <!-- OR -->
                                          <core:if test="${httpInputStream != null}">
                                            <core:new className="java.io.InputStreamReader" var="v_Input">
                                              <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                            </core:new>
                                            <core:new className="java.io.BufferedReader" var="v_InputData">
                                              <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                            </core:new>
                                            <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpData: ${httpData}</gel:out>
                                            </core:if>
                                            <!-- free up some resources -->
                                            <core:set value="${httpInputStream.close()}" var="dummy"/>
                                            <core:if test="${(response_code == 200) }">
                                              <core:if test="${bDebug}">
                                                <gel:out trim="false">Processing Next set of Roadmap Items...</gel:out>
                                              </core:if>
                                            </core:if>
                                            <!-- (response_code == 200) -->
                                            <!-- JSON Response -->
                                            <core:new className="org.json.JSONObject" var="jsonCIT">
                                              <core:arg type="java.lang.String" value="${httpData}"/>
                                            </core:new>
                                          </core:if>
                                          <!-- (httpInputStream != null) -->
                                        </core:if>
                                        <!-- (response_code != null) -->
                                        <core:if test="${jsonCIT == null}">
                                          <core:if test="${bDebug}">
                                            <core:if test="${bDebug}">
                                              <gel:out>Next call: jsonCIT is null. We should have had another set of RIs to process.</gel:out>
                                            </core:if>
                                          </core:if>
                                        </core:if>
                                      </core:if>
                                      <!-- (z_next != null) -->
                                    </core:while>
                                    <!-- More Roadmap Items to process -->
                                  </core:if>
                                  <!-- jsonCIT != null -->
                                </core:forEach>
                                <!-- ___ Useful message to our users, if they can find the job message log. ___ -->
                                <core:if test="${v_intMappings == null}">
                                  <core:if test="${bDebug}">
                                    <gel:out/>
                                  </core:if>
                                  <core:set value="No Clarity Connection Integration Mappings found." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <core:if test="${bDebug}">
                                  <gel:out/>
                                </core:if>
                                <!--
    <gel:out/><gel:out/>
    <core:break/>
    -->
                              </core:catch>
                              <!-- exvar5 -->
                              <!-- ___ Error Exception processing  ___ -->
                              <core:if test="${not empty exvar5}">
                                <core:set value="EXCEPTION: ${exvar5.getMessage()}" var="logMessage"/>
                                <core:choose>
                                  <core:when test="${gel_processId == null}">
                                    <gel:out>${logMessage}</gel:out>
                                  </core:when>
                                  <core:otherwise>
                                    <gel:log level="INFO">${logMessage}</gel:log>
                                  </core:otherwise>
                                </core:choose>
                                <core:if test="${bDebug}">
                                  <gel:out>exvar5.toString() ${exvar5.toString()}</gel:out>
                                  <gel:out>exvar5.getName() ${exvar5.getName()}</gel:out>
                                  <gel:out>ERROR - Exception: ${exvar5}</gel:out>
                                  <gel:out/>
                                </core:if>
                                <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                                  <core:arg type="java.lang.Throwable" value="${exvar5}"/>
                                </core:new>
                                <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                                <gel:out/>
                              </core:if>
                            </core:if>
                            <!-- (!(bChkIntDemoSetup)) || ((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup)) -->
                            <!-- ________________________ -->
                            <!-- ___ If needed, reset the Demo Setup flag and/or set the Integrations instance to Active  ___ -->
                            <core:if test="${(v_IntId != null) &amp;&amp; (v_IntId.length() &gt; 0)}">
                              <core:if test="${((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup) &amp;&amp; (bResetIntDemoSetup)) || (bSetIntDemoToActive)}">
                                <core:new className="org.json.JSONObject" var="jsonPatchInt"/>
                                <!-- Supply the Integrations object Internal Id on the URL for the PATCH, not in the body
        <core:set var="dummy" value='${jsonPatchInt.put("_internalId",v_IntIdInt)}'/>
        -->
                                <core:set value="false" var="bIntChangesFound"/>
                                <core:if test="${(bResetIntDemoSetup)}">
                                  <core:set value="true" var="bIntChangesFound"/>
                                  <core:set value="${(1==0)}" var="bTemp"/>
                                  <core:set value="${jsonPatchInt.put(&quot;z_runDataSync&quot;,bTemp)}" var="dummy"/>
                                  <core:if test="${bDebug}">
                                    <core:set value="set z_runDataSync to false" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                </core:if>
                                <core:if test="${(bSetIntDemoToActive)}">
                                  <core:set value="true" var="bIntChangesFound"/>
                                  <core:set value="${(1==1)}" var="bTemp"/>
                                  <core:set value="${jsonPatchInt.put(&quot;isActive&quot;,bTemp)}" var="dummy"/>
                                  <core:if test="${bDebug}">
                                    <core:set value="set isActive to true" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                </core:if>
                                <core:if test="${(bIntChangesFound)}">
                                  <core:set value="Updating (${v_IntId}.${v_IntCode}) ${v_IntName}" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:if test="${bDebugREST}">
                                    <core:set value="jsonPatchInt: ${jsonPatchInt}" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                  <!-- PATCH the linked object -->
                                  <core:set var="httpRESTURL">${XOGURL}${PPMUrlPath}/integrations/${v_IntId}</core:set>
                                  <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                    <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                  </core:new>
                                  <core:new className="org.apache.http.client.methods.HttpPatch" var="httppatch">
                                    <core:arg type="java.net.URI" value="${httpURI.build()}"/>
                                  </core:new>
                                  <core:if test="${bDebugREST}">
                                    <gel:out>httppatch.getURI():  ${httppatch.getURI()}</gel:out>
                                  </core:if>
                                  <core:new className="org.apache.http.entity.StringEntity" var="httpEntity">
                                    <core:arg type="java.lang.String" value="${jsonPatchInt.toString(1)}"/>
                                  </core:new>
                                  <core:expr value="${httppatch.setEntity(httpEntity)}"/>
                                  <core:expr value="${httppatch.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                  <core:expr value="${httppatch.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                  <core:expr value="${httppatch.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                                  <core:expr value="${httppatch.setHeader(h_authToken, v_authToken)}"/>
                                  <core:if test="${!(bSkipRESTUpdate)}">
                                    <core:if test="${bDebug}">
                                      <gel:out trim="false">Patching Integration...</gel:out>
                                    </core:if>
                                    <!-- Should be just client.execute(httppatch), but we need to identify the httppatch class by specifying it using the core:arg parameter -->
                                    <core:invoke method="execute" on="${client}" var="response">
                                      <core:arg type="org.apache.http.client.methods.HttpPatch" value="${httppatch}"/>
                                    </core:invoke>
                                    <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                                    <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                                    <!-- this is usually empty, pointless -->
                                    <core:if test="${bDebugREST}">
                                      <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                                    </core:if>
                                    <core:set value="${null}" var="jsonQR"/>
                                    <core:set value="${null}" var="httpInputStream"/>
                                    <core:set value="${response.getEntity()}" var="entity"/>
                                    <core:if test="${entity != null}">
                                      <core:set value="${entity.getContent()}" var="httpInputStream"/>
                                    </core:if>
                                    <core:if test="${response_code == null}">
                                      <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                      <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_int_id}): ${RallyHost}" var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                          <gel:out/>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="WARN">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                    <core:if test="${response_code != null}">
                                      <core:if test="${(response_code != 200)}">
                                        <core:set value="ERROR on PATCH. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="WARN">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <core:if test="${httpInputStream == null}">
                                        <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="WARN">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <!-- OR -->
                                      <core:if test="${httpInputStream != null}">
                                        <core:new className="java.io.InputStreamReader" var="v_Input">
                                          <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                        </core:new>
                                        <core:new className="java.io.BufferedReader" var="v_InputData">
                                          <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                        </core:new>
                                        <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                        <core:if test="${bDebugREST}">
                                          <gel:out>httpData: ${httpData}</gel:out>
                                        </core:if>
                                        <!-- free up some resources -->
                                        <core:set value="${httpInputStream.close()}" var="dummy"/>
                                        <!-- JSON Response -->
                                        <core:new className="org.json.JSONObject" var="jsonResp">
                                          <core:arg type="java.lang.String" value="${httpData}"/>
                                        </core:new>
                                      </core:if>
                                      <!-- (httpInputStream != null) -->
                                    </core:if>
                                    <!-- (response_code != null) -->
                                    <core:if test="${response_code == 200}">
                                      <!-- Successful Update -->
                                      <core:set value="Update of Integration successful (${v_IntId}.${v_IntCode}): ${v_IntName} " var="logMessage"/>
                                    </core:if>
                                    <core:if test="${jsonResp == null}">
                                      <core:if test="${bDebug}">
                                        <gel:out>jsonResp is null</gel:out>
                                      </core:if>
                                    </core:if>
                                  </core:if>
                                  <!-- !(bSkipRESTUpdate) -->
                                </core:if>
                                <!-- (bIntChangesFound) -->
                              </core:if>
                              <!-- (v_IntId != null) -->
                            </core:if>
                            <!-- ((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup) &amp;&amp; (bResetIntDemoSetup)) || (bSetIntDemoToActive) -->
                          </core:catch>
                          <!-- exvar1 -->
                          <!-- ___ Error Exception processing  ___ -->
                          <core:if test="${not empty exvar1}">
                            <core:set value="EXCEPTION: ${exvar1.getMessage()}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                            <core:if test="${bDebug}">
                              <gel:out>exvar1.toString() ${exvar1.toString()}</gel:out>
                              <gel:out>exvar1.getName() ${exvar1.getName()}</gel:out>
                              <gel:out>ERROR - Exception: ${exvar1}</gel:out>
                              <gel:out/>
                            </core:if>
                            <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                              <core:arg type="java.lang.Throwable" value="${exvar1}"/>
                            </core:new>
                            <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                            <gel:out/>
                          </core:if>
                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                          <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                          <core:new className="java.util.Date" var="dteElapse">
                            <core:arg type="java.lang.Long" value="${elapsedTime}"/>
                          </core:new>
                          <core:set value="Script Elapse: ${sdFmtElapse.format(dteElapse)} sec[${sdFmtElapseNum.format(elapsedTime/1000)}] " var="logMessage"/>
                          <core:choose>
                            <core:when test="${gel_processId == null}">
                              <gel:out>${logMessage}</gel:out>
                            </core:when>
                            <core:otherwise>
                              <gel:log level="INFO">${logMessage}</gel:log>
                            </core:otherwise>
                          </core:choose>
                        </gel:script>
                      </scriptText>
                      <scriptParameter isSecure="false" name="VerboseLogMessages"/>
                      <scriptParameter isSecure="false" name="Use_Rally_Project_Scope"/>
                      <scriptParameter isSecure="false" name="Chk_Int_Demo_Setup"/>
                      <scriptParameter isSecure="false" name="Reset_Int_Demo_Setup"/>
                      <scriptParameter isSecure="false" name="Set_Int_Demo_to_Active"/>
                    </customScript>
                    <Notifications notifyOwner="false">
                      <NotifyWhen stepActionInError="false" stepActionPerformed="false" value="0"/>
                      <Assignees/>
                    </Notifications>
                  </Action>
                </Operations>
                <TransitionRestrictions>
                  <TransitionRestriction>
                    <Join type="BPM_JT_NONE">
                      <Condition sequencNo="1" type="BPM_SCT_PRECONDITION"/>
                    </Join>
                  </TransitionRestriction>
                  <TransitionRestriction>
                    <Split type="BPM_ST_SEQUENCE">
                      <Condition sequencNo="1" type="BPM_SCT_POSTCONDITION">
                        <Transitions>
                          <Transition to="Finish"/>
                        </Transitions>
                      </Condition>
                    </Split>
                  </TransitionRestriction>
                </TransitionRestrictions>
              </Step>
              <Step id="syncEpic" isMileStone="false" sequenceNo="7">
                
                
                
                
                <nls languageCode="en" name="Sync Epic"/>
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                <Notifications notifyOwner="false">
                  <NotifyWhen stepCompleted="false" stepInError="false" stepStarted="false"/>
                  <Assignees/>
                </Notifications>
                <Operations>
                  <Action code="runGEL" synchronized="true" type="BPM_SAT_CUSTOM">
                    
                    
                    
                    
                    <nls languageCode="en" name="Run GEL"/>
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    <customScript languageCode="gel">
                      <scriptText>
                        <gel:script xmlns:core="jelly:core" xmlns:file="jelly:com.niku.union.gel.FileTagLibrary" xmlns:gel="jelly:com.niku.union.gel.GELTagLibrary" xmlns:soap="jelly:com.niku.union.gel.SOAPTagLibrary" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sql="jelly:sql" xmlns:u="jelly:util" xmlns:xog="http://www.niku.com/xog" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                          <!-- Copyright 2021 Broadcom. All Rights Reserved.  -->
                          <!-- Rally-PPM Data Sync, reconnects Solution Engineering Clarity Demo systems with the connected Rally Demo workspace data.
       RallyPPMDataSyncVSM16.gel

      Renames Rally Portfolio Items (Initiatives/Features) to match the Clarity demo data
      Reconnects the connected Clarity Projects and Tasks to the current Rally workspace objects
        Clarity Projects/Tasks get Formated IDs (agl_id) and ObjectIDs/UUIDs (agl_ext_id) updates

    08/10/2022 - Matt Schulze - Fixed multiple workspaces not working (RallyPPMDataSyncVSM16.gel)
    07/27/2022 - Matt Schulze - OKR types and data added (RallyPPMDataSyncVSM15.gel)
    01/13/2022 - Matt Schulze - Autoconnect bool cleanup (RallyPPMDataSyncVSM13.gel)
    01/12/2022 - Matt Schulze - E2E autoconn - Added flag - Chk_Int_Demo_Setup, check bool on Integration for autoconn (RallyPPMDataSyncVSM13.gel)
    01/12/2022 - Matt Schulze - E2E autoconn - Added flag - Set_Int_Demo_to_Active and Reset_Int_Demo_Setup, set or reset flags (RallyPPMDataSyncVSM13.gel)
    01/12/2022 - Matt Schulze - E2E autoconn - Added flag - Use_Rally_Project_Scope, include the Rally Project scope in Rally PI search (RallyPPMDataSyncVSM13.gel)
    12/14/2021 - Matt Schulze - Added Dependencies and WSJF Scores for some Features
    12/03/2021 - Matt Schulze - Added rename of State (kanbanState) for Features
    12/01/2021 - Matt Schulze - Added rename of Portfolio Item Type if needed (Initiative to Epic)
    11/19/2021 - Matt Schulze - Added Theme renames to 16.0.0, sync of Clarity Projects based on Agile Sync not just Synchronize bool
    11/15/2021 - Matt Schulze - 16.0.0 demo dataset changes - VSMforDemos1600 (16.0.0) (RallyPPMDataSyncVSM07.gel)
    08/19/2021 - Matt Schulze - 15.9.3 demo dataset changes - VSMto1593Names (15.9.3) (RallyPPMDataSyncVSM06.gel)
    07/19/2021 - Matt Schulze - Unused for E2E since we only need Roadmap Data Sync (RallyDataSyncRoad05.gel)
    07/15/2021 - Matt Schulze - 15.9.2 E2E demo changes - E2ENames (Justin E2E changes)
    06/14/2021 - Matt Schulze - 15.9.2 VSM demo changes, +Features - VSM1592Names (VSM server from LMM)
    05/29/2021 - Matt Schulze - 15.9.2 demo dataset changes - VSMto1592Names (15.9.2)
    05/25/2021 - Matt Schulze - 15.9.2 VSM changes, copy of RallyPPMDataSync20.gel
    08/04/2020 - Matt Schulze - 15.8.1 DPM Loan App Roadmap renames, with moves
    12/04/2018 - Matt Schulze - sun.misc.BASE64Encoder changed to java.util.Base64 for Java 8+ 
    03/29/2018 - Matt Schulze - Added AC REST API change of # to %23 in Task Name to support # in Story names
    03/27/2018 - Matt Schulze - Changed order of processing to cleanup the AC items first, before reconnecting PPM.
    03/26/2018 - Matt Schulze - Added 15.4 logic to support AC Stories coming over.
    04/12/2017 - Matt Schulze - Added SkipInitPPMtoACProjects parameter. If Yes/True, then it will skip the reset of the PPM-to-AC Projects (agl_ext_id) and Tasks (agl_tsk_ext_id). The reset will allow finding the corresponding AC object by this job, or creating a new AC object by the OOTB Rally Sync job.
    04/05/2017 - Matt Schulze - Added SkipDelACFeatures parameter. If Yes/True, then it will skip cleaning up the extra Features and Initiaives from the AC workspace that are not need for PPM demoing.
    04/04/2017 - Matt Schulze - Added delete of all entries Agile Milestones table and associated lookup. These will get recreated by the Rally Sync job.
    04/28/2016 - Matt Schulze - Updated for v14.4, API and Basic Auth, UUIDs
    04/25/2016 - Matt Schulze - Added bArmstrong144_UUID switch for UUID processing starting with v14.4
    10/26/2015 - Matt Schulze - Initial coding, Clarity reconnect to new Rally workspace


      Integration agl_ctr_prj_pi_type  = Rally PI Type for Project ('Initiative')
      Integration agl_ctr_tsk_pi_type  = Rally PI Type for Task ('Feature')
      Integration agl_create_direction = Rally Sync direction

      Project agl_sync    = 1
      Project agl_system  = Integration ('rally_test')
      Project agl_id      = Initiative ID ('I25')
      Project agl_ext_id  = Initiative Internal ID ('43604161788')

      Task agl_tsk_id     = Feature ID (eg, 'F15')
      Task agl_tsk_ext_id = Feature Internal ID (eg, '45864337812' or 'd1e56399-53d6-4855-9ec9-f654adbb2902')

    Processing parameters - Optional
      SkipDelACFeatures       = if true, then it will skip removing the AC Features and Initiaive that we do not need for PPM demoing.
      SkipPPMtoACTaskCleanup  = if true, then it will skip cleaning up the PPM AC Task data associated with the demo PPM-to-AC Projects
      SkipInitPPMtoACProjects = if true, then it will skip Initialize of the PPM-to-AC Projects (agl_ext_id) and Tasks (agl_tsk_ext_id). 
                                The reset will allow finding the corresponding AC object by this job, or creating a new AC object by the OOTB Rally Sync job.
                                Will also skip removing the PPM Time Tracking Sub-Tasks associated with the PPM-to-AC demo Projects

    Testing / Debugging variables
      v_nikuDB            = niku database id from properties.xml file for testing when running GEL from command line
      bSkipUpdate         = if true, then run through everything but do not update PPM.
      bArmstrong144_UUID  = if true, use UUIDs instead of ObjectID to populate PPM _ext_id fields (Project and Task)
      v_Force144          = if true, will assume a v14.4+ PPM instance. Used for testing when running from an older system to a v14.4 system (i.e. from Matt's testing laptop). This is to use UUIDs vs ObjectIDs
      v_Force152          = if true, will assume a v15.2+ PPM instance. Used for testing when running from an older system to a v15.2 system (i.e. from Matt's testing laptop). Setting v_Force152 to true will also set v_Force144 to true.  Added 15.2 logic to handle the new 15.2 PPM-to-AC directional parameter and other new fields.
      v_Force153          = if true, will assume a v15.3+ PPM instance. Used for testing when running from an older system to a v15.3 system (i.e. from Matt's testing laptop). Setting v_Force153 to true will also set v_Force144 and v_Force152 to true.  Added 15.3 logic to cleanup PPM-to-AC Time Tracking SubTask.
      v_Force154          = if true, will assume a v15.4+ PPM instance. Used for testing when running from an older system to a v15.4 system (i.e. from Matt's testing laptop). Setting v_Force154 to true will also set v_Force144, v_Force152 and v_Force153 to true.  Added 15.4 logic to support AC Stories coming over.

    Rally URLs come from the Integration object selected for each Project
    -->
                          <!-- Debug Flags, which get disabled when running in a PPM process -->
                          <core:set value="true" var="bDebug"/>
                          <core:set value="Xtrue" var="bDebugTimings"/>
                          <core:set value="true" var="bDebugREST"/>
                          <core:set value="true" var="bDebugJSON"/>
                          <core:set value="true" var="bDebugVerbose"/>
                          <core:set value="true" var="bDebugVerLog"/>
                          <core:if test="${gel_processId != null}">
                            <core:set value="Xtrue" var="bDebug"/>
                            <core:set value="Xtrue" var="bDebugTimings"/>
                            <core:set value="Xtrue" var="bDebugREST"/>
                            <core:set value="Xtrue" var="bDebugJSON"/>
                            <core:set value="Xtrue" var="bDebugVerbose"/>
                            <core:set value="Xtrue" var="bDebugVerLog"/>
                          </core:if>
                          <core:set value="Xtrue" var="bSkipUpdate"/>
                          <!-- skip sql:update calls on Tasks -->
                          <core:set value="Xtrue" var="bDebug502"/>
                          <core:set value="Xtrue" var="bArmstrong144_UUID"/>
                          <core:set value="Xtrue" var="bSkipWorkspace"/>
                          <core:set value="Xtrue" var="bSkip_DelMissingUsers"/>
                          <core:set value="Xtrue" var="bSkip_DelMilestones"/>
                          <core:set value="Xtrue" var="bSkipRESTDelete"/>
                          <core:set value="Xtrue" var="bSkipRESTMove"/>
                          <core:set value="Xtrue" var="bSkipRESTRename"/>
                          <core:set value="false" var="bSkipSyncPPMProjects"/>
                          <!-- Script timing variables -->
                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart"/>
                          <core:new className="java.util.Date" var="dteElapse"/>
                          <core:new className="java.text.SimpleDateFormat" var="sdFmtElapse">
                            <core:arg type="java.lang.String" value="HH:mm:ss.hhh"/>
                          </core:new>
                          <core:new className="java.text.DecimalFormat" var="sdFmtElapseNum">
                            <core:arg type="java.lang.String" value="0.000"/>
                          </core:new>
                          <core:invokeStatic className="java.lang.Runtime" method="getRuntime" var="myRuntime"/>
                          <core:invokeStatic className="java.util.TimeZone" method="getTimeZone" var="tzGMT">
                            <core:arg type="java.lang.String" value="GMT"/>
                          </core:invokeStatic>
                          <core:set value="${sdFmtElapse.setTimeZone(tzGMT)}" var="dummy"/>
                          <!-- we need to set GMT, otherwise timings add the GMT hr offset of 18 hrs -->
                          <gel:formatDate format="yyyy-MM-dd HH:MM:S" stringVar="today"/>
                          <!-- Use this code snipet for timings within the GEL
  <core:invokeStatic className="java.lang.System"   method="currentTimeMillis" var="milStart_00"/>

  <core:invokeStatic className="java.lang.System"   method="currentTimeMillis" var="milEnd_00"/>
  <core:set var="elapsedTime"   value="${(milEnd_00 - milStart_00)}"/>
  <core:if test="${bDebugTimings}"><gel:out>Script Elapse #00: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out></core:if>
    -->
                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                          <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                          <core:if test="${bDebugTimings}">
                            <gel:out>Script Elapse #11: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                          </core:if>
                          <!-- There has to be an eaiser way, but this is the only way I have found so far to generate an ampersand in a string without typing the actual character in the GEL -->
                          <core:set value="xyz" var="strTemp"/>
                          <!-- start with a java String class -->
                          <core:set value="${strTemp.charAt(0)}" var="chTemp"/>
                          <!-- generate a java Character primitive, the only way I know. -->
                          <core:set value="${chTemp.toChars(38)}" var="chTemp"/>
                          <!-- use the int to Character converstion  -->
                          <core:set value="${chTemp[0].toString()}" var="myAmpr"/>
                          <!-- Finally, get a Sting variable that contains just the ampersand -->
                          <core:if test="${bDebug}">
                            <gel:out>myAmpr[${myAmpr}]</gel:out>
                          </core:if>
                          <!-- same thing with the % 20 characters for the space -->
                          <core:set value="%" var="myBlnk"/>
                          <core:set value="${myBlnk}20" var="myBlnk"/>
                          <core:set value="1000" var="sleepOKRms"/>
                          <!-- Basic Rally Variables -->
                          <core:set value="/slm/webservice/v2.0" var="RallyUrlPath"/>
                          <!-- becomes: ${RallyHost}${RallyUrlPath}  -->
                          <!-- Basic PPM Variables -->
                          <!--
  <gel:parameter var="v_nikuDB"       default="Niku"/>
    -->
                          <core:set value="/ppm/rest/v1" var="PPMUrlPath"/>
                          <!-- becomes: ${XOGURL}${PPMUrlPath}  -->
                          <!-- CA PPM XOG URL Settings -->
                          <core:invokeStatic className="com.niku.union.config.ConfigurationManager" method="getInstance" var="config"/>
                          <core:set value="${config.getProperties().getWebServer().getWebServerInstance(0).getId()}" var="WebServerid"/>
                          <core:if test="${WebServerid == 'app'}">
                            <core:set value="${config.getProperties().getWebServer().getWebServerInstance(0).getEntryUrl()}" var="EntryURL"/>
                          </core:if>
                          <core:if test="${XOGURL == null || XOGURL.length() == 0}">
                            <core:set value="${EntryURL}" var="XOGURL"/>
                          </core:if>
                          <core:set value="XOGURL: ${XOGURL}" var="logMessage"/>
                          <core:choose>
                            <core:when test="${gel_processId == null}">
                              <gel:out>${logMessage}</gel:out>
                            </core:when>
                            <core:otherwise>
                              <gel:log level="INFO">${logMessage}</gel:log>
                            </core:otherwise>
                          </core:choose>
                          <!-- use nsa URL since it will not have SSL (https) setup
  <core:if test="${WebServerid == 'nsa'}">
    <core:set var="EntryURL" value="${config.getProperties().getWebServer().getWebServerInstance(0).getEntryUrl()}"/>
  </core:if>
  <core:set var="logMessage" value="XOGURL: ${XOGURL}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>
    -->
                          <!--Get sessionID by Username-->
                          <!-- <gel:parameter default="admin" var="ClarityUser"/> -->
                          <core:set value="admin" var="ClarityUser"/>
                          <core:new className="com.niku.union.security.DefaultSecurityIdentifier" var="secId"/>
                          <core:invokeStatic className="com.niku.union.security.UserSessionControllerFactory" method="getInstance" var="userSessionCtrl"/>
                          <core:set value="${userSessionCtrl.init(ClarityUser,secId)}" var="secId"/>
                          <core:set value="${secId.getSessionId()}" var="sessionID"/>
                          <core:set value="authToken" var="h_authToken"/>
                          <core:set value="${sessionID}" var="v_authToken"/>
                          <!-- If a password was supplied, we could use it here -->
                          <core:set value="" var="v_PPMencoded"/>
                          <core:if test="${(ClarityPwd != null)}">
                            <core:set value="${ClarityUser}:${ClarityPwd}" var="credentials"/>
                            <core:invokeStatic className="com.niku.union.utility.Base64" method="encode" var="v_PPMencoded">
                              <core:arg type="java.lang.String" value="${credentials}"/>
                            </core:invokeStatic>
                            <core:set value="Authorization" var="h_authToken"/>
                            <core:set value="Basic ${v_PPMencoded}" var="v_authToken"/>
                            <core:set value="Using supplied credentials for user: ${ClarityUser}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                            <core:if test="${bDebug}">
                              <gel:out>PPMencodedCredentials: ${v_PPMencoded}</gel:out>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="ClarityUser: ${ClarityUser}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="sessionID: ${sessionID}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="v_PPMencoded: ${v_PPMencoded}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebugSec}">
                            <core:set value="using... ${h_authToken}: ${v_authToken}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- Specific PPM Project Values -->
                          <!-- Project Internal Id, default for debugging. Commented out since we do not really need to set it blank as default.
  <gel:parameter var="v_PPMProjIntId" default="" />       
    -->
                          <!-- We will assume a v14.4+ PPM instance. Used for testing when running from a v14.3 system to a v14.4+ system (i.e. from Matt's laptop) -->
                          <core:set value="NOTtrue" var="bForce144"/>
                          <core:if test="${(v_Force144 != null)}">
                            <!-- AND -->
                            <core:if test="${(v_Force144.equalsIgnoreCase('true')) || (v_Force144.equalsIgnoreCase('yes'))}">
                              <core:set value="true" var="bForce144"/>
                            </core:if>
                          </core:if>
                          <!-- Specific if we should assume we are running against a 14.4 server, even though our library is not -->
                          <core:set value="NOTtrue" var="bForce152"/>
                          <core:if test="${(v_Force152 != null)}">
                            <!-- AND -->
                            <core:if test="${(v_Force152.equalsIgnoreCase('true')) || (v_Force152.equalsIgnoreCase('yes'))}">
                              <!-- set both, since if we are 15.2, then we are also at least 14.4 -->
                              <core:set value="true" var="bForce144"/>
                              <core:set value="true" var="bForce152"/>
                            </core:if>
                          </core:if>
                          <!-- Specific if we should assume we are running against a 14.4 server, even though our library is not -->
                          <core:set value="NOTtrue" var="bForce153"/>
                          <core:if test="${(v_Force153 != null)}">
                            <!-- AND -->
                            <core:if test="${(v_Force153.equalsIgnoreCase('true')) || (v_Force153.equalsIgnoreCase('yes'))}">
                              <!-- set both, since if we are 15.3, then we are also at least 14.4 -->
                              <core:set value="true" var="bForce144"/>
                              <core:set value="true" var="bForce152"/>
                              <core:set value="true" var="bForce153"/>
                            </core:if>
                          </core:if>
                          <!-- Specific if we should assume we are running against a 14.4 server, even though our library is not -->
                          <core:set value="NOTtrue" var="bForce154"/>
                          <core:if test="${(v_Force154 != null)}">
                            <!-- AND -->
                            <core:if test="${(v_Force154.equalsIgnoreCase('true')) || (v_Force154.equalsIgnoreCase('yes'))}">
                              <!-- set both, since if we are 15.4, then we are also at least 14.4 -->
                              <core:set value="true" var="bForce144"/>
                              <core:set value="true" var="bForce152"/>
                              <core:set value="true" var="bForce153"/>
                              <core:set value="true" var="bForce154"/>
                            </core:if>
                          </core:if>
                          <!-- Specify if we should Initialize the PPM-to-AC Projects (agl_ext_id) and Tasks (agl_tsk_ext_id) as prep for OOTB Rally Sync job to create new Initiatives/Features. -->
                          <core:set value="true" var="bSkipInitPPMtoACProjects"/>
                          <!-- default to true, which means we will NOT initialize PPM-to-AC Projects -->
                          <!-- <gel:parameter default="" var="SkipInitPPMtoACProjects"/> -->
                          <core:if test="${(SkipInitPPMtoACProjects != null)}">
                            <!-- AND -->
                            <core:if test="${(SkipInitPPMtoACProjects.equalsIgnoreCase('true')) || (SkipInitPPMtoACProjects.equalsIgnoreCase('yes'))}">
                              <core:set value="true" var="bSkipInitPPMtoACProjects"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bSkipInitPPMtoACProjects(${bSkipInitPPMtoACProjects})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- Specify if we should skip the cleanup of demo data in the PPM-to-AC Tasks as prep for OOTB Rally Sync job -->
                          <core:set value="true" var="bSkipPPMtoACTaskCleanup"/>
                          <!-- default to true, which means we will NOT cleanup the PPM-to-AC Tasks -->
                          <!-- <gel:parameter default="" var="SkipPPMtoACTaskCleanup"/> -->
                          <core:if test="${(SkipPPMtoACTaskCleanup != null)}">
                            <!-- AND -->
                            <core:if test="${(SkipPPMtoACTaskCleanup.equalsIgnoreCase('true')) || (SkipPPMtoACTaskCleanup.equalsIgnoreCase('yes'))}">
                              <core:set value="true" var="bSkipPPMtoACTaskCleanup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bSkipPPMtoACTaskCleanup(${bSkipPPMtoACTaskCleanup})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- Specify if we should skip the delete of the unused Agile Central demo Features and Initiatives from the AC workspace -->
                          <core:set value="true" var="bSkipDelACFeatures"/>
                          <!-- default to true, which means we will NOT delete/cleanup the AC Features and Initiatives -->
                          <!-- <gel:parameter default="" var="SkipDelACFeatures"/> -->
                          <core:if test="${(SkipDelACFeatures != null)}">
                            <!-- AND -->
                            <core:if test="${(SkipDelACFeatures.equalsIgnoreCase('false')) || (SkipDelACFeatures.equalsIgnoreCase('no'))}">
                              <core:set value="false" var="bSkipDelACFeatures"/>
                            </core:if>
                            <core:if test="${(SkipDelACFeatures.equalsIgnoreCase('true')) || (SkipDelACFeatures.equalsIgnoreCase('yes'))}">
                              <core:set value="true" var="bSkipDelACFeatures"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bSkipDelACFeatures(${bSkipDelACFeatures})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- Specify if we should skip the renaming of Rally demo Features and Initiatives from the Rally workspace to match the Clarity demo data -->
                          <core:set value="false" var="bSkipRenameACFeatures"/>
                          <!-- default to false, which means we WILL rename Rally Features and Initiatives/Epics -->
                          <gel:parameter default="" var="SkipRenameACFeatures"/>
                          <core:if test="${(SkipRenameACFeatures != null)}">
                            <!-- AND -->
                            <core:if test="${(SkipRenameACFeatures.equalsIgnoreCase('false')) || (SkipRenameACFeatures.equalsIgnoreCase('no'))}">
                              <core:set value="false" var="bSkipRenameACFeatures"/>
                            </core:if>
                            <core:if test="${(SkipRenameACFeatures.equalsIgnoreCase('true')) || (SkipRenameACFeatures.equalsIgnoreCase('yes'))}">
                              <core:set value="true" var="bSkipRenameACFeatures"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bSkipRenameACFeatures(${bSkipRenameACFeatures})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify to use the Rally Project from the Integrations object when searching for the Rally PIs  ___ -->
                          <gel:parameter default="" var="Use_Rally_Project_Scope"/>
                          <core:set value="false" var="bUseRallyProjectScope"/>
                          <!-- default -->
                          <core:if test="${(Use_Rally_Project_Scope != null)}">
                            <!-- AND -->
                            <core:if test="${(Use_Rally_Project_Scope.equalsIgnoreCase('No') || Use_Rally_Project_Scope.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bUseRallyProjectScope"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Use_Rally_Project_Scope != null)}">
                            <!-- AND -->
                            <core:if test="${(Use_Rally_Project_Scope.equalsIgnoreCase('Yes') || Use_Rally_Project_Scope.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bUseRallyProjectScope"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="bUseRallyProjectScope: ${bUseRallyProjectScope}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify if we need to check the Integration Demo Setup flag for this script run  ___ -->
                          <gel:parameter default="" var="Chk_Int_Demo_Setup"/>
                          <core:set value="false" var="bChkIntDemoSetup"/>
                          <!-- default  -->
                          <core:if test="${(Chk_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Chk_Int_Demo_Setup.equalsIgnoreCase('No') || Chk_Int_Demo_Setup.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bChkIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Chk_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Chk_Int_Demo_Setup.equalsIgnoreCase('Yes') || Chk_Int_Demo_Setup.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bChkIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Check Integration Demo Setup flag: ${bChkIntDemoSetup}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify if we should reset the Integration Demo Setup flag at the end of this script (dependent on Chk_Int_Demo_Setup true)  ___ -->
                          <gel:parameter default="" var="Reset_Int_Demo_Setup"/>
                          <core:set value="false" var="bResetIntDemoSetup"/>
                          <!-- default -->
                          <core:if test="${(Reset_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Reset_Int_Demo_Setup.equalsIgnoreCase('No') || Reset_Int_Demo_Setup.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bResetIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Reset_Int_Demo_Setup != null)}">
                            <!-- AND -->
                            <core:if test="${(Reset_Int_Demo_Setup.equalsIgnoreCase('Yes') || Reset_Int_Demo_Setup.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bResetIntDemoSetup"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Reset the Integration Demo Setup flag: ${bResetIntDemoSetup}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify to set the Integrations object to Active  ___ -->
                          <gel:parameter default="" var="Set_Int_Demo_to_Active"/>
                          <core:set value="false" var="bSetIntDemoToActive"/>
                          <!-- default -->
                          <core:if test="${(Set_Int_Demo_to_Active != null)}">
                            <!-- AND -->
                            <core:if test="${(Set_Int_Demo_to_Active.equalsIgnoreCase('No') || Set_Int_Demo_to_Active.equalsIgnoreCase('false'))}">
                              <core:set value="false" var="bSetIntDemoToActive"/>
                            </core:if>
                          </core:if>
                          <core:if test="${(Set_Int_Demo_to_Active != null)}">
                            <!-- AND -->
                            <core:if test="${(Set_Int_Demo_to_Active.equalsIgnoreCase('Yes') || Set_Int_Demo_to_Active.equalsIgnoreCase('true'))}">
                              <core:set value="true" var="bSetIntDemoToActive"/>
                            </core:if>
                          </core:if>
                          <core:if test="${bDebugVerLog}">
                            <core:set value="Set Integration to Active flag: ${bSetIntDemoToActive}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <!-- ___ Specify which demo dataset we are using, for field names  ___ -->
                          <gel:parameter default="VSMforDemos1603" var="DemoDataset"/>
                          <core:set value="false" var="bUseE2ENames"/>
                          <core:set value="false" var="bUseVSMforDemos1603"/>
                          <core:set value="false" var="bUseVSMforDemos1602"/>
                          <core:set value="false" var="bUseVSMforDemos1601"/>
                          <core:set value="false" var="bUseVSMforDemos1600"/>
                          <core:set value="false" var="bUseVSMforDemos1593"/>
                          <core:set value="false" var="bUseVSMforDemosNames"/>
                          <core:set value="false" var="bUseVSM1592Names"/>
                          <core:set value="false" var="bUseVSM1592NameReset"/>
                          <core:set value="false" var="bUseNewDPMFeatureNames"/>
                          <core:set value="false" var="bUseKlean1591Names"/>
                          <core:set value="false" var="bUseKlean1591NameReset"/>
                          <core:set value="false" var="bUseKlean1581Names"/>
                          <core:set value="false" var="bUseKlean1581NameReset"/>
                          <core:if test="${(DemoDataset != null)}">
                            <core:choose>
                              <core:when test="${DemoDataset.equalsIgnoreCase('E2ENames')}">
                                <!-- No Rally PI or Project renaming, No Clarity Project renames/deletes/cleanup, no cleanup of Missing Users or Milestones table, Just reconnecting Projects and Tasks  -->
                                <core:set value="true" var="bUseE2ENames"/>
                                <core:set value="true" var="bSkip_DelMissingUsers"/>
                                <core:set value="true" var="bSkip_DelMilestones"/>
                                <core:set value="true" var="bSkipInitPPMtoACProjects"/>
                                <core:set value="true" var="bSkipSyncPPMProjects"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('VSMforDemos1603')}">
                                <!-- Rally renaming based on general dataset 16.0.1 demos, which now includes the VSM demo data  -->
                                <core:set value="true" var="bUseVSMforDemos1603"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('VSMforDemos1602')}">
                                <!-- Rally renaming based on general dataset 16.0.1 demos, which now includes the VSM demo data  -->
                                <core:set value="true" var="bUseVSMforDemos1600"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('VSMforDemos1601')}">
                                <!-- Rally renaming based on general dataset 16.0.1 demos, which now includes the VSM demo data  -->
                                <core:set value="true" var="bUseVSMforDemos1600"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('VSMforDemos1600')}">
                                <!-- Rally renaming based on general dataset 16.0.0 demos, which now includes the VSM demo data  -->
                                <core:set value="true" var="bUseVSMforDemos1600"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('VSMto1593Names')}">
                                <!-- Rally renaming based on general dataset 15.9.3 demos, even though it has VSM in the name  -->
                                <core:set value="true" var="bUseVSMforDemos1593"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('VSMto1592Names')}">
                                <!-- Rally renaming based on VSM dataset copied for general 15.9.2 demos (keeps Minimal Online?)  -->
                                <core:set value="true" var="bUseVSMforDemosNames"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('VSM1592Names')}">
                                <!-- Rally renaming based on LMM's VSM Epic names for VSM Summit  -->
                                <core:set value="true" var="bUseVSM1592Names"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('VSM1592NameReset')}">
                                <!-- Rally renaming based on LMM's VSM Epic names - Reset back to standard  -->
                                <core:set value="false" var="bUseVSM1592Names"/>
                                <core:set value="true" var="bUseVSM1592NameReset"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('NewDPMFeatureNames')}">
                                <!-- Rally renaming based on Kurt and Brians New DPM Initiative and Feature names  -->
                                <core:set value="true" var="bUseNewDPMFeatureNames"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('Klean')}">
                                <core:set value="true" var="bUseKlean1591Names"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('Klean1591Names')}">
                                <!-- Rally renaming based on 15.9.1 Roadmap-Rally integration   -->
                                <core:set value="true" var="bUseKlean1591Names"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('Klean1591NameReset')}">
                                <core:set value="false" var="bUseKlean1591Names"/>
                                <core:set value="true" var="bUseKlean1591NameReset"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('Klean1581Names')}">
                                <!-- Rally renaming based on 15.8.1 Roadmap-Rally integration   -->
                                <core:set value="true" var="bUseKlean1581Names"/>
                              </core:when>
                              <core:when test="${DemoDataset.equalsIgnoreCase('Klean1581NameReset')}">
                                <core:set value="false" var="bUseKlean1581Names"/>
                                <core:set value="true" var="bUseKlean1581NameReset"/>
                              </core:when>
                              <core:otherwise>
                                <!-- default to nothing -->
                                <!-- <core:set var="bUseKlean1591Names"      value="true" /> -->
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:set value="DemoDataset(${DemoDataset}) " var="logMessage"/>
                          <core:choose>
                            <core:when test="${gel_processId == null}">
                              <gel:out>${logMessage}</gel:out>
                            </core:when>
                            <core:otherwise>
                              <gel:log level="INFO">${logMessage}</gel:log>
                            </core:otherwise>
                          </core:choose>
                          <core:if test="${bDebug}">
                            <core:set value="bUseE2ENames(${bUseE2ENames})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseVSMforDemos1603(${bUseVSMforDemos1603})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseVSMforDemos1602(${bUseVSMforDemos1602})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseVSMforDemos1601(${bUseVSMforDemos1601})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseVSMforDemos1600(${bUseVSMforDemos1600})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseVSMforDemos1593(${bUseVSMforDemos1593})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseVSMforDemosNames(${bUseVSMforDemosNames})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseVSM1592Names(${bUseVSM1592Names})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseVSM1592NameReset(${bUseVSM1592NameReset})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseNewDPMFeatureNames(${bUseNewDPMFeatureNames})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseKlean1591Names(${bUseKlean1591Names})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseKlean1591NameReset(${bUseKlean1591NameReset})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseKlean1581Names(${bUseKlean1581Names})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="bUseKlean1581NameReset(${bUseKlean1581NameReset})" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:new className="java.text.SimpleDateFormat" var="sdFmtDteTme">
                            <core:arg type="java.lang.String" value="yyyy-MM-dd'T'HH:mm:ss"/>
                          </core:new>
                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                          <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                          <core:if test="${bDebugTimings}">
                            <gel:out>Script Elapse #12: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                          </core:if>
                          <!-- ___ PPM Project Int ID from the associated Object Id or use the default for debugging  ___ -->
                          <core:choose>
                            <core:when test="${gel_objectInstanceId == null}">
                              <!-- only add the specific Project Id if one was given -->
                              <core:if test="${(v_PPMProjIntId != null)}">
                                <!-- AND -->
                                <core:if test="${(v_PPMProjIntId.length() &gt; 0)}">
                                  <core:set value="${v_PPMProjIntId}" var="v_PrjProjId"/>
                                  <core:set value="Setting PPM Project Int Id to ${v_PrjProjId}..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                              </core:if>
                            </core:when>
                            <core:otherwise>
                              <core:set value="${gel_objectInstanceId}" var="v_PrjProjId"/>
                            </core:otherwise>
                          </core:choose>
                          <!-- v14.4 New Security testing -->
                          <core:set value="Xtrue" var="bDebugSec"/>
                          <core:invokeStatic className="com.niku.union.config.ConfigurationManager" method="getInstance" var="config"/>
                          <core:set value="${config.getVersionNumber()}" var="ppm_version"/>
                          <core:set value="${ppm_version.substring(0,4)}" var="ppm_ver_major"/>
                          <core:set value="${ppm_ver_major+0}" var="ppm_ver"/>
                          <!-- convert to a numeric data type (Double) -->
                          <core:if test="${bDebug || bDebugSec}">
                            <core:set value="PPM Version: ${ppm_version} major[${ppm_ver_major}]" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log>${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:if test="${bDebug}">
                            <core:set value="PPM Version found: ppm_version(${ppm_version}) ppm_ver_major(${ppm_ver_major})  ppm_ver_major.getClass[${ppm_ver_major.getClass()}]  ppm_ver(${ppm_ver}) ppm_ver.getClass[${ppm_ver.getClass()}]" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                                <gel:out/>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                          </core:if>
                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_04"/>
                          <!-- This is outbound Apache HttpClient class for the REST calls to Clarity -->
                          <core:invokeStatic className="org.apache.http.impl.client.HttpClients" method="createDefault" var="client"/>
                          <core:catch var="exvar1">
                            <core:set value="false" var="bRunDemoSetup"/>
                            <core:if test="${bChkIntDemoSetup}">
                              <!-- ________________________ -->
                              <!-- ___ Get the Integrations for one with Run Data Sync checked   ___ -->
                              <core:set var="httpRESTURL">${XOGURL}${PPMUrlPath}/integrations</core:set>
                              <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                              </core:new>
                              <core:set value="${httpURI.setParameter('fields', 'name,code,isActive')}" var="void"/>
                              <core:set value="${httpURI.setParameter('limit', '200')}" var="void"/>
                              <core:set value="${httpURI.setParameter('filter', '(z_runDataSync = true)')}" var="void"/>
                              <core:new className="org.apache.http.client.methods.HttpGet" var="httpget">
                                <core:arg type="java.net.URI" value="${httpURI.build()}"/>
                              </core:new>
                              <core:if test="${bDebugREST}">
                                <gel:out>httpget.getURI():  ${httpget.getURI()}</gel:out>
                              </core:if>
                              <core:expr value="${httpget.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                              <core:expr value="${httpget.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                              <core:expr value="${httpget.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                              <core:expr value="${httpget.setHeader(h_authToken, v_authToken)}"/>
                              <!-- Should be just client.execute(httpget), but we need to identify the httpget class by specifying it using the core:arg parameter -->
                              <core:invoke method="execute" on="${client}" var="response">
                                <core:arg type="org.apache.http.client.methods.HttpGet" value="${httpget}"/>
                              </core:invoke>
                              <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                              <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                              <!-- this is usually empty, pointless -->
                              <core:if test="${bDebugREST}">
                                <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                              </core:if>
                              <core:set value="${null}" var="httpInputStream"/>
                              <core:set value="${response.getEntity()}" var="entity"/>
                              <core:if test="${entity != null}">
                                <core:set value="${entity.getContent()}" var="httpInputStream"/>
                              </core:if>
                              <core:if test="${response_code != null}">
                                <core:if test="${(response_code != 200)}">
                                  <core:set value="ERROR on REST. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="WARN">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <core:if test="${httpInputStream == null}">
                                  <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="WARN">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <!-- OR -->
                                <core:if test="${httpInputStream != null}">
                                  <core:new className="java.io.InputStreamReader" var="v_Input">
                                    <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                  </core:new>
                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                  </core:new>
                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                  <core:if test="${bDebugREST}">
                                    <gel:out>httpData: ${httpData}</gel:out>
                                  </core:if>
                                  <!-- free up some resources -->
                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                  <core:if test="${(response_code == 200) }">
                                    <core:if test="${bDebug}">
                                      <core:set value="Getting list of Integrations..." var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                  </core:if>
                                  <!-- (response_code == 200) -->
                                  <!-- JSON Response -->
                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                  </core:new>
                                </core:if>
                                <!-- (httpInputStream != null) -->
                              </core:if>
                              <!-- (response_code != null) -->
                              <core:if test="${jsonResp == null}">
                                <core:if test="${bDebug}">
                                  <gel:out>jsonResp is null</gel:out>
                                </core:if>
                              </core:if>
                              <core:set value="" var="v_IntId"/>
                              <core:set value="" var="v_IntIdInt"/>
                              <core:set value="" var="v_IntCode"/>
                              <core:set value="" var="v_IntName"/>
                              <core:if test="${jsonResp != null}">
                                <core:set value="${jsonResp.get('_recordsReturned')}" var="v_recordsReturned"/>
                                <core:if test="${bDebug}">
                                  <gel:out trim="false">v_recordsReturned[${v_recordsReturned}]</gel:out>
                                </core:if>
                                <core:if test="${(v_recordsReturned &gt; 0)}">
                                  <core:set value="Integration Found with Run Data Sync checked" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:set value="true" var="bRunDemoSetup"/>
                                  <!-- Results, in a single entry array  -->
                                  <core:set value="${jsonResp.getJSONArray('_results')}" var="jarrRArray"/>
                                  <core:if test="${jarrRArray == null}">
                                    <core:if test="${bDebug}">
                                      <core:if test="${bDebug}">
                                        <gel:out>jarrRArray is null</gel:out>
                                      </core:if>
                                    </core:if>
                                  </core:if>
                                  <core:if test="${jarrRArray != null}">
                                    <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                    <core:if test="${bDebug}">
                                      <gel:out>Integration # Results: ${len_jarrRArray}</gel:out>
                                    </core:if>
                                    <core:set value="0" var="i_jarrRArray"/>
                                    <!-- this is a String -->
                                    <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                    <!-- convert to numeric, but the default is a long -->
                                    <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                    <!-- convert the long to an int, which we need for the json calls to work -->
                                    <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                      <!-- Get the JSON Object from the Array -->
                                      <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                      <core:if test="${bDebugJSON}">
                                        <gel:out>jsonRArray:</gel:out>
                                        <gel:out>${jsonRArray.toString(1)}</gel:out>
                                      </core:if>
                                      <!-- we add wrapper spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                      <core:set value=" ${jsonRArray.get('_internalId')} " var="im_Id"/>
                                      <core:set value="${im_Id.trim()}" var="im_Id"/>
                                      <core:set value="${jsonRArray.get('_internalId')}" var="im_IdInt"/>
                                      <core:set value="${jsonRArray.getString('name')}" var="im_Name"/>
                                      <core:set value="${jsonRArray.getString('code')}" var="im_Code"/>
                                      <core:set value="${jsonRArray.get('isActive')}" var="im_isActive"/>
                                      <core:if test="${bDebugVerLog}">
                                        <gel:out trim="false">Found Integration: Id.Code[${im_Id}.${im_Code}] Name[${im_Name}] isActive[${im_isActive}]</gel:out>
                                      </core:if>
                                      <core:if test="${bDebugVerLog}">
                                        <gel:out trim="false"/>
                                      </core:if>
                                      <!-- Save the Integration object name for later use -->
                                      <core:set value="${im_Id}" var="v_IntId"/>
                                      <core:set value="${im_IdInt}" var="v_IntIdInt"/>
                                      <core:set value="${im_Code}" var="v_IntCode"/>
                                      <core:set value="${im_Name}" var="v_IntName"/>
                                      <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                      <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                      <!-- convert the long back to an int, which we need for the json calls -->
                                    </core:while>
                                    <!-- i_jarrRArray < len_jarrRArray -->
                                    <core:if test="${bDebug}">
                                      <gel:out/>
                                    </core:if>
                                  </core:if>
                                </core:if>
                                <!-- (v_recordsReturned > 0) -->
                                <core:if test="${(v_recordsReturned == 0)}">
                                  <core:set value="No Integrations with Run Data Sync Found" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <!-- (v_recordsReturned == 0) -->
                              </core:if>
                              <!-- jsonResp != null -->
                            </core:if>
                            <!-- bChkIntDemoSetup -->
                            <core:if test="${(!(bChkIntDemoSetup)) || ((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup))}">
                              <!-- DB Debug Settings -->
                              <core:choose>
                                <core:when test="${gel_processId == null}">
                                  <core:set value="Setting datasource to ${v_nikuDB}..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                      <gel:out/>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <gel:setDataSource dbId="${v_nikuDB}"/>
                                </core:when>
                                <core:otherwise>
                                  <!-- default to niku for out demos -->
                                  <gel:setDataSource dbId="niku"/>
                                  <!-- override default if we were given a specific value -->
                                  <core:if test="${(v_nikuDB != null)}">
                                    <!-- AND -->
                                    <core:if test="${(v_nikuDB.length() &gt; 0)}">
                                      <gel:setDataSource dbId="${v_nikuDB}"/>
                                    </core:if>
                                  </core:if>
                                </core:otherwise>
                              </core:choose>
                              <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_04"/>
                              <core:set value="${(milEnd_04 - milStart_04)}" var="elapsedTime"/>
                              <core:if test="${bDebugTimings}">
                                <gel:out>Elapse DataSource Connect: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                              </core:if>
                              <core:new className="java.util.HashMap" var="mapRRCodeName"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeURL"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeAuthType"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeIsActive"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeKey"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeEnc"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeUser"/>
                              <core:new className="java.util.HashMap" var="mapRRCodePass"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeWrk"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeWrkID"/>
                              <core:new className="java.util.HashMap" var="mapRRCodePrjPI"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeTskPI"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeDefOwn"/>
                              <core:new className="java.util.HashMap" var="mapRRCodeDefPrj"/>
                              <!-- ________________ -->
                              <!-- ___ Get the Remote API settings for Rally ___ -->
                              <core:if test="${ ((ppm_ver gt 14.3) || bForce144) }">
                                <!-- SQL for v14.4+ -->
                                <core:if test="${bDebug}">
                                  <gel:out>SQL: ((ppm_ver gt 14.3) || bForce144)</gel:out>
                                </core:if>
                                <sql:query var="v_invRemoteRally">
          SELECT int.code, int.name, int.endpoint_url, int.api_key, int.auth_type, int.user_name, int.password, int.is_active, int.integration_instance agl_workspace, 
                 oint.agl_ctr_prj_pi_type, oint.agl_ctr_tsk_pi_type, oint.agl_tsk_sync
           FROM nmc_integrations int, odf_ca_integration oint
          WHERE int.id  = oint.id
            AND int.integration_vendor_code = 'RALLY'
        </sql:query>
                                <core:set value="true" var="bArmstrong144_UUID"/>
                              </core:if>
                              <!-- OR -->
                              <core:if test="${ !((ppm_ver gt 14.3) || bForce144) }">
                                <!-- NOT yet v14.4, use v14.3 SQL -->
                                <core:if test="${bDebug}">
                                  <gel:out>SQL: !((ppm_ver gt 14.3) || bForce144)</gel:out>
                                </core:if>
                                <sql:query var="v_invRemoteRally">
          SELECT int.code, int.name, int.endpoint_url, int.api_key, int.is_active, int.integration_instance agl_workspace, 
                 oint.agl_ctr_prj_pi_type, oint.agl_ctr_tsk_pi_type, oint.agl_tsk_sync
               , oint.agl_ctr_def_own_id, oint.agl_ctr_def_prj_id
           FROM nmc_integrations int, odf_ca_integration oint
          WHERE int.id  = oint.id
            AND int.integration_vendor_code = 'RALLY'
        </sql:query>
                              </core:if>
                              <core:if test="${bDebug}">
                                <gel:out trim="false">Got PPM DB Connection.</gel:out>
                              </core:if>
                              <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                              <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                              <core:if test="${bDebugTimings}">
                                <gel:out>Script Elapse #13: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                              </core:if>
                              <core:set value="${v_invRemoteRally.rows.size()}" var="len_arrRemoteRally"/>
                              <core:if test="${bDebug}">
                                <gel:out>Number of Rally integrations found: ${len_arrRemoteRally}</gel:out>
                              </core:if>
                              <core:forEach indexVar="i" items="${v_invRemoteRally.rows}" var="thisrow">
                                <core:set var="v_RRcode"><![CDATA[${v_invRemoteRally.rows[i].code}]]></core:set>
                                <core:set var="v_RRname"><![CDATA[${v_invRemoteRally.rows[i].name}]]></core:set>
                                <core:set var="v_RRendpoint_url"><![CDATA[${v_invRemoteRally.rows[i].endpoint_url}]]></core:set>
                                <core:set var="v_RRapi_key"><![CDATA[${v_invRemoteRally.rows[i].api_key}]]></core:set>
                                <core:set var="v_RRauth_type">API</core:set>
                                <!-- default for v14.3 (API or BASIC) -->
                                <core:if test="${ ((ppm_ver gt 14.3) || bForce144) }">
                                  <!-- SQL for v14.4+ -->
                                  <core:set var="v_RRauth_type"><![CDATA[${v_invRemoteRally.rows[i].auth_type}]]></core:set>
                                  <core:set var="v_RRuser"><![CDATA[${v_invRemoteRally.rows[i].user_name}]]></core:set>
                                  <core:set var="v_RRpass"><![CDATA[${v_invRemoteRally.rows[i].password}]]></core:set>
                                </core:if>
                                <!-- (ppm_ver gt 14.3) -->
                                <core:set var="v_RRworkspace"><![CDATA[${v_invRemoteRally.rows[i].agl_workspace}]]></core:set>
                                <core:set var="v_RRis_active"><![CDATA[${v_invRemoteRally.rows[i].is_active}]]></core:set>
                                <core:set var="v_RRprj_pi_type"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_prj_pi_type}]]></core:set>
                                <core:set var="v_RRtsk_pi_type"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_tsk_pi_type}]]></core:set>
                                <core:set var="v_RRtsk_sync"><![CDATA[${v_invRemoteRally.rows[i].agl_tsk_sync}]]></core:set>
                                <core:set var="v_RRdef_own_id"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_def_own_id}]]></core:set>
                                <core:set var="v_RRdef_prj_id"><![CDATA[${v_invRemoteRally.rows[i].agl_ctr_def_prj_id}]]></core:set>
                                <core:set var="v_RRprj_pi_type">${v_RRprj_pi_type.toString().replace(' ','')}</core:set>
                                <core:set var="v_RRtsk_pi_type">${v_RRtsk_pi_type.toString().replace(' ','')}</core:set>
                                <core:set value="${v_RRapi_key}" var="v_secKey"/>
                                <core:set value="${v_RRpass}" var="v_secPass"/>
                                <core:if test="${bDebugXXX}">
                                  <gel:out>_____</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: URL(${v_RRendpoint_url}) </gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: wrkSpc(${v_RRworkspace}) IsActive(${v_RRis_active}) PrgPI(${v_RRprj_pi_type}) TskPI(${v_RRtsk_pi_type})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRauth_type(${v_RRauth_type}) v_RRapi_key(${v_RRapi_key}) v_secKey(${v_secKey})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRuser(${v_RRuser}) v_RRpass(${v_RRpass}) v_secPass(${v_secPass})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: wrkSpc(${v_RRworkspace}) PrgPI(${v_RRprj_pi_type}) TskPI(${v_RRtsk_pi_type})</gel:out>
                                  <gel:out/>
                                </core:if>
                                <core:if test="${ (ppm_ver gt 14.3) }">
                                  <!-- v14.4+ -->
                                  <core:if test="${bDebug}">
                                    <gel:out>(ppm_ver gt 14.3)</gel:out>
                                  </core:if>
                                  <!-- Get api key v14.4 -->
                                  <core:invokeStatic className="com.niku.union.security.StringEncrypter" method="getDefaultInstance" var="v_secIdDef"/>
                                  <core:set value="${v_secIdDef.decrypt(v_RRapi_key)}" var="v_secKey"/>
                                  <core:set value="${v_secIdDef.decrypt(v_RRpass)}" var="v_secPass"/>
                                  <core:if test="${bDebug || bDebugSec}">
                                    <core:set value="v_secIdDef ${v_RRname}: v_RRapi_key[${v_RRapi_key}] v_secKey[${v_secKey}] " var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <core:set value="v_secIdDef ${v_RRname}: v_RRpass[${v_RRpass}] v_secPass[${v_secPass}] " var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                </core:if>
                                <core:if test="${bDebugVerLog}">
                                  <core:set value="Msg1: v_RRcode(${v_RRcode}) ppm_ver(${ppm_ver}) v_secIdDef ${v_RRname}: v_RRapi_key[${v_RRapi_key}] v_secKey[${v_secKey}] v_RRpass[${v_RRpass}] v_secPass[${v_secPass}]  " var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <core:if test="${ !(ppm_ver gt 14.3) }">
                                  <core:if test="${bDebug}">
                                    <gel:out> (ppm_ver is 14.3 or less) </gel:out>
                                  </core:if>
                                  <!-- Get api key v14.3 -->
                                  <core:invokeStatic className="com.niku.union.security.StringEncrypter" method="getDefaultInstance" var="v_secId">
                                    <core:arg type="java.lang.String" value="AES/ECB/PKCS5Padding"/>
                                  </core:invokeStatic>
                                  <!-- First, check if it is encrypted.  This happens when we run GEL from command line on a 14.3 system, but connected to a 14.4 system (i.e. Matt's laptop) -->
                                  <core:set value="${v_RRapi_key.substring(0,5)}" var="v_tmpKey"/>
                                  <core:if test="${v_tmpKey.equals('[AES]')}">
                                    <!-- encypted? -->
                                    <core:set value="${v_secId.decrypt(v_RRapi_key)}" var="v_secKey"/>
                                    <core:if test="${bDebug || bDebugSec}">
                                      <core:set value="v_secId ${v_RRname}: v_RRapi_key[${v_RRapi_key}] v_secKey[${v_secKey}] " var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                  </core:if>
                                  <!-- v_tmpKey.equals('[AES]') -->
                                  <core:set value="${v_RRpass.substring(0,5)}" var="v_tmpPass"/>
                                  <core:if test="${v_tmpPass.equals('[AES]')}">
                                    <!-- encypted? -->
                                    <core:set value="${v_secId.decrypt(v_RRpass)}" var="v_secPass"/>
                                    <core:if test="${bDebug || bDebugSec}">
                                      <core:set value="v_secId ${v_RRname}: v_RRpass[${v_RRpass}] v_secPass[${v_secPass}] " var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                  </core:if>
                                  <!-- v_tmpPass.equals('[AES]') -->
                                </core:if>
                                <!-- !(ppm_ver gt 14.3) -->
                                <core:if test="${v_RRauth_type.equals('BASIC')}">
                                  <core:if test="${v_RRuser != null}">
                                    <!-- AND -->
                                    <core:if test="${(v_RRuser.length() &gt; 0)}">
                                      <core:set value="${v_RRuser}:${v_secPass}" var="credentials"/>
                                      <core:invokeStatic className="java.util.Base64" method="getEncoder" var="encoder"/>
                                      <core:set value="${encoder.encodeToString( credentials.getBytes() )}" var="v_RRencoded"/>
                                      <core:if test="${bDebug}">
                                        <gel:out>encodedCredentials: ${v_RRencoded}</gel:out>
                                      </core:if>
                                    </core:if>
                                  </core:if>
                                </core:if>
                                <core:if test="${bDebugVerLog}">
                                  <core:set value="Msg2: v_RRcode(${v_RRcode}) v_RRauth_type(${v_RRauth_type}) v_RRuser(${v_RRuser}) " var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:if test="${bDebugSec}">
                                    <core:set value="Msg2: v_RRcode(${v_RRcode}) v_RRauth_type(${v_RRauth_type}) v_RRuser(${v_RRuser}) v_RRpass(${v_RRpass}) v_secPass[${v_secPass}] v_RRencoded(${v_RRencoded}) " var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                </core:if>
                                <core:if test="${bDebug || bDebugSec}">
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: URL(${v_RRendpoint_url})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: wrkSpc(${v_RRworkspace}) IsActive(${v_RRis_active}) PrgPI(${v_RRprj_pi_type}) TskPI(${v_RRtsk_pi_type})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRauth_type(${v_RRauth_type}) v_RRapi_key(${v_RRapi_key}) v_secKey(${v_secKey})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRuser(${v_RRuser}) v_RRpass(${v_RRpass}) v_secPass(${v_secPass})</gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: v_RRencoded(${v_RRencoded}) </gel:out>
                                  <gel:out>Integration(${v_RRcode}) ${v_RRname}: wrkSpc(${v_RRworkspace}) PrgPI(${v_RRprj_pi_type}) TskPI(${v_RRtsk_pi_type})</gel:out>
                                  <gel:out/>
                                </core:if>
                                <core:set value="${mapRRCodeName.put(v_RRcode,v_RRname)}" var="void"/>
                                <core:set value="${mapRRCodeURL.put(v_RRcode,v_RRendpoint_url)}" var="void"/>
                                <core:set value="${mapRRCodeAuthType.put(v_RRcode,v_RRauth_type)}" var="void"/>
                                <core:set value="${mapRRCodeIsActive.put(v_RRcode,v_RRis_active)}" var="void"/>
                                <core:set value="${mapRRCodeKey.put(v_RRcode,v_secKey)}" var="void"/>
                                <core:set value="${mapRRCodeEnc.put(v_RRcode,v_RRencoded)}" var="void"/>
                                <core:set value="${mapRRCodeWrk.put(v_RRcode,v_RRworkspace)}" var="void"/>
                                <core:set value="${mapRRCodeWrkID.put(v_RRcode,v_RRworkspace)}" var="void"/>
                                <core:set value="${mapRRCodePrjPI.put(v_RRcode,v_RRprj_pi_type)}" var="void"/>
                                <core:set value="${mapRRCodeTskPI.put(v_RRcode,v_RRtsk_pi_type)}" var="void"/>
                                <core:set value="${mapRRCodeDefOwn.put(v_RRcode,v_RRdef_own_id)}" var="void"/>
                                <core:set value="${mapRRCodeDefPrj.put(v_RRcode,v_RRdef_prj_id)}" var="void"/>
                              </core:forEach>
                              <!-- ___ Useful message to our users, if they can find the job message log. ___ -->
                              <core:if test="${len_arrRemoteRally == 0}">
                                <core:if test="${bDebug}">
                                  <gel:out/>
                                </core:if>
                                <core:set value="ERROR: Remote API Setup not found for Rally Integration. Call your CA PPM Admin or your CA PPM Presales Core Team." var="logMessage"/>
                                <core:choose>
                                  <core:when test="${gel_processId == null}">
                                    <gel:out>${logMessage}</gel:out>
                                  </core:when>
                                  <core:otherwise>
                                    <gel:log level="ERROR">${logMessage}</gel:log>
                                  </core:otherwise>
                                </core:choose>
                              </core:if>
                              <core:if test="${bDebug}">
                                <gel:out/>
                              </core:if>
                              <!-- ________________ -->
                              <!--
        Initialize PPM-to-AC Projects and Tasks
    
        clear agl_ext_id on Project
        -->
                              <core:if test="${!(bSkipInitPPMtoACProjects)}">
                                <core:if test="${((ppm_ver ge 15.2) || bForce152)}">
                                  <core:set value="Cleaning up PPM-to-AC demo Projects and Tasks in preparation for Presales Data Sync and OOTB Sync AC..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                      <gel:out/>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <!-- Cleanup PPM-to-AC Tasks -->
                                  <core:if test="${!(bSkipUpdate)}">
                                    <!--  Debug SQL
               SELECT  inv.code proj_id
                     , inv.id proj_int_id
                     , inv.name proj_name
                     , odfp.agl_system
                     , odfint.agl_create_direction
                     , int.code
                 FROM inv_investments inv 
                 LEFT JOIN odf_ca_project odfp ON odfp.id = inv.id
                 LEFT JOIN nmc_integrations int ON int.code = odfp.agl_system
                 LEFT JOIN odf_ca_integration odfint ON int.id = odfint.id
                WHERE odfint.agl_create_direction = 'PPM_TO_AGL'
            -->
                                    <core:if test="${bDebug}">
                                      <core:set value="PPM-to-AC Project Initialize: Reset odf_ca_project.agl_ext_id " var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                    <sql:update var="v_projCleanup">
              UPDATE odf_ca_project
                 SET agl_ext_id = NULL
               WHERE id IN (
                 SELECT  inv.id
                   FROM  inv_investments inv 
                   LEFT JOIN odf_ca_project odfp ON odfp.id = inv.id
                   LEFT JOIN nmc_integrations int ON int.code = odfp.agl_system
                   LEFT JOIN odf_ca_integration odfint ON int.id = odfint.id
                  WHERE odfint.agl_create_direction = 'PPM_TO_AGL'
                  )
            </sql:update>
                                    <core:if test="${bDebug}">
                                      <core:set value="PPM-to-AC Tasks Initialize: Reset odf_ca_task.agl_tsk_ext_id " var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                    <sql:update var="v_taskCleanup">
              UPDATE odf_ca_task 
                 SET agl_tsk_ext_id = NULL
               WHERE id IN (
                 SELECT t.prid task_intid
                   FROM inv_investments inv 
                   LEFT JOIN odf_ca_project odfp ON odfp.id = inv.id
                   LEFT JOIN prtask t ON inv.id = t.prprojectid 
                   LEFT JOIN odf_ca_task odft ON odft.id = t.prid
                   LEFT JOIN nmc_integrations int ON int.code = odfp.agl_system
                   LEFT JOIN odf_ca_integration odfint ON int.id = odfint.id
                  WHERE odfint.agl_create_direction = 'PPM_TO_AGL'
                    AND odft.agl_tsk_sync = '1'
                  )
            </sql:update>
                                  </core:if>
                                  <!-- !(bSkipUpdate) -->
                                </core:if>
                                <!-- ((ppm_ver ge 15.2) || bForce152) -->
                              </core:if>
                              <!-- !(bSkipInitPPMtoACProjects) -->
                              <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                              <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                              <core:if test="${bDebugTimings}">
                                <gel:out>Script Elapse #20: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                              </core:if>
                              <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                              <core:catch var="exvar">
                                <!-- If we were to use Basic Authentication (user/pwd), then this is where we would login to Rally  -->
                                <!-- ___ Verify Rally Connectivity ___ -->
                                <core:if test="${bDebugXXX}">
                                  <gel:out trim="false">Logging into Rally at ${RallyHost}...</gel:out>
                                </core:if>
                                <!-- ________________ -->
                                <!--
          Cleanup unused AC demo data from the AC workspace
    
          Delete
          I6  Re-build primary web app to use API
          I7  Integrate in-store and online experience
          I8  Integrate into Facebook
          I10 Create a read-only API
      
          Cleanup
          I1  Minimal online shopping site
            Delete
            F10 Purchase path
            F17 Online refunds
            F18 Integrate with Paypal
            F19 Integrate with WePay
            F20 Refund management
            F24 Credit card error messaging
            F36 Support cash/check by mail
            F37 Backorder fulfillment
            F38 Duplcate order fulfillment
      
          Adjust
          I1  Minimal online shopping site
            F11 Priority shipping
              US67 Update Shipping System for Each Order, change to Schedule State to Accepted
      
          -->
                                <core:new className="java.util.HashMap" var="mapPIMove"/>
                                <core:new className="java.util.HashMap" var="mapPIMoveName"/>
                                <core:if test="${!(bSkipDelACFeatures)}">
                                  <core:set value="Cleaning up unused AC Features from the connected AC workspace, prep for PPM Presales demos..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                      <gel:out/>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:new className="java.util.HashMap" var="mapPIDel"/>
                                  <core:new className="java.util.HashMap" var="mapPIName"/>
                                  <core:new className="java.util.HashMap" var="mapPIFmtId"/>
                                  <!-- ____________________________________________________ -->
                                  <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                  <core:set value="${mapPIName.put('I1'  ,'Integrate social into shopping experience')}" var="void"/>
                                  <core:set value="${mapPIName.put('I2'  ,'Create a read-only API')}" var="void"/>
                                  <core:set value="${mapPIName.put('I3'  ,'Consolidate databases')}" var="void"/>
                                  <core:set value="${mapPIName.put('I4'  ,'Integrate in-store and online experience')}" var="void"/>
                                  <core:set value="${mapPIName.put('I5'  ,'Integrate into Facebook')}" var="void"/>
                                  <core:set value="${mapPIName.put('I6'  ,'Minimal online shopping site')}" var="void"/>
                                  <core:set value="${mapPIName.put('I7'  ,'Build read-write API for handling orders')}" var="void"/>
                                  <core:set value="${mapPIName.put('I8'  ,'Personalized online shopping experience')}" var="void"/>
                                  <core:set value="${mapPIName.put('I9'  ,'Modernize customer service portal')}" var="void"/>
                                  <core:set value="${mapPIName.put('I10' ,'Maintain legacy purchasing system')}" var="void"/>
                                  <core:set value="${mapPIName.put('I11' ,'Re-build primary web app to use API')}" var="void"/>
                                  <!-- ____________________________________________________ -->
                                  <!-- Support for existing workspace demo data, 09/13/2017 -->
                                  <core:set value="${mapPIDel.put('2 ,F10 ,I1 ', 'Purchase path')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F17 ,I1 ', 'Online refunds')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F18 ,I1 ', 'Integrate with Paypal')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F19 ,I1 ', 'Integrate with WePay')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F20 ,I1 ', 'Refund management')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F24 ,I1 ', 'Credit card error messaging')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F25 ,I1 ', 'Product Listings')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F28 ,I1 ', 'Implement Fraud Detection')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F35 ,I1 ', 'Integrate with Amex Gateway')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F36 ,I1 ', 'Support cash/check by mail')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F37 ,I1 ', 'Backorder fulfillment')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F38 ,I1 ', 'Duplcate order fulfillment')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I6      ', 'Re-build primary web app to use API')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I7      ', 'Integrate in-store and online experience')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I8      ', 'Integrate into Facebook')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I10     ', 'Create a read-only API')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I11     ', 'Consolidate databases')}" var="void"/>
                                  <!-- <core:set var="void" value="${mapPIDel.put('2 ,F8  ,I5 ', 'Outbound SMS messages for support case updates')}"/>  -->
                                  <core:set value="${mapPIDel.put('2 ,F26 ,I4 ', 'Realtime chat support')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F33 ,I9 ', 'Cross sell related products')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F34 ,I9 ', 'Allow user to vote on products')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F39 ,I9 ', 'Integrate with coupon.com site to match *popular* items in shopping cart')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F22 ,I10', 'API for Shipping')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F22     ', 'API for Shipping')}" var="void"/>
                                  <!-- under I1, F1  -->
                                  <core:set value="${mapPIDel.put('3 ,US97    ', 'Shop for Items')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US96    ', 'Save cart for future checkout')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US93    ', 'one-click checkout')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US92    ', 'Daily deals')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US91    ', 'Customize product list')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US90    ', 'Combine Multiple Items')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US89    ', 'Clone contents from previous cart')}" var="void"/>
                                  <!-- under I1, F9  -->
                                  <core:set value="${mapPIDel.put('3 ,US21    ', 'Install new 2048bit encryption key')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US20    ', 'Handle out of limit errors on credit card charges')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US19    ', 'Generate audit report tempate for annual per-user purchase history.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US18    ', 'Design spike')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US15    ', 'Change Method of Payment')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US14    ', 'Change Billing Address')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US13    ', 'Batch multiple payments for single transaction')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US12    ', 'Apple Pay')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US11    ', 'Add support for Discover card')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US10    ', 'Add order processing status on user profile page')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US9     ', 'Purchase Multiple Items')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US8     ', 'Add error message if credit card number length is &lt; 16')}" var="void"/>
                                  <!-- under I1, F23  -->
                                  <core:set value="${mapPIDel.put('3 ,US124   ', 'View or Change your One-Click settings')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US121   ', 'Show history of account access.')}" var="void"/>
                                  <!-- under I4, F12  -->
                                  <core:set value="${mapPIDel.put('3 ,US59    ', 'Update user profile purchase history upon settlement.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US58    ', 'Support out of stock email notification.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US57    ', 'Support backorder email notification')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US56    ', 'Spike: Tax table/calculations')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US54    ', 'Song Streaming')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US53    ', 'Send user notification upon request for shipment.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US52    ', 'Send success email notification after adding credit card to profile.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US51    ', 'Send failure logs to CSPAN verification service nightly.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US49    ', 'Return Items')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US47    ', 'Provide connection to CSPAN verification service.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US46    ', 'Order Modification')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US45    ', 'Customizing Product List')}" var="void"/>
                                  <!-- under I10, F22  -->
                                  <core:set value="${mapPIDel.put('3 ,US3     ', 'Support USPS Shipping')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US2     ', 'API for Multi-Site Shipping')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US1     ', 'API for Basic Shipping')}" var="void"/>
                                  <!-- Move seldom unused AC demo data to other AC Initiatives -->
                                  <core:set value="${mapPIMove.put('2 ,F23 ,I1 , I4', 'User Profile')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F44 ,I1 , I4', 'Purchase single product')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F45 ,I1 , I4', 'Knowledgebase')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F46 ,I1 , I4', 'Homepage')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F47 ,I1 , I4', 'Product purchase confirmation')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F48 ,I1 , I4', 'Returned shipments')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F49 ,I1 , I4', 'Search for products')}" var="void"/>
                                  <!--
          <core:set var="void" value="${mapPIMoveName.put('I1', 'Minimal online shopping site' )}"/>
          <core:set var="void" value="${mapPIMoveName.put('I4', 'Modernize customer service portal' )}"/>
          <core:set var="void" value="${mapPIMoveName.put('I5', 'Maintain legacy purchasing system' )}"/>
            -->
                                  <!-- ____________________________________________________________ -->
                                  <!-- Support for 'Standard' workspace demo data, as of 11/27/2017 -->
                                  <core:set value="${mapPIDel.put('2 ,F38 ,I6 ', 'Purchase path')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F5  ,I6 ', 'Online refunds')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F6  ,I6 ', 'Integrate with Paypal')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F7  ,I6 ', 'Integrate with WePay')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F8  ,I6 ', 'Refund management')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F1  ,I6 ', 'Credit card error messaging')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F10 ,I6 ', 'Product Listings')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F13 ,I6 ', 'Implement Fraud Detection')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F36 ,I6 ', 'Integrate with Amex Gateway')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F39 ,I6 ', 'Support cash/check by mail')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F25 ,I6 ', 'Backorder fulfillment')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F44 ,I6 ', 'Duplcate order fulfillment')}" var="void"/>
                                  <!-- under I9      [Modernize customer service portal]  -->
                                  <core:set value="${mapPIDel.put('2 ,F11 ,I9 ', 'Realtime chat support')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F11     ', 'Realtime chat support')}" var="void"/>
                                  <!-- under I1      [Integrate social into shopping experience] -->
                                  <core:set value="${mapPIDel.put('2 ,F50 ,I1 ', 'Cross sell related products')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F35 ,I1 ', 'Allow user to vote on products')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F22 ,I1 ', 'Integrate with coupon.com site to match *popular* items in shopping cart')}" var="void"/>
                                  <!-- under I2      [Create a read-only API] -->
                                  <core:set value="${mapPIDel.put('2 ,F27 ,I2 ', 'API for Shipping')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F27     ', 'API for Shipping')}" var="void"/>
                                  <!-- Move seldom unused AC demo data to other AC Initiatives -->
                                  <!-- under I9      [Modernize customer service portal]  -->
                                  <core:set value="${mapPIMove.put('2 ,F9  ,I6 , I9', 'User Profile')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F17 ,I6 , I9', 'Purchase single product')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F16 ,I6 , I9', 'Knowledgebase')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F34 ,I6 , I9', 'Homepage')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F2  ,I6 , I9', 'Product purchase confirmation')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F21 ,I6 , I9', 'Returned shipments')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F3  ,I6 , I9', 'Search for products')}" var="void"/>
                                  <!-- ____________________________________________________________ -->
                                  <!-- Support for 'Standard' workspace demo data, as of 12/03/2017 -->
                                  <core:set value="${mapPIDel.put('2 ,F39 ,I6 ', 'Purchase path')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F2  ,I6 ', 'Support cash/check by mail')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F6  ,I6 ', 'Online refunds')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F7  ,I6 ', 'Integrate with Paypal')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F8  ,I6 ', 'Integrate with WePay')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F9  ,I6 ', 'Refund management')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F4  ,I6 ', 'Credit card error messaging')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F11 ,I6 ', 'Product Listings')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F14 ,I6 ', 'Implement Fraud Detection')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F26 ,I6 ', 'Backorder fulfillment')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F34 ,I6 ', 'Duplcate order fulfillment')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F36 ,I6 ', 'Integrate with Amex Gateway')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I11     ', 'Re-build primary web app to use API')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I4      ', 'Integrate in-store and online experience')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I5      ', 'Integrate into Facebook')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I2      ', 'Create a read-only API')}" var="void"/>
                                  <core:set value="${mapPIDel.put('1 ,I3      ', 'Consolidate databases')}" var="void"/>
                                  <!-- under I10     [Maintain legacy purchasing system]  -->
                                  <!-- <core:set var="void" value="${mapPIDel.put('2 ,F20 ,I10', 'Outbound SMS messages for support case updates')}"/>  -->
                                  <!-- under I9      [Modernize customer service portal]  -->
                                  <core:set value="${mapPIDel.put('2 ,F12 ,I9 ', 'Realtime chat support')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F12     ', 'Realtime chat support')}" var="void"/>
                                  <!-- under I1      [Integrate social into shopping experience] -->
                                  <core:set value="${mapPIDel.put('2 ,F47 ,I1 ', 'Cross sell related products')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F35 ,I1 ', 'Allow user to vote on products')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F23 ,I1 ', 'Integrate with coupon.com site to match *popular* items in shopping cart')}" var="void"/>
                                  <!-- under I2      [Create a read-only API] -->
                                  <core:set value="${mapPIDel.put('2 ,F28 ,I2 ', 'API for Shipping')}" var="void"/>
                                  <core:set value="${mapPIDel.put('2 ,F28     ', 'API for Shipping')}" var="void"/>
                                  <!-- under I6, F38 [Minimal online shopping site] (Shopping Cart)  -->
                                  <core:set value="${mapPIDel.put('3 ,US65    ', 'Save cart for future checkout')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US106   ', 'one-click checkout')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US48    ', 'Daily deals')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US62    ', 'Customize product list')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US61    ', 'Combine Multiple Items')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US35    ', 'Clone contents from previous cart')}" var="void"/>
                                  <!-- under I6, F29 [Minimal online shopping site] (Credit card payments)  -->
                                  <core:set value="${mapPIDel.put('3 ,US98    ', 'Install new 2048bit encryption key')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US97    ', 'Handle out of limit errors on credit card charges')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US96    ', 'Generate audit report tempate for annual per-user purchase history.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US95    ', 'Design spike')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US92    ', 'Change Method of Payment')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US91    ', 'Change Billing Address')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US90    ', 'Batch multiple payments for single transaction')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US64    ', 'Apple Pay')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US1     ', 'Add support for Discover card')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US125   ', 'Add order processing status on user profile page')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US86    ', 'Purchase Multiple Items')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US85    ', 'Add error message if credit card number length is &lt; 16')}" var="void"/>
                                  <!-- under I6, F9  [Minimal online shopping site] (User Profile) -->
                                  <core:set value="${mapPIDel.put('3 ,US111   ', 'View or Change your One-Click settings')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US105   ', 'Show history of account access.')}" var="void"/>
                                  <!-- under I9, F12 [Modernize customer service portal] (Order Status 2.0) -->
                                  <core:set value="${mapPIDel.put('3 ,US32    ', 'Update user profile purchase history upon settlement.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US31    ', 'Support out of stock email notification.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US30    ', 'Support backorder email notification')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US29    ', 'Spike: Tax table/calculations')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US27    ', 'Song Streaming')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US26    ', 'Send user notification upon request for shipment.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US25    ', 'Send success email notification after adding credit card to profile.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US24    ', 'Send failure logs to CSPAN verification service nightly.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US22    ', 'Return Items')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US20    ', 'Provide connection to CSPAN verification service.')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US19    ', 'Order Modification')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US18    ', 'Customizing Product List')}" var="void"/>
                                  <!-- under I2, F27 [Create a read-only API] (API for Shipping) -->
                                  <core:set value="${mapPIDel.put('3 ,US127   ', 'Support USPS Shipping')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US73    ', 'API for Multi-Site Shipping')}" var="void"/>
                                  <core:set value="${mapPIDel.put('3 ,US126   ', 'API for Basic Shipping')}" var="void"/>
                                  <!-- Move seldom unused AC demo data to other AC Initiatives -->
                                  <!-- under I9      [Modernize customer service portal]  -->
                                  <core:set value="${mapPIMove.put('2 ,F10 ,I6 , I9', 'User Profile')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F18 ,I6 , I9', 'Purchase single product')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F17 ,I6 , I9', 'Knowledgebase')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F37 ,I6 , I9', 'Homepage')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F48 ,I6 , I9', 'Product purchase confirmation')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F22 ,I6 , I9', 'Returned shipments')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F49 ,I6 , I9', 'Search for products')}" var="void"/>
                                  <!--
          <core:set var="void" value="${mapPIMoveName.put('I6'  ,'Minimal online shopping site' )}"/>
          <core:set var="void" value="${mapPIMoveName.put('I9'  ,'Modernize customer service portal' )}"/>
          <core:set var="void" value="${mapPIMoveName.put('I10' ,'Maintain legacy purchasing system' )}"/>
            -->
                                  <!-- new stories
    I2, F40, US144
    I2, F40, US145
    I2, F40, US146
    I9, F6,  US147
    I9, F30, US148
    I9, F31, US149
    I9, F32, US150
    -->
                                  <core:set value="" var="savWrk"/>
                                  <!-- Workspace - Get the ObjectIDs for all workspaces -->
                                  <core:set value="${mapRRCodeWrk.keySet()}" var="keysetRRCodeWrk"/>
                                  <core:set value="${keysetRRCodeWrk.iterator()}" var="keyRRCodeWrk"/>
                                  <core:while test="${keyRRCodeWrk.hasNext()}">
                                    <core:set value="${keyRRCodeWrk.next()}" var="tmpRRcode"/>
                                    <core:set value="${mapRRCodeWrk.get(tmpRRcode)}" var="tmpWrk"/>
                                    <core:set value="${tmpWrk.trim()}" var="tmpWrk"/>
                                    <core:set value="${mapRRCodeURL.get(tmpRRcode)}" var="RallyHost"/>
                                    <core:set value="${mapRRCodeAuthType.get(tmpRRcode)}" var="v_RRauth_type"/>
                                    <core:set value="${mapRRCodeIsActive.get(tmpRRcode)}" var="v_RRis_active"/>
                                    <core:set value="${mapRRCodeKey.get(tmpRRcode)}" var="v_RRapi_key"/>
                                    <core:set value="${mapRRCodeEnc.get(tmpRRcode)}" var="v_RRencoded"/>
                                    <core:set value="${mapRRCodeWrkID.get(tmpRRcode)}" var="v_RRworkspace"/>
                                    <core:set value="${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RRprj_pi_type"/>
                                    <core:set value="${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RRtsk_pi_type"/>
                                    <core:set value="${mapRRCodeDefOwn.get(tmpRRcode)}" var="v_RRdef_own_id"/>
                                    <core:set value="${mapRRCodeDefPrj.get(tmpRRcode)}" var="v_RRdef_prj_id"/>
                                    <core:if test="${bDebug}">
                                      <gel:out/>
                                      <gel:out trim="false">Workspace: tmpRRcode[${tmpRRcode}] tmpWrk[${tmpWrk}] v_RRworkspace[${v_RRworkspace}]  v_RRis_active(${v_RRis_active}) v_RRauth_type(${v_RRauth_type}) v_RRencoded(${v_RRencoded}) v_RRprj_pi_type(${v_RRprj_pi_type}) v_RRtsk_pi_type(${v_RRtsk_pi_type})  </gel:out>
                                    </core:if>
                                    <core:if test="${(tmpWrk != null)}">
                                      <!-- AND -->
                                      <core:if test="${bDebug}">
                                        <gel:out trim="false">tmpWrk[${tmpWrk}] </gel:out>
                                      </core:if>
                                      <core:if test="${bDebug}">
                                        <gel:out trim="false">savWrk[${savWrk}] </gel:out>
                                      </core:if>
                                      <core:if test="${!(tmpWrk.equals(savWrk))}">
                                        <!-- Only if we did not yet process this workspace -->
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">!(tmpWrk.equals(savWrk)) </gel:out>
                                        </core:if>
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">tmpWrk[${tmpWrk}] </gel:out>
                                        </core:if>
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">savWrk[${savWrk}] </gel:out>
                                        </core:if>
                                        <core:set value="${tmpWrk}" var="savWrk"/>
                                        <core:if test="${(v_RRis_active eq 1)}">
                                          <!-- Integration is Active -->
                                          <!-- Lookup the top level PIs by name. Save the current Formatd IDs -->
                                          <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                          <core:set value="${mapPIFmtId.clear()}" var="void"/>
                                          <!-- Workspace - Get the ObjectIDs for all workspaces -->
                                          <core:set value="${mapPIName.keySet()}" var="keysetPIName"/>
                                          <core:set value="${keysetPIName.iterator()}" var="keyPIName"/>
                                          <core:while test="${keyPIName.hasNext()}">
                                            <core:set value="${keyPIName.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapPIName.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="tmpName"/>
                                            <core:set value="${tmpName.replace(' ',myBlnk)}" var="strTempName"/>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                              <gel:out trim="false">PI: tmpPIcode[${tmpPIcode}] tmpName[${tmpName}] strTempName[${strTempName}]  </gel:out>
                                            </core:if>
                                            <!-- Search by Name -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(Name${myBlnk}=${myBlnk}"${strTempName}")</core:set>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_23"/>
                                            <core:set value="${(milEnd_23 - milStart_23)}" var="elapsedTime"/>
                                            <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                            <core:if test="${bDebugTimings}">
                                              <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                            </core:if>
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_24"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:new className="java.io.BufferedReader" var="v_InputData">
                                                  <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                </core:new>
                                                <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>httpData: ${httpData}</gel:out>
                                                </core:if>
                                                <!-- free up some resources -->
                                                <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                <!-- JSON Response -->
                                                <core:new className="org.json.JSONObject" var="jsonResp">
                                                  <core:arg type="java.lang.String" value="${httpData}"/>
                                                </core:new>
                                                <core:if test="${bDebugJSON}">
                                                  <gel:out>jsonResp:</gel:out>
                                                  <gel:out>${jsonResp.toString(1)}</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                </core:if>
                                                <!-- PortfolioItem, top level JSON object -->
                                                <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_UUID"/>
                                            <core:set value="" var="ral_ObjectID"/>
                                            <core:set value="" var="ral_Name"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                  <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                  <core:set value="${jsonRArray.getString('FormattedID')}" var="ral_FmtID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                    <gel:out>ral_FmtID     : ${ral_FmtID}</gel:out>
                                                    <gel:out>ral_ObjectID  : ${ral_ObjectID}  (${ral_ObjectID.getClass()})</gel:out>
                                                    <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                  </core:if>
                                                  <core:set value="${mapPIFmtId.put(tmpPIcode,ral_FmtID)}" var="void"/>
                                                  <core:set value="${mapPIMoveName.put(tmpPIcode, ral_Name)}" var="void"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out trim="false">Saving PI: tmpPIcode[${tmpPIcode}] ral_FmtID[${ral_FmtID}] ral_ObjectID[${ral_ObjectID}] for tmpName[${tmpName}]</gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID == null) || (ral_ObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: PI by Name. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>_______________________________________________</gel:out>
                                            </core:if>
                                          </core:while>
                                          <!-- keyPIName.hasNext() -->
                                          <!-- Walk the list of PIs that we want to cleanup -->
                                          <core:set value="${mapPIDel.keySet()}" var="keysetPIDel"/>
                                          <core:set value="${keysetPIDel.iterator()}" var="keyPIDel"/>
                                          <core:while test="${keyPIDel.hasNext()}">
                                            <core:set value="${keyPIDel.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapPIDel.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="tmpName"/>
                                            <core:set value="${tmpPIcode.split(',')}" var="arrPIcode"/>
                                            <!-- split the PI keys on the commas -->
                                            <core:set value="" var="arrPILvl"/>
                                            <core:set value="" var="arrPIcode1"/>
                                            <core:set value="" var="arrPIcode2"/>
                                            <core:if test="${(arrPIcode.size() ge 1)}">
                                              <core:set value="${arrPIcode[0].trim()}" var="arrPILvl"/>
                                            </core:if>
                                            <core:if test="${(arrPIcode.size() ge 2)}">
                                              <core:set value="${arrPIcode[1].trim()}" var="arrPIcode1"/>
                                            </core:if>
                                            <core:if test="${(arrPIcode.size() ge 3)}">
                                              <core:set value="${arrPIcode[2].trim()}" var="arrPIcode2"/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Delete: size(${arrPIcode.size()}) arrPILvl(${arrPILvl}) arrPIInit(${arrPIcode1}) arrPIFeat(${arrPIcode2}) tmpName(${tmpName})</gel:out>
                                            </core:if>
                                            <!-- process PortfolioItems names -->
                                            <core:set value="PortfolioItem" var="v_RR_pi_type"/>
                                            <!-- Portfolio Item Type -->
                                            <core:set value="PortfolioItem" var="v_RR_Ppi_type"/>
                                            <!-- Parent Portfolio Item Type -->
                                            <core:if test="${(arrPILvl eq 0) || (arrPILvl eq 1)}">
                                              <core:set value="PortfolioItem/theme" var="v_RR_pi_type"/>
                                              <core:set value="PortfolioItem/theme" var="v_RR_Ppi_type"/>
                                              <core:if test="${(arrPILvl eq 1)}">
                                                <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                                <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_Ppi_type"/>
                                              </core:if>
                                              <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                                <core:set value="${mapPIFmtId.get(arrPIcode1)}" var="vNewPICode"/>
                                                <core:if test="${((vNewPICode != null) &amp;&amp; (vNewPICode.length() gt 0))}">
                                                  <core:set value="${vNewPICode}" var="arrPIcode1"/>
                                                </core:if>
                                              </core:if>
                                              <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                                                <core:set value="${mapPIFmtId.get(arrPIcode2)}" var="vNewPICode"/>
                                                <core:if test="${((vNewPICode != null) &amp;&amp; (vNewPICode.length() gt 0))}">
                                                  <core:set value="${vNewPICode}" var="arrPIcode2"/>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 2)}">
                                              <core:set value="PortfolioItem/${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                              <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_Ppi_type"/>
                                              <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                                                <core:set value="${mapPIFmtId.get(arrPIcode2)}" var="vNewPICode"/>
                                                <core:if test="${((vNewPICode != null) &amp;&amp; (vNewPICode.length() gt 0))}">
                                                  <core:set value="${vNewPICode}" var="arrPIcode2"/>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 3)}">
                                              <core:set value="hierarchicalrequirement" var="v_RR_pi_type"/>
                                              <core:set value="PortfolioItem/${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RR_Ppi_type"/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Delete: size(${arrPIcode.size()}) arrPILvl(${arrPILvl}) arrPIFeat(${arrPIcode1}) arrPIInit(${arrPIcode2}) tmpName(${tmpName})</gel:out>
                                            </core:if>
                                            <core:set value="${tmpName.replace(' ',myBlnk)}" var="strTempName"/>
                                            <core:if test="${bDebug}">
                                              <gel:out>tmpName[${tmpName}] strTempName[${strTempName}] </gel:out>
                                            </core:if>
                                            <!-- 
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RR_pi_type}?query=(FormattedID${myBlnk}=${myBlnk}"${v_TAglTskId}")</core:set>
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RR_pi_type}?query=(Name${myBlnk}contains${myBlnk}"${strTempName}")</core:set>
    
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RR_pi_type}?query=(FormattedID = "${v_PrjFmtId}")</core:set> 
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RR_pi_type}?query=(Name = "${strTempProjName}")</core:set> 
    
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RRprj_pi_type}?query=(Name${myBlnk}contains${myBlnk}"${strTempName}")</core:set>
                    <core:set var="httpRESTURL" value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name"/>
                    -->
                                            <!-- Search by Name -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(Name${myBlnk}=${myBlnk}"${strTempName}")</core:set>
                                            <!-- Search by Name and FormattedID -->
                                            <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(FormattedID${myBlnk}=${myBlnk}"${arrPIcode1}"))</core:set>
                                              <!-- Search by Name, FormattedID and parent FormattedID -->
                                              <!-- No longer using the FormattedID to look for Features, just the name and parent
                      <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                        <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(FormattedID${myBlnk}=${myBlnk}"${arrPIcode1}"))${myBlnk}AND${myBlnk}(Parent.FormattedID${myBlnk}=${myBlnk}"${arrPIcode2}"))</core:set>
                      </core:if>
                        -->
                                              <!-- Search by Name and parent FormattedID -->
                                              <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                                                <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(Parent.FormattedID${myBlnk}=${myBlnk}"${arrPIcode2}"))</core:set>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bUseRallyProjectScope}">
                                              <core:set trim="false" value="${httpURI.setParameter('projectScopeUp', 'false')}" var="void"/>
                                              <core:set trim="false" value="${httpURI.setParameter('projectScopeDown', 'true')}" var="void"/>
                                              <core:set encode="false" var="v_projectScope">${RallyHost}${RallyUrlPath}/project/${v_RRdef_prj_id}</core:set>
                                              <core:set value="${httpURI.setParameter('project', v_projectScope)}" var="void"/>
                                            </core:if>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_23"/>
                                            <core:set value="${(milEnd_23 - milStart_23)}" var="elapsedTime"/>
                                            <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                            <core:if test="${bDebugTimings}">
                                              <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                            </core:if>
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_24"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:new className="java.io.BufferedReader" var="v_InputData">
                                                  <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                </core:new>
                                                <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>httpData: ${httpData}</gel:out>
                                                </core:if>
                                                <!-- free up some resources -->
                                                <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                <!-- JSON Response -->
                                                <core:new className="org.json.JSONObject" var="jsonResp">
                                                  <core:arg type="java.lang.String" value="${httpData}"/>
                                                </core:new>
                                                <core:if test="${bDebugJSON}">
                                                  <gel:out>jsonResp:</gel:out>
                                                  <gel:out>${jsonResp.toString(1)}</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                </core:if>
                                                <!-- PortfolioItem, top level JSON object -->
                                                <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_UUID"/>
                                            <core:set value="" var="ral_ObjectID"/>
                                            <core:set value="" var="ral_Name"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                  <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                    <gel:out>ral_ObjectID  : ${ral_ObjectID} ${ral_ObjectID.getClass()}</gel:out>
                                                    <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                  </core:if>
                                                  <!-- We found the PI. now delete it -->
                                                  <!-- Setup URL for target PI -->
                                                  <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}/${ral_ObjectID}</core:set>
                                                  <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                    <core:set encode="false" var="httpRESTURL">${httpRESTURL}?workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                                  </core:if>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                                  </core:if>
                                                  <core:new className="java.net.URL" var="remoteURL">
                                                    <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                                  </core:new>
                                                  <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                                  <core:set value="${connection.setDoInput(true)}" var="void"/>
                                                  <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                                  <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                                  <core:expr value="${connection.setRequestMethod(&quot;DELETE&quot;)}"/>
                                                  <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                                  <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                                  <core:if test="${v_RRauth_type.equals('API')}">
                                                    <core:invoke method="setRequestProperty" on="${connection}">
                                                      <core:arg type="java.lang.String" value="zsessionid"/>
                                                      <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                    </core:invoke>
                                                  </core:if>
                                                  <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                    <core:if test="${v_RRencoded != null}">
                                                      <!-- AND -->
                                                      <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                        <core:invoke method="setRequestProperty" on="${connection}">
                                                          <core:arg type="java.lang.String" value="Authorization"/>
                                                          <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                        </core:invoke>
                                                      </core:if>
                                                    </core:if>
                                                  </core:if>
                                                  <core:if test="${!(bSkipRESTDelete)}">
                                                    <core:set value="${connection.connect()}" var="void"/>
                                                    <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                    <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                    <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                    <core:if test="${bDebugREST}">
                                                      <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                      <gel:out>response_msg :  ${response_msg}</gel:out>
                                                      <gel:out>response_code:  ${response_code}</gel:out>
                                                    </core:if>
                                                    <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                    <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_23"/>
                                                    <core:set value="${(milEnd_23 - milStart_23)}" var="elapsedTime"/>
                                                    <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                                    <core:if test="${bDebugTimings}">
                                                      <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                                    </core:if>
                                                    <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_24"/>
                                                    <core:set value="${null}" var="jsonQR"/>
                                                    <core:if test="${response_code == null}">
                                                      <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                      <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                          <gel:out/>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="WARN">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                    <core:if test="${response_code != null}">
                                                      <core:if test="${response_code == 401}">
                                                        <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                        <core:choose>
                                                          <core:when test="${gel_processId == null}">
                                                            <gel:out>${logMessage}</gel:out>
                                                          </core:when>
                                                          <core:otherwise>
                                                            <gel:log level="WARN">${logMessage}</gel:log>
                                                          </core:otherwise>
                                                        </core:choose>
                                                      </core:if>
                                                      <core:if test="${httpInputStream == null}">
                                                        <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                        <core:choose>
                                                          <core:when test="${gel_processId == null}">
                                                            <gel:out>${logMessage}</gel:out>
                                                          </core:when>
                                                          <core:otherwise>
                                                            <gel:log level="WARN">${logMessage}</gel:log>
                                                          </core:otherwise>
                                                        </core:choose>
                                                        <core:if test="${bDebug502}">
                                                          <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                          <core:choose>
                                                            <core:when test="${gel_processId == null}">
                                                              <gel:out>${logMessage}</gel:out>
                                                            </core:when>
                                                            <core:otherwise>
                                                              <gel:log level="INFO">${logMessage}</gel:log>
                                                            </core:otherwise>
                                                          </core:choose>
                                                        </core:if>
                                                      </core:if>
                                                      <!-- OR -->
                                                      <core:if test="${httpInputStream != null}">
                                                        <core:new className="java.io.InputStreamReader" var="v_Input">
                                                          <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                        </core:new>
                                                        <core:new className="java.io.BufferedReader" var="v_InputData">
                                                          <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                        </core:new>
                                                        <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                        <core:if test="${bDebugREST}">
                                                          <gel:out>httpData: ${httpData}</gel:out>
                                                        </core:if>
                                                        <!-- free up some resources -->
                                                        <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                        <!-- JSON Response -->
                                                        <core:new className="org.json.JSONObject" var="jsonResp">
                                                          <core:arg type="java.lang.String" value="${httpData}"/>
                                                        </core:new>
                                                        <core:if test="${bDebugJSON}">
                                                          <gel:out>jsonResp:</gel:out>
                                                          <gel:out>${jsonResp.toString(1)}</gel:out>
                                                          <gel:out>_______________________________________________</gel:out>
                                                          <gel:out>_______________________________________________</gel:out>
                                                        </core:if>
                                                      </core:if>
                                                      <!-- (httpInputStream != null) -->
                                                      <core:if test="${response_code == 200}">
                                                        <!-- Search by Name only -->
                                                        <core:set value="Cleanup successful of ${v_RR_pi_type}(${ral_ObjectID}): " var="logMessage"/>
                                                        <!-- Search by Name, Formatted ID and Parent Formatted ID -->
                                                        <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                                                          <core:set value="${logMessage}[${arrPIcode2}]." var="logMessage"/>
                                                        </core:if>
                                                        <!-- Search by Name and Formatted ID -->
                                                        <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                                          <core:set value="${logMessage}[${arrPIcode1}] " var="logMessage"/>
                                                        </core:if>
                                                        <core:set value="${logMessage}${tmpName}" var="logMessage"/>
                                                        <core:choose>
                                                          <core:when test="${gel_processId == null}">
                                                            <gel:out>${logMessage}</gel:out>
                                                          </core:when>
                                                          <core:otherwise>
                                                            <gel:log level="INFO">${logMessage}</gel:log>
                                                          </core:otherwise>
                                                        </core:choose>
                                                      </core:if>
                                                    </core:if>
                                                    <!-- (response_code != null) -->
                                                  </core:if>
                                                  <!-- !(bSkipRESTDelete) -->
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID == null) || (ral_ObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: PI to delete. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>_______________________________________________</gel:out>
                                            </core:if>
                                          </core:while>
                                          <!-- keyPIDel.hasNext() -->
                                        </core:if>
                                        <!--  (v_RRis_active eq 1) -->
                                      </core:if>
                                      <!--  !(tmpWrk.equals(savWrk))  -->
                                    </core:if>
                                    <!--  (tmpWrk != null) -->
                                  </core:while>
                                  <!-- keyRRCodeWrk.hasNext() -->
                                </core:if>
                                <!-- !(bSkipDelACFeatures) -->
                                <!-- ________________ -->
                                <!--
          Rename Features to match new demo data in the dataset
          -->
                                <core:if test="${(bSkipRenameACFeatures)}">
                                  <core:set value="Skipping Rename of Rally Features..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <!-- (bSkipRenameACFeatures) -->
                                <core:if test="${!(bSkipRenameACFeatures)}">
                                  <core:set value="Renaming Rally Features and Initiatives to match the Clarity demo data..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <!--
          <core:new className="java.util.HashMap" var="mapPIMoveName"/>
    
          <core:new className="java.util.HashMap" var="mapPIDel"/>
          <core:set var="void" value="${mapPIDel.put('2 ,F26 ,I4 ', 'Realtime chat support')}"/>
          <core:set var="void" value="${mapPIDel.put('3 ,US96    ', 'Save cart for future checkout')}"/>
          -->
                                  <core:new className="java.util.HashMap" var="mapPTRename"/>
                                  <core:new className="java.util.HashMap" var="mapKSRename"/>
                                  <core:new className="java.util.HashMap" var="mapPIDep"/>
                                  <core:new className="java.util.HashMap" var="mapPIWsjf"/>
                                  <core:new className="java.util.HashMap" var="mapPIName"/>
                                  <core:new className="java.util.HashMap" var="mapPINameOld"/>
                                  <core:new className="java.util.HashMap" var="mapPINameNew"/>
                                  <core:new className="java.util.HashMap" var="mapPINewNew"/>
                                  <core:new className="java.util.HashMap" var="mapPIDel"/>
                                  <core:new className="java.util.HashMap" var="mapProjNameNew"/>
                                  <core:new className="java.util.HashMap" var="mapOKRTypes"/>
                                  <core:new className="java.util.HashMap" var="mapOKRState"/>
                                  <core:new className="java.util.HashMap" var="mapOKR_Obj"/>
                                  <core:new className="java.util.HashMap" var="mapOKR_KR"/>
                                  <core:new className="java.util.HashMap" var="mapOKR_Assoc"/>
                                  <core:new className="java.util.HashMap" var="mapPITypNameObjId"/>
                                  <core:new className="java.util.HashMap" var="mapPITypNameOrd"/>
                                  <core:new className="java.util.HashMap" var="mapPITypOrdName"/>
                                  <core:new className="java.util.HashMap" var="mapOTypNameOrd"/>
                                  <core:new className="java.util.HashMap" var="mapOTypOrdName"/>
                                  <core:new className="java.util.HashMap" var="mapOTypOrdObjID"/>
                                  <core:new className="java.util.HashMap" var="mapOTypOrdIDPref"/>
                                  <core:new className="java.util.HashMap" var="mapOTypOrdAWT"/>
                                  <core:if test="${(bUseE2ENames)}">
                                    <!-- Do nothing:
                  Rally data is loaded to a specific Rally Project by E2E demo provisioning scripts authored by Marc Carkeek.
                  Clarity changes are manual. Matt has specific notes.
              -->
                                  </core:if>
                                  <!-- (bUseE2ENames) -->
                                  <core:if test="${(bUseVSMforDemos1603)}">
                                    <core:set value="Using VSMforDemos1603 Data and renames of Rally data..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- Do all of 16.0.0 -->
                                    <core:set value="true" var="bUseVSMforDemos1600"/>
                                    <!-- Testin OKRs, Skip standard processing for now -->
                                    <core:set value="false" var="bUseVSMforDemos1600"/>
                                    <core:set value="true" var="bUseVSMforDemos1600"/>
                                    <!-- Do some 16.0.3 stuff, specifically OKRs -->
                                    <!-- OKR Types -->
                                    <core:set value="${mapOKRTypes.put('BO, 2, Theme'          ,'Business Objective')}" var="void"/>
                                    <core:set value="${mapOKRTypes.put('SO, 1, Epic'           ,'Strategic Objective')}" var="void"/>
                                    <core:set value="${mapOKRTypes.put('TO, 0, Feature'        ,'Team Objective')}" var="void"/>
                                    <!-- OKR States -->
                                    <!-- TO -->
                                    <core:set value="${mapOKRState.put('1 ,1'          ,'Discovering')}" var="void"/>
                                    <core:set value="${mapOKRState.put('1 ,2'          ,'Validating')}" var="void"/>
                                    <core:set value="${mapOKRState.put('1 ,3'          ,'Developing')}" var="void"/>
                                    <core:set value="${mapOKRState.put('1 ,4'          ,'Reviewing')}" var="void"/>
                                    <core:set value="${mapOKRState.put('1 ,5'          ,'Done')}" var="void"/>
                                    <core:set value="${mapOKRState.put('1 ,6'          ,'Archived')}" var="void"/>
                                    <!-- SO -->
                                    <core:set value="${mapOKRState.put('2 ,1'          ,'Planning')}" var="void"/>
                                    <core:set value="${mapOKRState.put('2 ,2'          ,'Validating')}" var="void"/>
                                    <core:set value="${mapOKRState.put('2 ,3'          ,'Analyzing')}" var="void"/>
                                    <core:set value="${mapOKRState.put('2 ,4'          ,'Implementing')}" var="void"/>
                                    <core:set value="${mapOKRState.put('2 ,5'          ,'Archived')}" var="void"/>
                                    <!-- BO -->
                                    <core:set value="${mapOKRState.put('3 ,1'          ,'Discovering')}" var="void"/>
                                    <core:set value="${mapOKRState.put('3 ,2'          ,'Developing')}" var="void"/>
                                    <core:set value="${mapOKRState.put('3 ,3'          ,'Measuring')}" var="void"/>
                                    <core:set value="${mapOKRState.put('3 ,4'          ,'Done')}" var="void"/>
                                    <core:set value="${mapOKRState.put('3 ,5'          ,'Archived')}" var="void"/>
                                    <!-- OKR Objectives -->
                                    <!-- TO -->
                                    <core:set value="${mapOKR_Obj.put('1 , TO1, 0.3, 2021-10-01, 2022-07-31, Developing'    ,'Create comprehensive alert system')}" var="void"/>
                                    <core:set value="${mapOKR_Obj.put('1 , TO2, 0.7, 2021-01-01, 2022-12-01, Validating'    ,'Research trends and align strategy')}" var="void"/>
                                    <core:set value="${mapOKR_Obj.put('1 , TO3, 0.5, 2022-02-01, 2022-08-01, Developing'    ,'Improve Error Handling in Predictive Module')}" var="void"/>
                                    <!-- SO -->
                                    <core:set value="${mapOKR_Obj.put('2 , SO1, 0.8, 2021-07-01, 2022-08-31, Planning'      ,'Harden Security')}" var="void"/>
                                    <core:set value="${mapOKR_Obj.put('2 , SO2, 0.7, 2021-05-01, 2022-02-28, Implementing'  ,'Improve User Adoption')}" var="void"/>
                                    <core:set value="${mapOKR_Obj.put('2 , SO3, 0.5, 2021-11-01, 2022-11-01, Analyzing'     ,'Enhance Customer Experience')}" var="void"/>
                                    <core:set value="${mapOKR_Obj.put('2 , SO4, 0.3, 2021-07-01, 2023-01-31, Analyzing'     ,'Improve Business User Support')}" var="void"/>
                                    <!-- BO -->
                                    <core:set value="${mapOKR_Obj.put('3 , BO1, 0.5, 2021-01-01, 2022-06-01, Analyzing'     ,'Improve Customer Satisfaction by 25%')}" var="void"/>
                                    <!-- OKR Key Results -->
                                    <!-- TO -->
                                    <core:set value="${mapOKR_KR.put('1 , TO1, 1 ,100, 30, 2022-06-26'    ,'Improve alert system notification by 25%')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('1 , TO1, 1 ,100, 55, 2022-06-26'    ,'Add all 150 alert notifications from CAS standard')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('1 , TO2, 1 ,100, 55, 2022-06-26'    ,'update strategy to be a 2 year strategy')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('1 , TO3, 1 ,100, 60, 2022-06-26'    ,'Lower bug reports by 50%')}" var="void"/>
                                    <!-- SO -->
                                    <core:set value="${mapOKR_KR.put('2 , SO1, 1 ,100, 99, 2022-06-26'    ,'Detect all Cloud Based Automated Attacks')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('2 , SO1, 1 ,100, 50, 2022-06-26'    ,'Implement disruptionware processes to prevent emerging threats')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('2 , SO1, 1 ,100, 75, 2022-06-26'    ,'Mitigate Insider Risks created by Work from Home')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('2 , SO2, 1 ,100, 70, 2022-06-26'    ,'Complete self service B2B portal enhancements')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('2 , SO3, 1 ,100, 45, 2022-06-26'    ,'Improve NPS score by 4 points')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('2 , SO3, 1 ,100, 45, 2022-06-26'    ,'Improved sales funnel conversion metrics by 10%')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('2 , SO4, 1 ,100, 30, 2022-06-26'    ,'Complete Self Serve portal 2.0')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('2 , SO4, 1 ,100, 20, 2022-06-26'    ,'Convert in person to online support time by 50%')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('2 , SO4, 1 ,100, 10, 2022-06-26'    ,'Reduce MTTR by 30%')}" var="void"/>
                                    <!-- BO -->
                                    <core:set value="${mapOKR_KR.put('3 , BO1, 1 ,100, 45, 2022-03-26'    ,'NPS score improved by 25%')}" var="void"/>
                                    <core:set value="${mapOKR_KR.put('3 , BO1, 1 ,100, 35, 2022-04-26'    ,'Quarterly survey total satisfaction score improves by 2 points')}" var="void"/>
                                    <!-- OKR Associated Work -->
                                    <!-- TO -->
                                    <core:set value="${mapOKR_Assoc.put('1 ,TO1'          ,'F1')}" var="void"/>
                                    <core:set value="${mapOKR_Assoc.put('1 ,TO1'          ,'F3')}" var="void"/>
                                    <core:set value="${mapOKR_Assoc.put('1 ,TO1'          ,'F7')}" var="void"/>
                                    <core:set value="${mapOKR_Assoc.put('1 ,TO1'          ,'F17')}" var="void"/>
                                    <!-- SO -->
                                    <core:set value="${mapOKR_Assoc.put('2 ,SO1'          ,'E1')}" var="void"/>
                                    <core:set value="${mapOKR_Assoc.put('2 ,SO2'          ,'E1')}" var="void"/>
                                    <core:set value="${mapOKR_Assoc.put('2 ,SO3'          ,'E1')}" var="void"/>
                                    <core:set value="${mapOKR_Assoc.put('2 ,SO4'          ,'E1')}" var="void"/>
                                    <!-- BO -->
                                    <core:set value="${mapOKR_Assoc.put('3 ,BO1'          ,'T1')}" var="void"/>
                                  </core:if>
                                  <!-- (bUseVSMforDemos1603) -->
                                  <core:if test="${(bUseVSMforDemos1600)}">
                                    <core:set value="Using VSMforDemos1600 Renames of Rally data..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- First things first. Rename the Portfolio Item type (Initiative to Epic) -->
                                    <core:set value="${mapPTRename.put('1 ,I ,E ,Initiative ', 'Epic')}" var="void"/>
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <core:set value="${mapPIName.put('T1'  ,'Business to Bank Engagement Strategy')}" var="void"/>
                                    <core:set value="${mapPIName.put('T2'  ,'Simplify Operations &amp; Execution')}" var="void"/>
                                    <core:set value="${mapPIName.put('E1'  ,'NexGen Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPIName.put('E2'  ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPIName.put('E3'  ,'Loan Calculator Tool')}" var="void"/>
                                    <core:set value="${mapPIName.put('E4'  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('E5'  ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPIName.put('E6'  ,'Integrate with API Gateway')}" var="void"/>
                                    <core:set value="${mapPIName.put('E7'  ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPIName.put('E8'  ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPIName.put('E9'  ,'Loan Assist eTransfer')}" var="void"/>
                                    <core:set value="${mapPIName.put('E10' ,'Consumer Portal')}" var="void"/>
                                    <core:set value="${mapPIName.put('E11' ,'Credit Score Highlighting')}" var="void"/>
                                    <!-- New VSM Changes from LMM's Rally workspace -->
                                    <core:set value="${mapPINameOld.put('0, T1 '  ,'Revamp online presence')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('T1'      ,'Business to Bank Engagement Strategy')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('0, T2 '  ,'Create best in class platform')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('T2'      ,'Simplify Operations &amp; Execution')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E1 '  ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E1'      ,'NexGen Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E2 '  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E2'      ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E3 '  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E3'      ,'Loan Calculator Tool')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E4 '  ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E4'      ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E5 '  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E5'      ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E6 '  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E6'      ,'Integrate with API Gateway')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E7 '  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E7'      ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E8 '  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E8'      ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E9 '  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E9'      ,'Loan Assist eTransfer')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E10 ' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E10'     ,'Consumer Portal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E11 ' ,'Consolidate databases')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E11'     ,'Credit Score Highlighting')}" var="void"/>
                                    <!-- Digital Banking - Features -->
                                    <core:set value="${mapPINameOld.put('2, F2 '  ,'Support write API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F2'      ,'Account Management')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F5 '  ,'Online chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F5'      ,'Virtual Assistant')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F12 ' ,'Order Status 2.0')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F12'     ,'Integrate with PayPal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F13 ' ,'Rearchitect User Management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F13'     ,'Authentication and Security')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F26 ' ,'Realtime chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F26'     ,'Financial Planning')}" var="void"/>
                                    <!-- NexGen Fraud Alert - Features -->
                                    <core:set value="${mapPINameOld.put('2, F1 '  ,'Shopping Cart')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F1'      ,'Priority Fraud Alerts')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F9 '  ,'Credit card payments')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F9'      ,'Setup and configuration')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F10 '  ,'Purchase path')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F10'      ,'Network detection and analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F11 '  ,'Priority shipping')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F11'      ,'Alert controls')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F14 '  ,'Creation of cart')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F14'      ,'Creation of security audit trail')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F15 '  ,'Special Offers')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F15'      ,'Security Algorithms')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F16 '  ,'Shopping history')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F16'      ,'Nexgen history')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F17 '  ,'Online refunds')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F17'      ,'Online alert history')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F20 '  ,'Refund management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F20'      ,'Self resolve technology')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F21 '  ,'========^^^^ R2 ^^^^========')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F21'      ,'Original Network Analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F23 '  ,'User Profile')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F23'      ,'User security profile')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F24 '  ,'Credit card error messaging')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F24'      ,'Alert error messaging')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F25 '  ,'Product Listings')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F25'      ,'Premier fraud alert program')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F27 '  ,'Shopping preferences')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F27'      ,'Security preferences')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F29 '  ,'========^^^^ R3 ^^^^========')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F29'      ,'V1 security profile')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F35 '  ,'Integrate with Amex Gateway')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F35'      ,'Integrate with Fed Gateway')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F36 '  ,'Support cash/check by mail')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F36'      ,'Support 5g Wifi')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F37 '  ,'Backorder fulfillment')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F37'      ,'BitCoin Acceptance')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F38 '  ,'Duplcate order fulfillment')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F38'      ,'Identity Monitoring')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F43 '  ,'========^^^^ UNSCHED ^^^^========')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F43'      ,'Peer Fraud Review')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F45 '  ,'Knowledgebase')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F45'      ,'Knowledgebase updates')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F46 '  ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F46'      ,'Website updates')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F49 '  ,'Search for products')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F49'      ,'Mobile fraud alert service')}" var="void"/>
                                    <!-- NexGen Fraud Alert - Stories -->
                                    <core:set value="${mapPINameOld.put('3, US98 '  ,'Purchase Your Items')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US98'      ,'Identity Verification')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US97 '  ,'Shop for Items')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US97'      ,'Fraud contact profile')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US96 '  ,'Save cart for future checkout')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US96'      ,'Save alert history for future use')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US95 '  ,'Recent Purchases View')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US95'      ,'Audit trail verification')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US94 '  ,'Payment - Gift Certificates')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US94'      ,'Secure payments')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US93 '  ,'one-click checkout')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US93'      ,'Alert for different device')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US92 '  ,'Daily deals')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US92'      ,'Daily security report')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US91 '  ,'Customize product list')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US91'      ,'Customize security report')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US90 '  ,'Combine Multiple Items')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US90'      ,'Combine multiple security types')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US89 '  ,'Clone contents from previous cart')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US89'      ,'Clone fraud detection')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US88 '  ,'Add Single Item')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US88'      ,'Add alert')}" var="void"/>
                                    <!-- Feature Dependencies - for Rally Timeline
                Add Dependencies: 15 on 27, 31 on 34
                Add Dependencies: 28 on 16, 17 on 45,48
                If more than one dependent Feature, increment third parameter to make map entry unique.
              -->
                                    <core:set value="${mapPIDep.put('2, F15, 1'  ,'F27')}" var="void"/>
                                    <core:set value="${mapPIDep.put('2, F31, 1'  ,'F34')}" var="void"/>
                                    <core:set value="${mapPIDep.put('2, F28, 1'  ,'F16')}" var="void"/>
                                    <core:set value="${mapPIDep.put('2, F17, 1'  ,'F45')}" var="void"/>
                                    <core:set value="${mapPIDep.put('2, F17, 2'  ,'F48')}" var="void"/>
                                    <!-- Feature WSJF Scores - for Portfolio Kanban
                 WSJF Scores: 3 5 8 13 21 34
              -->
                                    <core:set value="${mapPIWsjf.put('2, F1'   ,'8')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F2'   ,'13')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F3'   ,'3')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F4'   ,'8')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F5'   ,'5')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F7'   ,'8')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F9'   ,'21')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F10'  ,'5')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F11'  ,'13')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F12'  ,'34')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F13'  ,'8')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F14'  ,'13')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F15'  ,'8')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F16'  ,'13')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F22'  ,'13')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F23'  ,'13')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F26'  ,'3')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F44'  ,'13')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F45'  ,'13')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F46'  ,'8')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F47'  ,'8')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F49'  ,'13')}" var="void"/>
                                    <core:set value="${mapPIWsjf.put('2, F50'  ,'5')}" var="void"/>
                                    <!-- NexGen Fraud Alert - Feature State -->
                                    <!--
              Propose: No Entry (Not Active)
              Discover: Funnel
              Develop: Analyzing
              Validate:  Backlog
              Internal Release: Implementing
              Open Beta: Validation
              -->
                                    <core:set value="${mapKSRename.put('1 ,0 ,Propose'          ,'No Entry')}" var="void"/>
                                    <core:set value="${mapKSRename.put('1 ,1 ,Discover'         ,'Funnel')}" var="void"/>
                                    <core:set value="${mapKSRename.put('1 ,1 ,Develop'          ,'Analyzing')}" var="void"/>
                                    <core:set value="${mapKSRename.put('1 ,1 ,Validate'         ,'Backlog')}" var="void"/>
                                    <core:set value="${mapKSRename.put('1 ,1 ,Internal Release' ,'Implementing')}" var="void"/>
                                    <core:set value="${mapKSRename.put('1 ,1 ,Open Beta'        ,'Validation')}" var="void"/>
                                    <!-- NexGen Fraud Alert - Stories Schedule State -->
                                    <!-- Move, example
            <core:set var="void" value="${mapPIMove.put('2 ,F3  ,E5 , E1', 'Knowledgebase')}"/>
            <core:set var="void" value="${mapPIMove.put('2 ,F27 ,I9 , I3', 'Shopping preferences')}"/>
              -->
                                    <!-- Need changes, example ... -->
                                    <!-- Rally Projects, need Parent Project to correctly qualify -->
                                    <!-- We need a mapProjNewNew to create new Projects
            <core:set var="void" value="${mapProjNewNew.put('Clarity'                 ,'AI')}" encode="false"/>
              -->
                                    <!-- NexGen Rally Project Team changes
              Acme, Inc - Training => Training
              Health Services => Services
              Online Store => Business to Bank Engagement 
                Consumer Site => Digital Banking
                  Fulfillment Team => Core Team
                  Payment Team => Mobile Team
                  Shopping Team => Security Team
                Platform:
                  API Team:
                  Architecture Team:
                Reseller Site => Monetary Transfers
                  Analytics Team:
                  Reseller Portal Team:
              -->
                                    <!-- Rally Project Team changes for VSM demo -->
                                    <core:set encode="false" value="${mapProjNameNew.put('Acme, Inc - Training'   ,'Training')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Health Services'        ,'Services')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Online Store'           ,'Business to Bank Engagement')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Consumer Site'          ,'Digital Banking')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Fulfillment Team'       ,'Core Team')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Payment Team'           ,'Mobile Team')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Shopping Team'          ,'Security Team')}" var="void"/>
                                    <!-- no changes here
              <core:set var="void" value="${mapProjNameNew.put('Platform'               ,'Platform')}" encode="false"/>
                <core:set var="void" value="${mapProjNameNew.put('API Team'             ,'API Team')}" encode="false"/>
                <core:set var="void" value="${mapProjNameNew.put('Architecture Team'    ,'Architecture Team')}" encode="false"/>
                -->
                                    <core:set encode="false" value="${mapProjNameNew.put('Reseller Site'          ,'Monetary Transfers')}" var="void"/>
                                    <!-- no changes here
                <core:set var="void" value="${mapProjNameNew.put('Analytics Team'         ,'Analytics Team')}" encode="false"/>
                <core:set var="void" value="${mapProjNameNew.put('Reseller Portal Team'   ,'Reseller Portal Team')}" encode="false"/>
                -->
                                  </core:if>
                                  <!-- (bUseVSMforDemos1600) -->
                                  <core:if test="${(bUseVSMforDemos1593)}">
                                    <core:set value="Using VSMforDemos_15.9.3 Renames of Rally data..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <core:set value="${mapPIName.put('E1'  ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPIName.put('E2'  ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPIName.put('E3'  ,'Trending Assist')}" var="void"/>
                                    <core:set value="${mapPIName.put('E4'  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('E5'  ,'NexGen Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPIName.put('E6'  ,'Integrate with AAPI Gateway')}" var="void"/>
                                    <core:set value="${mapPIName.put('E7'  ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPIName.put('E8'  ,'Loan Assist eTransfer')}" var="void"/>
                                    <core:set value="${mapPIName.put('E9'  ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPIName.put('E10' ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPIName.put('E11' ,'Credit Score Highlighting')}" var="void"/>
                                    <!-- New VSM Changes from Kurt's Rally workspace -->
                                    <core:set value="${mapPINameOld.put('1, E1 '  ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E1'      ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E2 '  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E2'      ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E3 '  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E3'      ,'Trending Assist')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E4 '  ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E4'      ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E5 '  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E5'      ,'NexGen Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E6 '  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E6'      ,'Integrate with AAPI Gateway')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E7 '  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E7'      ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E8 '  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E8'      ,'Loan Calculator Tool')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E9 '  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E9'      ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E10 ' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E10'     ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E11 ' ,'Consolidate databases')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E11'     ,'Credit Score Highlighting')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F2 '  ,'Support write API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F2'      ,'Account Management')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F5 '  ,'Online chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F5'      ,'Virtual Assistant')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F12 ' ,'Order Status 2.0')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F12'     ,'Integrate with PayPal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F13 ' ,'Rearchitect User Management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F13'     ,'Authentication and Security')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F26 ' ,'Realtime chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F26'     ,'Financial Planning')}" var="void"/>
                                  </core:if>
                                  <!-- (bUseVSMforDemos1593) -->
                                  <core:if test="${(bUseVSMforDemosNames)}">
                                    <core:set value="Using VSMforDemos Renames of Rally data..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <core:set value="${mapPIName.put('E1'  ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPIName.put('E2'  ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPIName.put('E3'  ,'Trending Assist')}" var="void"/>
                                    <core:set value="${mapPIName.put('E4'  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('E5'  ,'NexGen Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPIName.put('E6'  ,'Integrate with AAPI Gateway')}" var="void"/>
                                    <core:set value="${mapPIName.put('E7'  ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPIName.put('E8'  ,'Loan Assist eTransfer')}" var="void"/>
                                    <core:set value="${mapPIName.put('E9'  ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPIName.put('E10' ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPIName.put('E11' ,'Credit Score Highlighting')}" var="void"/>
                                    <!-- New VSM Changes from Kurt's Rally workspace -->
                                    <core:set value="${mapPINameOld.put('1, E1 '  ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E1'      ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E2 '  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E2'      ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E3 '  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E3'      ,'Trending Assist')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E4 '  ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E4'      ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E5 '  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E5'      ,'NexGen Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E6 '  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E6'      ,'Integrate with AAPI Gateway')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E7 '  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E7'      ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E8 '  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E8'      ,'Loan Assist eTransfer')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E9 '  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E9'      ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E10 ' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E10'     ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E11 ' ,'Consolidate databases')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E11'     ,'Credit Score Highlighting')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F2 '  ,'Support write API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F2'      ,'Account Management')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F5 '  ,'Online chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F5'      ,'Virtual Assistant')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F12 ' ,'Order Status 2.0')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F12'     ,'Integrate with PayPal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F13 ' ,'Rearchitect User Management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F13'     ,'Authentication and Security')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F26 ' ,'Realtime chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F26'     ,'Financial Planning')}" var="void"/>
                                  </core:if>
                                  <!-- (bUseVSMforDemosNames) -->
                                  <core:if test="${(bUseVSMforDemosNamesOld)}">
                                    <core:set value="Using VSMforDemos Renames of Rally data..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <core:set value="${mapPIName.put('E1'  ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPIName.put('E2'  ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPIName.put('E3'  ,'Loan Calculator Tool')}" var="void"/>
                                    <core:set value="${mapPIName.put('E4'  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('E5'  ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPIName.put('E6'  ,'Integrate with AAPI Gateway')}" var="void"/>
                                    <core:set value="${mapPIName.put('E7'  ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPIName.put('E8'  ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPIName.put('E9'  ,'V4.0 Loan Assist')}" var="void"/>
                                    <core:set value="${mapPIName.put('E10' ,'Consumer Portal')}" var="void"/>
                                    <core:set value="${mapPIName.put('E11' ,'Credit Score Highlighting')}" var="void"/>
                                    <!-- New VSM Changes from Kurt's Rally workspace -->
                                    <core:set value="${mapPINameOld.put('1, E1 '  ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E1'      ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E2 '  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E2'      ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E3 '  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E3'      ,'Loan Calculator Tool')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E4 '  ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E4'      ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E5 '  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E5'      ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E6 '  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E6'      ,'Integrate with AAPI Gateway')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E7 '  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E7'      ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E8 '  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E8'      ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E9 '  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E9'      ,'V4.0 Loan Assist')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E10 ' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E10'     ,'Consumer Portal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E11 ' ,'Consolidate databases')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E11'     ,'Credit Score Highlighting')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F2 '  ,'Support write API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F2'      ,'Account Management')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F5 '  ,'Online chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F5'      ,'Virtual Assistant')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F12 ' ,'Order Status 2.0')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F12'     ,'Integrate with PayPal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F13 ' ,'Rearchitect User Management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F13'     ,'Authentication and Security')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F26 ' ,'Realtime chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F26'     ,'Financial Planning')}" var="void"/>
                                  </core:if>
                                  <!-- (bUseVSMforDemosNamesOld) -->
                                  <core:if test="${(bUseVSM1592Names)}">
                                    <core:set value="Using VSM Summit Renames of Rally data..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!--
              GET
    
              https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition?
                order=Ordinal Desc,ObjectID
                &query=((Parent.Name = "Portfolio Item") AND (Creatable = "true"))
                &fetch=ObjectID,Project,Name,IDPrefix
                &workspace=/workspace/600113959953
    
              https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition?order=Ordinal Desc,ObjectID&query=((Parent.Name = "Portfolio Item") AND (Creatable = "true"))&fetch=ObjectID,Project,Name,IDPrefix&workspace=/workspace/600113959953
    
              {
              	"QueryResult": {
              		"_rallyAPIMajor": "2",
              		"_rallyAPIMinor": "0",
              		"Errors": [],
              		"Warnings": [],
              		"TotalResultCount": 3,
              		"StartIndex": 1,
              		"PageSize": 20,
              		"Results": [
              			{
              				"_rallyAPIMajor": "2",
              				"_rallyAPIMinor": "0",
              				"_ref": "https://rally1.rallydev.com/slm/webservice/v2.x/typedefinition/600114182437",
              				"_refObjectUUID": "18136d85-8f14-4124-a2c4-f9c4eedf82d1",
              				"_objectVersion": "1",
              				"_refObjectName": "Theme",
              				"ObjectID": 600114182437,
              				"IDPrefix": "T",
              				"Name": "Theme",
              				"_type": "TypeDefinition"
              			},
              			{
              				"_rallyAPIMajor": "2",
              				"_rallyAPIMinor": "0",
              				"_ref": "https://rally1.rallydev.com/slm/webservice/v2.x/typedefinition/600113961173",
              				"_refObjectUUID": "4ebaa82d-f9c8-4577-916c-bec3bce88a4c",
              				"_objectVersion": "3",
              				"_refObjectName": "Epic",
              				"ObjectID": 600113961173,
              				"IDPrefix": "E",
              				"Name": "Epic",
              				"_type": "TypeDefinition"
              			},
              			{
              				"_rallyAPIMajor": "2",
              				"_rallyAPIMinor": "0",
              				"_ref": "https://rally1.rallydev.com/slm/webservice/v2.x/typedefinition/600113961141",
              				"_refObjectUUID": "775def3d-01b2-46fc-b446-5a6f1e2962bb",
              				"_objectVersion": "1",
              				"_refObjectName": "Feature",
              				"ObjectID": 600113961141,
              				"IDPrefix": "F",
              				"Name": "Feature",
              				"_type": "TypeDefinition"
              			}
              		]
              	}
              }
    
    
              POST
              /slm/webservice/v2.x/TypeDefinition/600113961173
              https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition/600113961173?
              fetch=ObjectID,Project,Name,Workspace,IDPrefix
              &includePermissions=true
              &compact=true
              &project=/project/600113969207
              &projectScopeUp=true
              &projectScopeDown=true
              &key=799aee1b-f4a0-4eb2-9845-df232228f9b9
              &_slug=/detail/workspace/600113959953/fields
    
              {"TypeDefinition":{"Name":"Epic"}}
    
              POST
              https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition/600113961173?
              fetch=ObjectID,Project,Name,Workspace,IDPrefix
              &includePermissions=true
              &compact=true
              &project=/project/600113969207
              &projectScopeUp=true
              &projectScopeDown=true
              &key=799aee1b-f4a0-4eb2-9845-df232228f9b9
              &_slug=/detail/workspace/600113959953/fields
    
              {"TypeDefinition":{"IDPrefix":"E"}}
    
              -->
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <core:set value="${mapPIName.put('E1'  ,'NexGen Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPIName.put('E2'  ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPIName.put('E3'  ,'Loan Calculator Tool')}" var="void"/>
                                    <core:set value="${mapPIName.put('E4'  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('E5'  ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPIName.put('E6'  ,'Integrate with AAPI Gateway')}" var="void"/>
                                    <core:set value="${mapPIName.put('E7'  ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPIName.put('E8'  ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPIName.put('E9'  ,'Loan Assist eTransfer')}" var="void"/>
                                    <core:set value="${mapPIName.put('E10' ,'Consumer Portal')}" var="void"/>
                                    <core:set value="${mapPIName.put('E11' ,'Credit Score Highlighting')}" var="void"/>
                                    <!-- New VSM Changes from Kurt's Rally workspace -->
                                    <core:set value="${mapPINameOld.put('1, E1 '  ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E1'      ,'NexGen Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E2 '  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E2'      ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E3 '  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E3'      ,'Loan Calculator Tool')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E4 '  ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E4'      ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E5 '  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E5'      ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E6 '  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E6'      ,'Integrate with AAPI Gateway')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E7 '  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E7'      ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E8 '  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E8'      ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E9 '  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E9'      ,'Loan Assist eTransfer')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E10 ' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E10'     ,'Consumer Portal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E11 ' ,'Consolidate databases')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E11'     ,'Credit Score Highlighting')}" var="void"/>
                                    <!-- Digital Banking -->
                                    <core:set value="${mapPINameOld.put('2, F1 '  ,'Shopping Cart')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F1'      ,'Priority Fraud Alerts')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F2 '  ,'Support write API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F2'      ,'Account Management')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F5 '  ,'Online chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F5'      ,'Virtual Assistant')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F9 '  ,'Credit card payments')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F9'      ,'Setup and configuration')}" var="void"/>
                                    <!-- NexGen Fraud Alert - Features -->
                                    <core:set value="${mapPINameOld.put('2, F10 '  ,'Purchase path')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F10'      ,'Network detection and analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F11 '  ,'Priority shipping')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F11'      ,'Alert controls')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F12 '  ,'Order Status 2.0')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F12'      ,'Integrate with Paypal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F13 '  ,'Rearchitect User Management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F13'      ,'Authentication and Security')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F14 '  ,'Creation of cart')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F14'      ,'Creation of security audit trail')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F15 '  ,'Special Offers')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F15'      ,'Security Algorithms')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F16 '  ,'Shopping history')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F16'      ,'Nexgen history')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F17 '  ,'Online refunds')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F17'      ,'Online alert history')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F20 '  ,'Refund management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F20'      ,'Self resolve technology')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F21 '  ,'========^^^^ R2 ^^^^========')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F21'      ,'Original Network Analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F23 '  ,'User Profile')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F23'      ,'User security profile')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F24 '  ,'Credit card error messaging')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F24'      ,'Alert error messaging')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F25 '  ,'Product Listings')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F25'      ,'Premier fraud alert program')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F26 '  ,'Realtime chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F26'      ,'Financial Planning')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F27 '  ,'Shopping preferences')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F27'      ,'Security preferences')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F29 '  ,'========^^^^ R3 ^^^^========')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F29'      ,'V1 security profile')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F35 '  ,'Integrate with Amex Gateway')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F35'      ,'Integrate with Fed Gateway')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F36 '  ,'Support cash/check by mail')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F36'      ,'Support 5g Wifi')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F37 '  ,'Backorder fulfillment')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F37'      ,'BitCoin Acceptance')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F38 '  ,'Duplcate order fulfillment')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F38'      ,'Identity Monitoring')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F43 '  ,'========^^^^ UNSCHED ^^^^========')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F43'      ,'Peer Fraud Review')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F45 '  ,'Knowledgebase')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F45'      ,'Knowledgebase updates')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F46 '  ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F46'      ,'Website updates')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F49 '  ,'Search for products')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F49'      ,'Mobile fraud alert service')}" var="void"/>
                                    <!-- NexGen Fraud Alert - Stories -->
                                    <core:set value="${mapPINameOld.put('3, US98 '  ,'Purchase Your Items')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US98'      ,'Identity Verification')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US97 '  ,'Shop for Items')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US97'      ,'Fraud contact profile')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US96 '  ,'Save cart for future checkout')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US96'      ,'Save alert history for future use')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US95 '  ,'Recent Purchases View')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US95'      ,'Audit trail verification')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US94 '  ,'Payment - Gift Certificates')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US94'      ,'Secure payments')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US93 '  ,'one-click checkout')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US93'      ,'Alert for different device')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US92 '  ,'Daily deals')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US92'      ,'Daily security report')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US91 '  ,'Customize product list')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US91'      ,'Customize security report')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US90 '  ,'Combine Multiple Items')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US90'      ,'Combine multiple security types')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US89 '  ,'Clone contents from previous cart')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US89'      ,'Clone fraud detection')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('3, US88 '  ,'Add Single Item')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('US88'      ,'Add alert')}" var="void"/>
                                    <!-- NexGen Fraud Alert - Stories Schedule State -->
                                    <!-- Move, example
            <core:set var="void" value="${mapPIMove.put('2 ,F3  ,E5 , E1', 'Knowledgebase')}"/>
            <core:set var="void" value="${mapPIMove.put('2 ,F27 ,I9 , I3', 'Shopping preferences')}"/>
              -->
                                    <!-- Themes, example
            <core:set var="void" value="${mapPINameOld.put('0, T1 '  ,'Revamp online presence')}"/>
            <core:set var="void" value="${mapPINameNew.put('T1'      ,'Business to Bank Engagement')}"/>
            <core:set var="void" value="${mapPINameOld.put('0, T2 '  ,'Create best in class platform')}"/>
            <core:set var="void" value="${mapPINameNew.put('T2'      ,'Refresh Technology')}"/>
              -->
                                    <!-- Need changes for... -->
                                    <!-- Rally Projects, need Parent Project to correctly qualify -->
                                    <!-- We need a mapProjNewNew to create new Projects
            <core:set var="void" value="${mapProjNewNew.put('Clarity'                 ,'AI')}" encode="false"/>
              -->
                                    <!-- NexGen Rally Project Team changes
              Acme, Inc - Training => Training
              Health Services => Services
              Online Store => Business to Bank Engagement 
                Consumer Site => Digital Banking
                  Fulfillment Team => Core Team
                  Payment Team => Mobile Team
                  SHopping Team => Security Team
                Platform:
                  API Team:
                  Architecture Team:
                Reseller Site => Monetary Transfers
                  Analytics Team:
                  Reseller Portal Team:
                -->
                                    <core:set encode="false" value="${mapProjNameNew.put('Acme, Inc - Training'   ,'Training')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Health Services'        ,'Services')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Online Store'           ,'Business to Bank Engagement')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Consumer Site'          ,'Digital Banking')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Fulfillment Team'       ,'Core Team')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Payment Team'           ,'Mobile Team')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Shopping Team'          ,'Security Team')}" var="void"/>

                                    <!-- no changes here
              <core:set var="void" value="${mapProjNameNew.put('Platform'               ,'Platform')}" encode="false"/>
                <core:set var="void" value="${mapProjNameNew.put('API Team'             ,'API Team')}" encode="false"/>
                <core:set var="void" value="${mapProjNameNew.put('Architecture Team'    ,'Architecture Team')}" encode="false"/>
                --> no changes here
              <core:set encode="false" value="${mapProjNameNew.put('Reseller Site'          ,'Monetary Transfers')}" var="void"/>
                                    <!--
                <core:set var="void" value="${mapProjNameNew.put('Analytics Team'         ,'Analytics Team')}" encode="false"/>
                <core:set var="void" value="${mapProjNameNew.put('Reseller Portal Team'   ,'Reseller Portal Team')}" encode="false"/>
                -->
                                    <!-- Releases -->
                                    <!-- Milestones -->
                                    <!-- Iterations -->
                                    <!-- PI State for Initiatives -->
                                    <!-- Move Features to other Releases -->
                                    <!-- MJS  Start here for creating new Feature. 
                Look for existing object based on Name and Parent_FormatID
                If not found, create it...
                Look for model object based on FormatID and Parent_FormatID
                Pull out specific values for existing object for new object JSON
                Create new Rally Object
                Connect to existing Clarity Task ??
            -->
                                  </core:if>
                                  <!-- (bUseVSM1592Names) -->
                                  <core:if test="${(bUseVSM1592NameReset)}">
                                    <core:set value="Using VSM Summit Rename RESET..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <core:set value="${mapPIName.put('E1'  ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPIName.put('E2'  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPIName.put('E3'  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('E4'  ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPIName.put('E5'  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPIName.put('E6'  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPIName.put('E7'  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('E8'  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPIName.put('E9'  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('E10' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPIName.put('E11' ,'Consolidate databases')}" var="void"/>
                                    <!-- New VSM Changes from Kurt's Rally workspace -->
                                    <core:set value="${mapPINameOld.put('1, E1 '  ,'V3.0 Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E1'      ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E2 '  ,'Build read-write API for handling loan applications')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E2'      ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E3 '  ,'Loan Calculator Tool')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E3'      ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E4 '  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E4'      ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E5 '  ,'Trending Assist')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E5'      ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E6 '  ,'Integrate with AAPI Gateway')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E6'      ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E7 '  ,'Homepage')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E7'      ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E8 '  ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E8'      ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E9 '  ,'V4.0 Loan Assist')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E9'      ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E10 ' ,'Consumer Portal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E10'     ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, E11 ' ,'Credit Score Highlighting')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('E11'     ,'Consolidate databases')}" var="void"/>
                                  </core:if>
                                  <!-- (bUseVSM1592NameReset) -->
                                  <core:if test="${(bUseKlean1591Names)}">
                                    <core:set value="Using Klean 15.9.1 (15.7) dataset Renames of Rally Features..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <core:set value="${mapPIName.put('I1'  ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPIName.put('I2'  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPIName.put('I3'  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I4'  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I5'  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPIName.put('I6'  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPIName.put('I7'  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I8'  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPIName.put('I9'  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I10' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPIName.put('I11' ,'Consolidate databases')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I1 '  ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I1'      ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I4 '  ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I4'      ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F2 '  ,'Support write API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F2'      ,'Account Management')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F5 '  ,'Online chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F5'      ,'Virtual Assistant')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F12 ' ,'Order Status 2.0')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F12'     ,'Integrate with PayPal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F13 ' ,'Rearchitect User Management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F13'     ,'Authentication and Security')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F26 ' ,'Realtime chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F26'     ,'Financial Planning')}" var="void"/>
                                    <core:set value="${mapPIDel.put('3 ,US49    ', 'Return Items')}" var="void"/>
                                    <!-- MJS  Start here for creating new Feature. 
                Look for existing object based on Name and Parent_FormatID
                If not found, create it...
                Look for model object based on FormatID and Parent_FormatID
                Pull out specific values for existing object for new object JSON
                Create new Rally Object
                Connect to existing Clarity Task ??
            -->
                                  </core:if>
                                  <!-- !(bUseKlean1591Names) -->
                                  <core:if test="${(bUseKlean1591NameReset)}">
                                    <core:set value="Using Klean 15.9.1 name RESET ..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <core:set value="${mapPIName.put('I1'  ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPIName.put('I2'  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPIName.put('I3'  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I4'  ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPIName.put('I5'  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPIName.put('I6'  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPIName.put('I7'  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I8'  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPIName.put('I9'  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I10' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPIName.put('I11' ,'Consolidate databases')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I1 '  ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I1'      ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I4 '  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I4'      ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F2 '  ,'Account Management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F2'      ,'Support write API')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F5 '  ,'Virtual Assistant')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F5'      ,'Online chat support')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F12 ' ,'Integrate with PayPal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F12'     ,'Order Status 2.0')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F13 ' ,'Authentication and Security')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F13'     ,'Rearchitect User Management')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F26 ' ,'Financial Planning')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F26'     ,'Realtime chat support')}" var="void"/>
                                    <core:set value="${mapPIDel.put('3 ,US49    ', 'Return Items')}" var="void"/>
                                    <!-- MJS  Start here for creating new Feature. 
                Look for existing object based on Name and Parent_FormatID
                If not found, create it...
                Look for model object based on FormatID and Parent_FormatID
                Pull out specific values for existing object for new object JSON
                Create new Rally Object
                Connect to existing Clarity Task ??
            -->
                                  </core:if>
                                  <!-- !(bUseKlean1591NameReset) -->
                                  <core:if test="${(bUseNewDPMFeatureNames)}">
                                    <core:set value="Using New DPM Renames of Rally Features..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <!-- Brian and Kurt - DPM -->
                                    <core:set value="${mapPIName.put('I1'  ,'Mobile Approvals - Time Entry')}" var="void"/>
                                    <core:set value="${mapPIName.put('I2'  ,'GCP Migration')}" var="void"/>
                                    <core:set value="${mapPIName.put('I3'  ,'Digital Product Management Content')}" var="void"/>
                                    <core:set value="${mapPIName.put('I4'  ,'Team-Based Planning')}" var="void"/>
                                    <core:set value="${mapPIName.put('I5'  ,'Provide ability to Secure fields in Custom Inv')}" var="void"/>
                                    <core:set value="${mapPIName.put('I6'  ,'Roadmap Multi-select Import Improvement')}" var="void"/>
                                    <core:set value="${mapPIName.put('I7'  ,'Digital Product Mgt Rally Integration')}" var="void"/>
                                    <core:set value="${mapPIName.put('I8'  ,'Staffing Workspace')}" var="void"/>
                                    <core:set value="${mapPIName.put('I9'  ,'Benefit Plans - all Investments')}" var="void"/>
                                    <core:set value="${mapPIName.put('I10' ,'Links Modules for Ideas')}" var="void"/>
                                    <core:set value="${mapPIName.put('I11' ,'Hours / FTE / Days Support Everywhere')}" var="void"/>
                                    <!-- Changes if we have already run our normal rename -->
                                    <!--
            <core:set var="void" value="${mapPINameOld.put('1, I1 '  ,'Minimal Online Shopping Release 4.0')}"/>
            <core:set var="void" value="${mapPINameNew.put('I1'      ,'Mobile Approvals - Time Entry')}"/>
            <core:set var="void" value="${mapPINameOld.put('1, I4 '  ,'Digital Banking User Experience')}"/>
            <core:set var="void" value="${mapPINameNew.put('I4'      ,'Team-Based Planning')}"/>
              -->
                                    <!-- Changes if we have already run our normal rename -->
                                    <!--
            <core:set var="void" value="${mapPINameOld.put('2, F2 '  ,'Account Management')}"/>
            <core:set var="void" value="${mapPINameNew.put('F2'      ,'Allocate TBH resources to a Team')}"/>
            <core:set var="void" value="${mapPINameOld.put('2, F5 '  ,'Virtual Assistant')}"/>
            <core:set var="void" value="${mapPINameNew.put('F5'      ,'Replace TBH with named resource')}"/>
            <core:set var="void" value="${mapPINameOld.put('2, F12 ' ,'Integrate with PayPal')}"/>
            <core:set var="void" value="${mapPINameNew.put('F12'     ,'Staffing (a.k.a. resource management) - Team Allocation')}"/>
            <core:set var="void" value="${mapPINameOld.put('2, F13 ' ,'Authentication and Security')}"/>
            <core:set var="void" value="${mapPINameNew.put('F13'     ,'Projects - Staff  - Allocate resources to a project via Resource OBS')}"/>
            <core:set var="void" value="${mapPINameOld.put('2, F26 ' ,'Financial Planning')}"/>
            <core:set var="void" value="${mapPINameNew.put('F26'     ,'When staffing a Role, use a default value to set Requested Manager field')}"/>
              -->
                                    <!-- New DPM Changes from Brian's Rally workspace -->
                                    <core:set value="${mapPINameOld.put('1, I1 '  ,'Minimal online shopping site')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I1'      ,'Mobile Approvals - Time Entry')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I2 '  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I2'      ,'GCP Migration')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I3 '  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I3'      ,'Digital Product Management Content')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I4 '  ,'Modernize customer service portal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I4'      ,'Team-Based Planning')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I5 '  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I5'      ,'Provide ability to Secure fields in Custom Inv')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I6 '  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I6'      ,'Roadmap Multi-select Import Improvement')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I7 '  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I7'      ,'Digital Product Mgt Rally Integration')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I8 '  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I8'      ,'Staffing Workspace')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I9 '  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I9'      ,'Benefit Plans - all Investments')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I10 ' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I10'     ,'Links Modules for Ideas')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I11 ' ,'Consolidate databases')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I11'     ,'Hours / FTE / Days Support Everywhere')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F2 '  ,'Support write API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F2'      ,'Allocate TBH resources to a Team')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F5 '  ,'Online chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F5'      ,'Replace TBH with named resource')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F12 ' ,'Order Status 2.0')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F12'     ,'Staffing (a.k.a. resource management) - Team Allocation')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F13 ' ,'Rearchitect User Management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F13'     ,'Projects - Staff  - Allocate resources to a project via Resource OBS')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F26 ' ,'Realtime chat support')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F26'     ,'When staffing a Role, use a default value to set Requested Manager field')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F1 '  ,'Shopping Cart')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F1'      ,'Workspace for All Investment Types (CIT, Projects and Ideas)')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F9 '  ,'Credit card payments')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F9'      ,'Charts in AG Grid with All Data Types')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F10 ' ,'Purchase path')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F10'     ,'Flyout:  Assignments Module')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F11 ' ,'Priority shipping')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F11'     ,'Field Level Security/Visibility (View/Edit)')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F17 ' ,'Online refunds')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F17'     ,'MS SQL Server 2017 Certification')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F18 ' ,'Integrate with Paypal')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F18'     ,'Timesheets: Add Remaining Classic Fields')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F19 ' ,'Integrate with WePay')}" var="void"/>
                                    <core:set encode="false" value="${mapPINameNew.put('F19'     ,'MSP Integration - Support for copy &amp; paste of tasks')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F20 ' ,'Refund management')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F20'     ,'OBS Support for Custom Investments')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F23 ' ,'User Profile')}" var="void"/>
                                    <core:set encode="false" value="${mapPINameNew.put('F23'     ,'Add Project ID filter to Tasks &amp; To Do Scoreboard')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F24 ' ,'Credit card error messaging')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F24'     ,'Custom Investments: STAFF Module')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F25 ' ,'Product Listings')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('F25'     ,'Update email template for notifications')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F48 ' ,'Returned shipments')}" var="void"/>
                                    <core:set encode="false" value="${mapPINameNew.put('F48'     ,'MSP Lightweight &amp; One-Way Integration Options')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('2, F6 '  ,'Realtime notifications')}" var="void"/>
                                    <core:set encode="false" value="${mapPINameNew.put('F6'      ,'Add Resource Location Parameter to Post Timesheets Job')}" var="void"/>
                                    <!-- MJS continue here... Change Standard Rally demo data names to Brians new DPM Initiatives/Features -->
                                    <!-- Need changes for... -->
                                    <!-- Rally Projects, need Parent Project -->
                                    <!--
            x_Rally Project renames
              Acme, Inc - Training -> DX NetOps
              Health Services -> Rally
              Online Store -> Clarity
               from [Reseller Portal Team] to [Astronauts]
               from [Consumer Site] to [Blackhawks]
               from [Fulfillment Team] to [Jaguars]
               from [Analytics Team] to [Security]
               from [Platform] to [Crushers]
                 from [API Team] to [API]
                 from [Architecture Team] to [UX]
               from [Shopping Team] to [Nighthawks]
               from [Payment Team] to [Mobile]
               from [Reseller Site] to [Digital]
               new [AI]
               from [Acme, Inc - Training] to [DX NetOps]
               from [Health Services] to [Rally]
            -->
                                    <core:set encode="false" value="${mapProjNameNew.put('Acme, Inc - Training'     ,'DX NetOps')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Health Services'          ,'Rally')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Online Store'             ,'Clarity')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Reseller Portal Team'   ,'Astronauts')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Consumer Site'          ,'Blackhawks')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Fulfillment Team'       ,'Jaguars')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Analytics Team'         ,'Security')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Platform'               ,'Crushers')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('API Team'             ,'API')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Architecture Team'    ,'UX')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Shopping Team'          ,'Nighthawks')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Payment Team'           ,'Mobile')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Reseller Site'          ,'Digital')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Acme, Inc - Training'   ,'DX NetOps')}" var="void"/>
                                    <core:set encode="false" value="${mapProjNameNew.put('Health Services'        ,'Rally')}" var="void"/>
                                    <!-- We need a ProjNewNew to create new Projects
              <core:set var="void" value="${mapProjNewNew.put('Clarity'                 ,'AI')}" encode="false"/>
                -->
                                    <!-- Releases -->
                                    <!-- Milestones -->
                                    <!-- Iterations -->
                                    <!-- PI State for Initiatives -->
                                    <!-- Move Features to other Releases -->
                                    <!-- MJS  Start here for creating new Feature. 
                Look for existing object based on Name and Parent_FormatID
                If not found, create it...
                Look for model object based on FormatID and Parent_FormatID
                Pull out specific values for existing object for new object JSON
                Create new Rally Object
                Connect to existing Clarity Task ??
            -->
                                  </core:if>
                                  <!-- (bUseNewDPMFeatureNames) -->
                                  <core:if test="${(bUseKlean1581Names)}">
                                    <core:set value="Using 15.8.1 Klean dataset Roadmap-to-Rally Initiative and Feature names..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <!-- 15.8.1 DPM Loan Application Product Roadmap changes included here -->
                                    <core:set value="${mapPIName.put('I1'  ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPIName.put('I2'  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPIName.put('I3'  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I4'  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I5'  ,'V3.0 Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPIName.put('I6'  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPIName.put('I7'  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I8'  ,'Trending Assist')}" var="void"/>
                                    <core:set value="${mapPIName.put('I9'  ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPIName.put('I10' ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPIName.put('I11' ,'Consolidate databases')}" var="void"/>
                                    <!-- New 15.8.1 Roadmap-to-Rally integraiton changes -->
                                    <core:set value="${mapPINameOld.put('1, I9 '  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I9'      ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I5 '  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I5'      ,'V3.0 Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I10 ' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I10'     ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I8 '  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I8'      ,'Trending Assist')}" var="void"/>
                                    <!-- Move demo data to get some progress on other Initiatives -->
                                    <core:set value="${mapPIMove.put('2 ,F45 ,I1 , I8', 'Knowledgebase')}" var="void"/>
                                    <core:set value="${mapPIMove.put('2 ,F27 ,I3 , I9', 'Shopping preferences')}" var="void"/>
                                    <!-- Update Story to Accepted, with Plan Estimate -->
                                    <!-- TODO
              US3, Support USPS Shipping - Schedule State = Accept, Plan Estimate = 1
              -->
                                    <!-- Releases -->
                                    <!-- Milestones -->
                                    <!-- Iterations -->
                                    <!-- PI State for Initiatives -->
                                    <!-- Move Features to other Releases -->
                                    <!-- MJS  Start here for creating new Feature. 
                Look for existing object based on Name and Parent_FormatID
                If not found, create it...
                Look for model object based on FormatID and Parent_FormatID
                Pull out specific values for existing object for new object JSON
                Create new Rally Object
                Connect to existing Clarity Task ??
            -->
                                  </core:if>
                                  <!-- (bUseKlean1581Names) -->
                                  <core:if test="${(bUseKlean1581NameReset)}">
                                    <core:set value="Using 15.8.1 Klean dataset RESET..." var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <!-- ____________________________________________________ -->
                                    <!-- These are temporary Formated IDs for the PIs. Names are used to find the real PI FmtIDs for top level PIs (Initiatives) -->
                                    <!-- 15.8.1 DPM Loan Application Product Roadmap changes included here -->
                                    <core:set value="${mapPIName.put('I1'  ,'Minimal Online Shopping Release 4.0')}" var="void"/>
                                    <core:set value="${mapPIName.put('I2'  ,'Build read-write API for handling orders')}" var="void"/>
                                    <core:set value="${mapPIName.put('I3'  ,'Personalized online shopping experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I4'  ,'Digital Banking User Experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I5'  ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPIName.put('I6'  ,'Re-build primary web app to use API')}" var="void"/>
                                    <core:set value="${mapPIName.put('I7'  ,'Integrate in-store and online experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I8'  ,'Integrate into Facebook')}" var="void"/>
                                    <core:set value="${mapPIName.put('I9'  ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPIName.put('I10' ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPIName.put('I11' ,'Consolidate databases')}" var="void"/>
                                    <!-- New 15.8.1 Roadmap-to-Rally integraiton changes -->
                                    <core:set value="${mapPINameOld.put('1, I9 '  ,'Credit Scoring')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I9'      ,'Integrate social into shopping experience')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I5 '  ,'V3.0 Fraud Alert System')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I5'      ,'Maintain legacy purchasing system')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I10 ' ,'Commercial Credit Analysis')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I10'     ,'Create a read-only API')}" var="void"/>
                                    <core:set value="${mapPINameOld.put('1, I8 '  ,'Trending Assist')}" var="void"/>
                                    <core:set value="${mapPINameNew.put('I8'      ,'Integrate into Facebook')}" var="void"/>
                                    <!-- Move demo data to get some progress on other Initiatives -->
                                    <core:set value="${mapPIMove.put('2 ,F45 ,I8 , I1', 'Knowledgebase')}" var="void"/>
                                    <core:set value="${mapPIMove.put('2 ,F27 ,I9 , I3', 'Shopping preferences')}" var="void"/>
                                  </core:if>
                                  <!-- (bUseKlean1581NameReset) -->
                                  <!-- Unused, not yet coded -->
                                  <!-- Type, Parent, Model -->
                                  <!--
          <core:set var="void" value="${mapPINetNew.put('2, I4, F12 ','Integrate with WePay')}"/>
            -->
                                  <!--
            { "Feature": { "Parent": "140509207648" } }
            {
            "Name": "Integrate with WePay",
            "Parent": { from F12
            "Project": { from F12
            "PlannedEndDate": { from F12
            "PlannedStartDate": { from F12
            "PortfolioItemType": { "Feature"  ??
            "PortfolioItemType": { from F12, _refObjectName _refObjectUUID ??
    
            "PlannedEndDate": "2020-01-27T06:59:59.000Z",
            "PlannedStartDate": "2019-09-11T06:00:00.000Z",
            "PortfolioItemType": {
             "_rallyAPIMajor": "2",
             "_rallyAPIMinor": "0",
             "_ref": "https://us1.rallydev.com/slm/webservice/v2.0/typedefinition/351213783052",
             "_refObjectName": "Initiative",
             "_refObjectUUID": "04567070-62ea-4546-9df5-d6b5f2de0777",
             "_type": "TypeDefinition"
            },
            "PortfolioItemTypeName": "Initiative",
            },
            -->
                                  <!-- Search by FormattedID and parent FormattedID -->
                                  <!-- 
            <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(((FormattedID${myBlnk}=${myBlnk}"${arrPIcode1}"))${myBlnk}AND${myBlnk}(Parent.FormattedID${myBlnk}=${myBlnk}"${arrPIcode2}"))</core:set>
            </core:if>
              -->
                                  <!-- Search by Name and parent FormattedID -->
                                  <!--
            <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(Parent.FormattedID${myBlnk}=${myBlnk}"${arrPIcode2}"))</core:set>
            </core:if>
            -->
                                  <!--
          <core:set var="void" value="${mapPIMoveName.put('I1', 'Minimal online shopping site' )}"/>
          <core:set var="void" value="${mapPIMoveName.put('I4', 'Modernize customer service portal' )}"/>
          <core:set var="void" value="${mapPIMoveName.put('I5', 'Maintain legacy purchasing system' )}"/>
            -->
                                  <core:set value="" var="savWrk"/>
                                  <!-- Workspace - Get the ObjectIDs for all workspaces -->
                                  <core:set value="${mapRRCodeWrk.keySet()}" var="keysetRRCodeWrk"/>
                                  <core:set value="${keysetRRCodeWrk.iterator()}" var="keyRRCodeWrk"/>
                                  <core:while test="${keyRRCodeWrk.hasNext()}">
                                    <core:set value="${keyRRCodeWrk.next()}" var="tmpRRcode"/>
                                    <core:set value="${mapRRCodeWrk.get(tmpRRcode)}" var="tmpWrk"/>
                                    <core:set value="${tmpWrk.trim()}" var="tmpWrk"/>
                                    <core:set value="${mapRRCodeURL.get(tmpRRcode)}" var="RallyHost"/>
                                    <core:set value="${mapRRCodeAuthType.get(tmpRRcode)}" var="v_RRauth_type"/>
                                    <core:set value="${mapRRCodeIsActive.get(tmpRRcode)}" var="v_RRis_active"/>
                                    <core:set value="${mapRRCodeKey.get(tmpRRcode)}" var="v_RRapi_key"/>
                                    <core:set value="${mapRRCodeEnc.get(tmpRRcode)}" var="v_RRencoded"/>
                                    <core:set value="${mapRRCodeWrkID.get(tmpRRcode)}" var="v_RRworkspace"/>
                                    <core:set value="${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RRprj_pi_type"/>
                                    <core:set value="${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RRtsk_pi_type"/>
                                    <core:if test="${bDebug}">
                                      <gel:out/>
                                      <gel:out trim="false">Workspace: tmpRRcode[${tmpRRcode}] tmpWrk[${tmpWrk}] v_RRworkspace[${v_RRworkspace}]  v_RRis_active(${v_RRis_active}) v_RRauth_type(${v_RRauth_type}) v_RRencoded(${v_RRencoded}) v_RRprj_pi_type(${v_RRprj_pi_type}) v_RRtsk_pi_type(${v_RRtsk_pi_type})  </gel:out>
                                    </core:if>
                                    <core:if test="${(tmpWrk != null)}">
                                      <!-- AND -->
                                      <core:if test="${bDebug}">
                                        <gel:out trim="false">tmpWrk[${tmpWrk}] </gel:out>
                                      </core:if>
                                      <core:if test="${bDebug}">
                                        <gel:out trim="false">savWrk[${savWrk}] </gel:out>
                                      </core:if>
                                      <core:if test="${!(tmpWrk.equals(savWrk))}">
                                        <!-- Only if we did not yet process this workspace -->
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">!(tmpWrk.equals(savWrk)) </gel:out>
                                        </core:if>
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">tmpWrk[${tmpWrk}] </gel:out>
                                        </core:if>
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">savWrk[${savWrk}] </gel:out>
                                        </core:if>
                                        <core:set value="${tmpWrk}" var="savWrk"/>
                                        <core:set value="" var="PIPar_Name"/>
                                        <core:set value="" var="PIPar_ObjectID"/>
                                        <core:set value="" var="PIPar_UUID"/>
                                        <core:set value="" var="PIType_Name"/>
                                        <core:set value="" var="PIType_ObjectID"/>
                                        <core:set value="" var="PIType_UUID"/>
                                        <core:if test="${(v_RRis_active eq 1)}">
                                          <!-- Integration is Active -->
                                          <!-- PI Type Renames go here -->
                                          <!-- PI Rename - Portfolio Item Type rename (Usually from default of Initiative to Epic)
                    ('1 ,I ,E ,Initiative ', 'Epic')
                    Good:  
                    query=(Name = "Portfolio Item")&fetch=Name,ObjectID 
                    query=((Parent = "/typedefinition/615640016045") and (name = "Epic"))&fetch=Name,ObjectID,IDPrefix,Note,DisplayName,ElementName
                    POST  
                      https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition/607225528417
                      {"TypeDefinition":{"Name":"Epic","IDPrefix":"E"}}
                    -->
                                          <!-- Type Definition - Get the ObjectID for the parent "Portfolio Item" type definition -->
                                          <core:set value="${mapPTRename.keySet()}" var="keysetPTRename"/>
                                          <core:set value="${keysetPTRename.iterator()}" var="keyPTRename"/>
                                          <core:while test="${keyPTRename.hasNext()}">
                                            <core:set value="${keyPTRename.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapPTRename.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="tmpName"/>
                                            <core:set value="${tmpName.replace(' ',myBlnk)}" var="strTempName"/>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                              <gel:out trim="false">PTRename: tmpPIcode[${tmpPIcode}] tmpName[${tmpName}] strTempName[${strTempName}]  </gel:out>
                                            </core:if>
                                            <!-- ('1 ,I ,E ,Initiative ', 'Epic') -->
                                            <core:set value="${tmpPIcode.split(',')}" var="tmpPIcode"/>
                                            <!-- split the PI keys on the commas -->
                                            <core:set value="" var="v_PILvl"/>
                                            <core:set value="" var="v_PTCurId"/>
                                            <core:set value="" var="v_PTNewId"/>
                                            <core:set value="" var="v_PTCurName"/>
                                            <core:set value="" var="v_PTNewName"/>
                                            <core:if test="${(tmpPIcode.size() ge 1)}">
                                              <core:set value="${tmpPIcode[0].trim()}" var="v_PILvl"/>
                                            </core:if>
                                            <core:if test="${(tmpPIcode.size() ge 2)}">
                                              <core:set value="${tmpPIcode[1].trim()}" var="v_PTCurId"/>
                                            </core:if>
                                            <core:if test="${(tmpPIcode.size() ge 3)}">
                                              <core:set value="${tmpPIcode[2].trim()}" var="v_PTNewId"/>
                                            </core:if>
                                            <core:if test="${(tmpPIcode.size() ge 4)}">
                                              <core:set value="${tmpPIcode[3].trim()}" var="v_PTCurName"/>
                                            </core:if>
                                            <core:set value="${tmpName}" var="v_PTNewName"/>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Rename: size(${arrPIcode.size()}) v_PILvl(${v_PILvl}) v_PTCurId(${v_PTCurId}) v_PTNewId(${v_PTNewId}) v_PTCurName(${v_PTCurName}) v_PTNewName(${v_PTNewName})</gel:out>
                                            </core:if>
                                            <!-- Search for Parent Portfolio Item Type -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/TypeDefinition?query=(Name${myBlnk}=${myBlnk}"Portfolio${myBlnk}Item")</core:set>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=Name,ObjectID,IDPrefix,Note,DisplayName,ElementName" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:new className="java.io.BufferedReader" var="v_InputData">
                                                  <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                </core:new>
                                                <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>httpData: ${httpData}</gel:out>
                                                </core:if>
                                                <!-- free up some resources -->
                                                <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                <!-- JSON Response -->
                                                <core:new className="org.json.JSONObject" var="jsonResp">
                                                  <core:arg type="java.lang.String" value="${httpData}"/>
                                                </core:new>
                                                <core:if test="${bDebugJSON}">
                                                  <gel:out>jsonResp:</gel:out>
                                                  <gel:out>${jsonResp.toString(1)}</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                </core:if>
                                                <!-- PortfolioItem, top level JSON object -->
                                                <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="PIPar_Name"/>
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="PIPar_ObjectID"/>
                                                  <core:set value="${PIPar_ObjectID.trim()}" var="PIPar_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="PIPar_UUID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>PIPar_Name      : ${PIPar_Name}</gel:out>
                                                    <gel:out>PIPar_ObjectID  : ${PIPar_ObjectID}  (${PIPar_ObjectID.getClass()})</gel:out>
                                                    <gel:out>PIPar_UUID      : ${PIPar_UUID}</gel:out>
                                                  </core:if>
                                                  <core:if test="${bDebug}">
                                                    <gel:out trim="false">Saving PI Parent: PIPar_Name[${PIPar_Name}] PIPar_ObjectID[${PIPar_ObjectID}] PIPar_UUID[${PIPar_UUID}] </gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((PIPar_ObjectID == null) || (PIPar_ObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: PI Parent Type by Name. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${((PIPar_ObjectID != null) &amp;&amp; (PIPar_ObjectID.length() gt 0))}">
                                              <!-- Search for PI Type we want to change by Parent and Name -->
                                              <!--
                        query=((Parent = "/typedefinition/615640016045") and (name = "Epic"))&fetch=Name,ObjectID,IDPrefix,Note,DisplayName,ElementName
                        or
                        query=((Parent.Name = "Portfolio Item") AND (Name = "Epic"))
                        -->
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/TypeDefinition?query=((Parent${myBlnk}=${myBlnk}"/typedefinition/${PIPar_ObjectID}")${myBlnk}and${myBlnk}(Name${myBlnk}=${myBlnk}"${v_PTCurName}"))</core:set>
                                              <core:set value="${httpRESTURL}${myAmpr}fetch=Name,ObjectID,IDPrefix,Note,DisplayName,ElementName" var="httpRESTURL"/>
                                              <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                              </core:if>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                              </core:if>
                                              <core:new className="java.net.URL" var="remoteURL">
                                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                              </core:new>
                                              <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                              <core:set value="${connection.setDoInput(true)}" var="void"/>
                                              <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                              <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                              <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                              <core:if test="${v_RRauth_type.equals('API')}">
                                                <core:invoke method="setRequestProperty" on="${connection}">
                                                  <core:arg type="java.lang.String" value="zsessionid"/>
                                                  <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                </core:invoke>
                                              </core:if>
                                              <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                <core:if test="${v_RRencoded != null}">
                                                  <!-- AND -->
                                                  <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                    <core:invoke method="setRequestProperty" on="${connection}">
                                                      <core:arg type="java.lang.String" value="Authorization"/>
                                                      <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                    </core:invoke>
                                                  </core:if>
                                                </core:if>
                                              </core:if>
                                              <core:if test="${bDebugVerLog}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebugSec}">
                                                  <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <core:set value="${connection.connect()}" var="void"/>
                                              <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                              <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                              <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                <gel:out>response_msg :  ${response_msg}</gel:out>
                                                <gel:out>response_code:  ${response_code}</gel:out>
                                              </core:if>
                                              <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                              <core:set value="${null}" var="jsonQR"/>
                                              <core:if test="${response_code == null}">
                                                <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                    <gel:out/>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${response_code != null}">
                                                <core:if test="${response_code == 401}">
                                                  <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${httpInputStream == null}">
                                                  <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                  <core:if test="${bDebug502}">
                                                    <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                </core:if>
                                                <!-- OR -->
                                                <core:if test="${httpInputStream != null}">
                                                  <core:new className="java.io.InputStreamReader" var="v_Input">
                                                    <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                  </core:new>
                                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                  </core:new>
                                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>httpData: ${httpData}</gel:out>
                                                  </core:if>
                                                  <!-- free up some resources -->
                                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                  <!-- JSON Response -->
                                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                                  </core:new>
                                                  <core:if test="${bDebugJSON}">
                                                    <gel:out>jsonResp:</gel:out>
                                                    <gel:out>${jsonResp.toString(1)}</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                  </core:if>
                                                  <!-- PortfolioItem, top level JSON object -->
                                                  <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                                </core:if>
                                                <!-- (httpInputStream != null) -->
                                              </core:if>
                                              <!-- (response_code != null) -->
                                              <core:if test="${jsonQR == null}">
                                                <core:if test="${bDebug}">
                                                  <core:if test="${bDebug}">
                                                    <gel:out>jsonQR is null</gel:out>
                                                  </core:if>
                                                </core:if>
                                              </core:if>
                                              <core:set value="" var="ral_UUID"/>
                                              <core:set value="" var="ral_ObjectID"/>
                                              <core:set value="" var="ral_Name"/>
                                              <core:if test="${jsonQR != null}">
                                                <!-- Results, in a single entry array  -->
                                                <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                                <core:if test="${jarrRArray != null}">
                                                  <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                  </core:if>
                                                  <core:set value="0" var="i_jarrRArray"/>
                                                  <!-- this is a String -->
                                                  <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                  <!-- convert to numeric, but the default is a long -->
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long to an int, which we need for the json calls to work -->
                                                  <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                    <!-- Get the NameArray JSON Object -->
                                                    <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                    <core:set value="${jsonRArray.getString('_refObjectName')}" var="PIType_Name"/>
                                                    <core:set value=" ${jsonRArray.getString('ObjectID')} " var="PIType_ObjectID"/>
                                                    <core:set value="${PIType_ObjectID.trim()}" var="PIType_ObjectID"/>
                                                    <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="PIType_UUID"/>
                                                    <core:if test="${bDebug}">
                                                      <gel:out>PIType_Name      : ${PIType_Name}</gel:out>
                                                      <gel:out>PIType_ObjectID  : ${PIType_ObjectID}  (${PIType_ObjectID.getClass()})</gel:out>
                                                      <gel:out>PIType_UUID      : ${PIType_UUID}</gel:out>
                                                    </core:if>
                                                    <core:if test="${bDebug}">
                                                      <gel:out trim="false">Found PIType: PIType_Name[${PIType_Name}] PIType_ObjectID[${PIType_ObjectID}] PIType_UUID[${PIType_UUID}] </gel:out>
                                                    </core:if>
                                                    <!-- POST to changet the PI Type here -->
                                                    <!--
                              POST  
                                https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition/607225528417
                                {"TypeDefinition":{"Name":"Epic","IDPrefix":"E"}}
                              -->
                                                    <core:if test="${((PIType_ObjectID == null) || (PIType_ObjectID.length() == 0))}">
                                                      <core:if test="${bDebug}">
                                                        <gel:out>Not found: PI Type to rename. </gel:out>
                                                      </core:if>
                                                    </core:if>
                                                    <!-- jsonQR != null -->
                                                    <core:if test="${((PIType_ObjectID != null) &amp;&amp; (PIType_ObjectID.length() gt 0))}">
                                                      <!-- We found the PI. Now Rename it -->
                                                      <core:set escapeText="false" var="renamePIType">
                                { "TypeDefinition": { "Name": "${v_PTNewName}", "IDPrefix": "${v_PTNewId}" } }
                              </core:set>
                                                      <core:if test="${bDebug}">
                                                        <gel:out>renamePIType: ${renamePIType}</gel:out>
                                                      </core:if>
                                                      <!-- Setup URL for target PI -->
                                                      <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/TypeDefinition/${PIType_ObjectID}</core:set>
                                                      <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                        <core:set encode="false" var="httpRESTURL">${httpRESTURL}?workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                                      </core:if>
                                                      <core:if test="${bDebugREST}">
                                                        <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                                      </core:if>
                                                      <core:new className="java.net.URL" var="remoteURL">
                                                        <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                                      </core:new>
                                                      <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                                      <core:set value="${connection.setDoInput(true)}" var="void"/>
                                                      <core:set value="${connection.setDoOutput(true)}" var="void"/>
                                                      <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                                      <core:expr value="${connection.setRequestMethod(&quot;POST&quot;)}"/>
                                                      <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                                      <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                                      <core:if test="${v_RRauth_type.equals('API')}">
                                                        <core:invoke method="setRequestProperty" on="${connection}">
                                                          <core:arg type="java.lang.String" value="zsessionid"/>
                                                          <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                        </core:invoke>
                                                      </core:if>
                                                      <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                        <core:if test="${v_RRencoded != null}">
                                                          <!-- AND -->
                                                          <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                            <core:invoke method="setRequestProperty" on="${connection}">
                                                              <core:arg type="java.lang.String" value="Authorization"/>
                                                              <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                            </core:invoke>
                                                          </core:if>
                                                        </core:if>
                                                      </core:if>
                                                      <core:if test="${!(bSkipRESTRename)}">
                                                        <core:set value="${connection.connect()}" var="void"/>
                                                        <core:set value="${connection.getOutputStream()}" var="v_os"/>
                                                        <core:if test="${v_os != null}">
                                                          <core:new className="java.io.OutputStreamWriter" var="wr">
                                                            <core:arg type="java.io.OutputStream" value="${v_os}"/>
                                                          </core:new>
                                                          <core:set value="${wr.write(renamePIType)}" var="void"/>
                                                          <core:set value="${wr.flush()}" var="void"/>
                                                          <core:set value="${wr.close()}" var="void"/>
                                                        </core:if>
                                                        <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                        <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                        <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                        <core:if test="${bDebugREST}">
                                                          <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                          <gel:out>response_msg :  ${response_msg}</gel:out>
                                                          <gel:out>response_code:  ${response_code}</gel:out>
                                                        </core:if>
                                                        <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                        <core:set value="${null}" var="jsonQR"/>
                                                        <core:if test="${response_code == null}">
                                                          <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                          <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                          <core:choose>
                                                            <core:when test="${gel_processId == null}">
                                                              <gel:out>${logMessage}</gel:out>
                                                              <gel:out/>
                                                            </core:when>
                                                            <core:otherwise>
                                                              <gel:log level="WARN">${logMessage}</gel:log>
                                                            </core:otherwise>
                                                          </core:choose>
                                                        </core:if>
                                                        <core:if test="${response_code != null}">
                                                          <core:if test="${response_code == 401}">
                                                            <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                            <core:choose>
                                                              <core:when test="${gel_processId == null}">
                                                                <gel:out>${logMessage}</gel:out>
                                                              </core:when>
                                                              <core:otherwise>
                                                                <gel:log level="WARN">${logMessage}</gel:log>
                                                              </core:otherwise>
                                                            </core:choose>
                                                          </core:if>
                                                          <core:if test="${httpInputStream == null}">
                                                            <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                            <core:choose>
                                                              <core:when test="${gel_processId == null}">
                                                                <gel:out>${logMessage}</gel:out>
                                                              </core:when>
                                                              <core:otherwise>
                                                                <gel:log level="WARN">${logMessage}</gel:log>
                                                              </core:otherwise>
                                                            </core:choose>
                                                            <core:if test="${bDebug502}">
                                                              <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                              <core:choose>
                                                                <core:when test="${gel_processId == null}">
                                                                  <gel:out>${logMessage}</gel:out>
                                                                </core:when>
                                                                <core:otherwise>
                                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                                </core:otherwise>
                                                              </core:choose>
                                                            </core:if>
                                                          </core:if>
                                                          <!-- OR -->
                                                          <core:if test="${httpInputStream != null}">
                                                            <core:new className="java.io.InputStreamReader" var="v_Input">
                                                              <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                            </core:new>
                                                            <core:new className="java.io.BufferedReader" var="v_InputData">
                                                              <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                            </core:new>
                                                            <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                            <core:if test="${bDebugREST}">
                                                              <gel:out>httpData: ${httpData}</gel:out>
                                                            </core:if>
                                                            <!-- free up some resources -->
                                                            <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                            <!-- JSON Response -->
                                                            <core:new className="org.json.JSONObject" var="jsonResp">
                                                              <core:arg type="java.lang.String" value="${httpData}"/>
                                                            </core:new>
                                                            <core:if test="${bDebugJSON}">
                                                              <gel:out>jsonResp:</gel:out>
                                                              <gel:out>${jsonResp.toString(1)}</gel:out>
                                                              <gel:out>_______________________________________________</gel:out>
                                                              <gel:out>_______________________________________________</gel:out>
                                                            </core:if>
                                                          </core:if>
                                                          <!-- (httpInputStream != null) -->
                                                          <core:if test="${response_code == 200}">
                                                            <core:set value="Rename successful from ${v_PTCurName}(${v_PTCurId}) to ${v_PTNewName}(${v_PTNewId}) " var="logMessage"/>
                                                            <core:choose>
                                                              <core:when test="${gel_processId == null}">
                                                                <gel:out>${logMessage}</gel:out>
                                                              </core:when>
                                                              <core:otherwise>
                                                                <gel:log level="INFO">${logMessage}</gel:log>
                                                              </core:otherwise>
                                                            </core:choose>
                                                          </core:if>
                                                        </core:if>
                                                        <!-- (response_code != null) -->
                                                      </core:if>
                                                      <!-- !(bSkipRESTRename) -->
                                                    </core:if>
                                                    <!-- Found the PI to rename... ((PIType_ObjectID != null) &amp;&amp; (PIType_ObjectID.length() gt 0)) -->
                                                    <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                    <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                    <!-- convert the long back to an int, which we need for the json calls -->
                                                  </core:while>
                                                  <!-- i_jarrRArray < len_jarrRArray -->
                                                </core:if>
                                              </core:if>
                                              <!-- jsonQR != null -->
                                              <core:if test="${((PIType_ObjectID == null) || (PIType_ObjectID.length() == 0))}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>Not found: PI Type by Name. </gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <!-- ((PIType_ObjectID != null) &amp;&amp; (PIType_ObjectID.length() gt 0)) -->
                                            <core:if test="${bDebug}">
                                              <gel:out>_______________________________________________</gel:out>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Sleeping...</gel:out>
                                            </core:if>
                                            <!-- Sleep for 3 seconds to wait for Rally to update the Portfolio Item type names -->
                                            <u:sleep millis="3000"/>
                                            <core:if test="${bDebug}">
                                              <gel:out>We Back!</gel:out>
                                            </core:if>
                                          </core:while>
                                          <!-- keyPTRename.hasNext() -->
                                          <!-- Objective Create -->
                                          <!--
                    get TypeDef ObjectID for Feature
                      https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition?pagesize=200&fetch=Name,ObjectID,IDPrefix,Note,DisplayName,ElementName&query=(Parent.Name = "Objective")
https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition?pagesize=200&fetch=Name,ObjectID,IDPrefix,Note,DisplayName,ElementName&query=(Parent.Name%20=%20%22Objective%22)    

https://rally1.rallydev.com/slm/webservice/v2.0/TypeDefinition?query=((Parent = "/typedefinition/643119226969") and (ordinal = 0))&fetch=Name,ObjectID,IDPrefix,Note,DisplayName,ElementName

Get all the Objective type definitions, including the parent Objective with an Ordinal of -1
https://rally1.rallydev.com/slm/webservice/v2.0/TypeDefinition?query=(Parent.name = "Objective")&fetch=Name,ObjectID,IDPrefix,DisplayName,ElementName,Ordinal,AssociatedWorkType

                  <core:set var="void" value="${mapOKRTypes.put('2, BO, Theme'    ,'Business Objective'  )}"/>
                  <core:set var="void" value="${mapOKRTypes.put('1, SO, Epic'     ,'Strategic Objective' )}"/>
                  <core:set var="void" value="${mapOKRTypes.put('0, TO, Feature'  ,'Team Objective'      )}"/>

                  -->
                                          <!-- Get all Portfolio Item Types. Need PI ObjectID when adding AssociatedWorkType to Objective -->
                                          <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/TypeDefinition?query=(Parent.Name${myBlnk}=${myBlnk}"Portfolio${myBlnk}Item")</core:set>
                                          <core:set value="${httpRESTURL}${myAmpr}fetch=ElementName,ObjectID,IDPrefix,DisplayName,Ordinal" var="httpRESTURL"/>
                                          <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                            <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                          </core:if>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                          </core:if>
                                          <core:new className="java.net.URL" var="remoteURL">
                                            <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                          </core:new>
                                          <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                          <core:set value="${connection.setDoInput(true)}" var="void"/>
                                          <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                          <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                          <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                          <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                          <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                          <core:if test="${v_RRauth_type.equals('API')}">
                                            <core:invoke method="setRequestProperty" on="${connection}">
                                              <core:arg type="java.lang.String" value="zsessionid"/>
                                              <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                            </core:invoke>
                                          </core:if>
                                          <core:if test="${v_RRauth_type.equals('BASIC')}">
                                            <core:if test="${(v_RRencoded != null) and (v_RRencoded.length() &gt; 0)}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="Authorization"/>
                                                <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                              </core:invoke>
                                            </core:if>
                                          </core:if>
                                          <core:if test="${bDebugVerLog}">
                                            <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:set value="${connection.connect()}" var="void"/>
                                          <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                          <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                          <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                            <gel:out>response_msg :  ${response_msg}</gel:out>
                                            <gel:out>response_code:  ${response_code}</gel:out>
                                          </core:if>
                                          <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                          <core:set value="${null}" var="jsonQR"/>
                                          <core:if test="${response_code == null}">
                                            <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                            <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                                <gel:out/>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:if test="${response_code != null}">
                                            <core:if test="${httpInputStream == null}">
                                              <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <!-- OR -->
                                            <core:if test="${httpInputStream != null}">
                                              <core:new className="java.io.InputStreamReader" var="v_Input">
                                                <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                              </core:new>
                                              <core:new className="java.io.BufferedReader" var="v_InputData">
                                                <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                              </core:new>
                                              <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpData: ${httpData}</gel:out>
                                              </core:if>
                                              <!-- free up some resources -->
                                              <core:set value="${httpInputStream.close()}" var="dummy"/>
                                              <!-- JSON Response -->
                                              <core:new className="org.json.JSONObject" var="jsonResp">
                                                <core:arg type="java.lang.String" value="${httpData}"/>
                                              </core:new>
                                              <core:if test="${bDebugJSON}">
                                                <gel:out>jsonResp:</gel:out>
                                                <gel:out>${jsonResp.toString(1)}</gel:out>
                                                <gel:out>__________________</gel:out>
                                              </core:if>
                                              <!-- PortfolioItem, top level JSON object -->
                                              <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                            </core:if>
                                            <!-- (httpInputStream != null) -->
                                          </core:if>
                                          <!-- (response_code != null) -->
                                          <core:if test="${jsonQR == null}">
                                            <core:if test="${bDebug}">
                                              <gel:out>jsonQR is null</gel:out>
                                            </core:if>
                                          </core:if>
                                          <core:if test="${jsonQR != null}">
                                            <!-- Results, in a single entry array  -->
                                            <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                            <core:if test="${jarrRArray != null}">
                                              <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                              <core:if test="${bDebug}">
                                                <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                              </core:if>
                                              <core:set value="0" var="i_jarrRArray"/>
                                              <!-- this is a String -->
                                              <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                              <!-- convert to numeric, but the default is a long -->
                                              <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                              <!-- convert the long to an int, which we need for the json calls to work -->
                                              <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                <!-- Get the NameArray JSON Object -->
                                                <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                <core:set value="${jsonRArray.getString('_refObjectName')}" var="PITyp_Name"/>
                                                <core:set value="${jsonRArray.getString('ElementName')}" var="PITyp_EleName"/>
                                                <core:set value="${jsonRArray.getString('ObjectID')}" var="PITyp_ObjectIDT"/>
                                                <core:set value=" ${jsonRArray.getString('ObjectID')} " var="PITyp_ObjectID"/>
                                                <core:set value="${PITyp_ObjectID.trim()}" var="PITyp_ObjectID"/>
                                                <core:set value="${jsonRArray.getString('IDPrefix')}" var="PITyp_IDPref"/>
                                                <core:set value="${jsonRArray.getString('Ordinal')}" var="PITyp_OrdinalStr"/>
                                                <core:set value="${jsonRArray.get('Ordinal')}" var="PITyp_Ordinal"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out>PITyp_Name      : ${PITyp_Name}</gel:out>
                                                  <gel:out>PITyp_EleName   : ${PITyp_EleName}</gel:out>
                                                  <gel:out>PITyp_ObjectIDT : ${PITyp_ObjectIDT}  (${PITyp_ObjectIDT.getClass()})</gel:out>
                                                  <gel:out>PITyp_ObjectID  : ${PITyp_ObjectID}  (${PITyp_ObjectID.getClass()})</gel:out>
                                                  <gel:out>PITyp_IDPref    : ${PITyp_IDPref}</gel:out>
                                                  <gel:out>PITyp_Ordinal   : ${PITyp_Ordinal} (${PITyp_Ordinal.getClass()})</gel:out>
                                                  <gel:out>PITyp_OrdinalStr: ${PITyp_OrdinalStr} (${PITyp_OrdinalStr.getClass()})</gel:out>
                                                </core:if>
                                                <core:if test="${bDebug}">
                                                  <gel:out trim="false">Saving PI Type: PITyp_Name[${PITyp_Name}] PITyp_ObjectID[${PITyp_ObjectID}] PITyp_IDPref[${PITyp_IDPref}] </gel:out>
                                                </core:if>
                                                <core:if test="${bDebug}">
                                                  <gel:out/>
                                                </core:if>
                                                <core:set value="${mapPITypNameObjId.put(PITyp_EleName,  PITyp_ObjectID)}" var="void"/>
                                                <core:set value="${mapPITypNameOrd.put(PITyp_EleName,    PITyp_OrdinalStr)}" var="void"/>
                                                <core:set value="${mapPITypOrdName.put(PITyp_OrdinalStr, PITyp_EleName)}" var="void"/>
                                                <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long back to an int, which we need for the json calls -->
                                              </core:while>
                                              <!-- i_jarrRArray < len_jarrRArray -->
                                            </core:if>
                                          </core:if>
                                          <!-- jsonQR != null -->
                                          <!-- Objectives  - Get all the existing Objective type definitions -->
                                          <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/TypeDefinition?query=(Parent.name${myBlnk}=${myBlnk}"Objective")</core:set>
                                          <core:set value="${httpRESTURL}${myAmpr}fetch=Name,ObjectID,IDPrefix,DisplayName,ElementName,Ordinal,AssociatedWorkType" var="httpRESTURL"/>
                                          <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                            <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                          </core:if>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                          </core:if>
                                          <core:new className="java.net.URL" var="remoteURL">
                                            <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                          </core:new>
                                          <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                          <core:set value="${connection.setDoInput(true)}" var="void"/>
                                          <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                          <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                          <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                          <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                          <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                          <core:if test="${v_RRauth_type.equals('API')}">
                                            <core:invoke method="setRequestProperty" on="${connection}">
                                              <core:arg type="java.lang.String" value="zsessionid"/>
                                              <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                            </core:invoke>
                                          </core:if>
                                          <core:if test="${v_RRauth_type.equals('BASIC')}">
                                            <core:if test="${v_RRencoded != null}">
                                              <!-- AND -->
                                              <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                <core:invoke method="setRequestProperty" on="${connection}">
                                                  <core:arg type="java.lang.String" value="Authorization"/>
                                                  <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                </core:invoke>
                                              </core:if>
                                            </core:if>
                                          </core:if>
                                          <core:if test="${bDebugVerLog}">
                                            <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:set value="${connection.connect()}" var="void"/>
                                          <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                          <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                          <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                            <gel:out>response_msg :  ${response_msg}</gel:out>
                                            <gel:out>response_code:  ${response_code}</gel:out>
                                          </core:if>
                                          <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                          <core:set value="${null}" var="jsonQR"/>
                                          <core:if test="${response_code == null}">
                                            <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                            <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                                <gel:out/>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:if test="${response_code != null}">
                                            <core:if test="${response_code == 401}">
                                              <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${httpInputStream == null}">
                                              <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebug502}">
                                                <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <!-- OR -->
                                            <core:if test="${httpInputStream != null}">
                                              <core:new className="java.io.InputStreamReader" var="v_Input">
                                                <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                              </core:new>
                                              <core:new className="java.io.BufferedReader" var="v_InputData">
                                                <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                              </core:new>
                                              <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpData: ${httpData}</gel:out>
                                              </core:if>
                                              <!-- free up some resources -->
                                              <core:set value="${httpInputStream.close()}" var="dummy"/>
                                              <!-- JSON Response -->
                                              <core:new className="org.json.JSONObject" var="jsonResp">
                                                <core:arg type="java.lang.String" value="${httpData}"/>
                                              </core:new>
                                              <core:if test="${bDebugJSON}">
                                                <gel:out>jsonResp:</gel:out>
                                                <gel:out>${jsonResp.toString(1)}</gel:out>
                                                <gel:out>__________________</gel:out>
                                              </core:if>
                                              <!-- PortfolioItem, top level JSON object -->
                                              <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                            </core:if>
                                            <!-- (httpInputStream != null) -->
                                          </core:if>
                                          <!-- (response_code != null) -->
                                          <core:if test="${jsonQR == null}">
                                            <core:if test="${bDebug}">
                                              <core:if test="${bDebug}">
                                                <gel:out>jsonQR is null</gel:out>
                                              </core:if>
                                            </core:if>
                                          </core:if>
                                          <core:if test="${jsonQR != null}">
                                            <!-- Results, in a single entry array  -->
                                            <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                            <core:if test="${jarrRArray != null}">
                                              <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                              <core:if test="${bDebug}">
                                                <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                              </core:if>
                                              <core:set value="0" var="i_jarrRArray"/>
                                              <!-- this is a String -->
                                              <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                              <!-- convert to numeric, but the default is a long -->
                                              <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                              <!-- convert the long to an int, which we need for the json calls to work -->
                                              <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                <!-- Get the NameArray JSON Object fields: Name,ObjectID,IDPrefix,DisplayName,ElementName,Ordinal,AssociatedWorkType -->
                                                <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                <core:set value="${jsonRArray.getString('_refObjectName')}" var="OType_Name"/>
                                                <core:set value=" ${jsonRArray.getString('ObjectID')} " var="OType_ObjectID"/>
                                                <core:set value="${OType_ObjectID.trim()}" var="OType_ObjectID"/>
                                                <core:set value="${jsonRArray.getString('IDPrefix')}" var="OType_IDPrefix"/>
                                                <core:set value="${jsonRArray.getString('DisplayName')}" var="OType_DisplayName"/>
                                                <core:set value="${jsonRArray.getString('ElementName')}" var="OType_ElementName"/>
                                                <core:set value="${jsonRArray.get('Ordinal')}" var="OType_Ordinal"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out>OType_Name        : ${OType_Name}</gel:out>
                                                  <gel:out>OType_ObjectID    : ${OType_ObjectID}  (${OType_ObjectID.getClass()})</gel:out>
                                                  <gel:out>OType_IDPrefix    : ${OType_IDPrefix}</gel:out>
                                                  <gel:out>OType_DisplayName : ${OType_DisplayName}</gel:out>
                                                  <gel:out>OType_ElementName : ${OType_ElementName}</gel:out>
                                                  <gel:out>OType_Ordinal     : ${OType_Ordinal} (${OType_Ordinal.getClass()})</gel:out>
                                                </core:if>
                                                <core:set value="" var="OTAWT_Name"/>
                                                <core:set value="" var="OTAWT_ObjectID"/>
                                                <core:set value="" var="OTAWT_IDPrefix"/>
                                                <core:set value="" var="OTAWT_DisplayName"/>
                                                <core:set value="" var="OTAWT_ElementName"/>
                                                <core:set value="" var="OTAWT_Ordinal"/>
                                                <core:set value="${jsonRArray.get('AssociatedWorkType')}" var="jsonAWT"/>
                                                <core:if test="${jsonAWT != null}">
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="OTAWT_Name"/>
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="OTAWT_ObjectID"/>
                                                  <core:set value="${OTAWT_ObjectID.trim()}" var="OTAWT_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('IDPrefix')}" var="OTAWT_IDPrefix"/>
                                                  <core:set value="${jsonRArray.getString('DisplayName')}" var="OTAWT_DisplayName"/>
                                                  <core:set value="${jsonRArray.getString('ElementName')}" var="OTAWT_ElementName"/>
                                                  <core:set value="${jsonRArray.get('Ordinal')}" var="OTAWT_Ordinal"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>OTAWT_Name        : ${OTAWT_Name}</gel:out>
                                                    <gel:out>OTAWT_ObjectID    : ${OTAWT_ObjectID}  (${OTAWT_ObjectID.getClass()})</gel:out>
                                                    <gel:out>OTAWT_IDPrefix    : ${OTAWT_IDPrefix}</gel:out>
                                                    <gel:out>OTAWT_DisplayName : ${OTAWT_DisplayName}</gel:out>
                                                    <gel:out>OTAWT_ElementName : ${OTAWT_ElementName}</gel:out>
                                                    <gel:out>OTAWT_Ordinal     : ${OTAWT_Ordinal} (${OTAWT_Ordinal.getClass()})</gel:out>
                                                  </core:if>
                                                </core:if>
                                                <core:if test="${bDebugJSON}">
                                                  <gel:out>jsonAWT:</gel:out>
                                                  <gel:out>${jsonAWT.toString(1)}</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                </core:if>
                                                <core:if test="${bDebug}">
                                                  <gel:out trim="false">Saving Objective Type original: OType_Name[${OType_Name}] OType_ObjectID[${OType_ObjectID}] OType_Ordinal[${OType_Ordinal}] OTAWT_ObjectID[${OTAWT_ObjectID}] OTAWT_ElementName[${OTAWT_ElementName}] </gel:out>
                                                </core:if>
                                                <core:if test="${OType_Ordinal == -1}">
                                                  <core:set value="${OType_ObjectID}" var="OType_Objective_ObjID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>Objective Top - OType_Objective_ObjID: ${OType_Objective_ObjID} (${OType_Objective_ObjID.getClass()})</gel:out>
                                                  </core:if>
                                                </core:if>
                                                <core:if test="${bDebug}">
                                                  <gel:out/>
                                                </core:if>
                                                <core:set value="${mapOTypNameOrd.put(OType_Name,  OType_Ordinal)}" var="void"/>
                                                <core:set value="${mapOTypOrdName.put(OType_Ordinal,    OType_Name)}" var="void"/>
                                                <core:set value="${mapOTypOrdObjID.put(OType_Ordinal,    OType_ObjectID)}" var="void"/>
                                                <core:set value="${mapOTypOrdIDPref.put(OType_Ordinal, OType_IDPrefix)}" var="void"/>
                                                <core:set value="${mapOTypOrdAWTID.put(OType_Ordinal,  OTAWT_ObjectID)}" var="void"/>
                                                <core:set value="${mapOTypOrdAWTName.put(OType_Ordinal,  OTAWT_ElementName)}" var="void"/>
                                                <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long back to an int, which we need for the json calls -->
                                              </core:while>
                                              <!-- i_jarrRArray < len_jarrRArray -->
                                            </core:if>
                                          </core:if>
                                          <!-- jsonQR != null -->
                                          <!-- End - Get all the existing Objective type definitions -->
                                          <!-- Objectives  - Create and/or update the Objective type definitions. Walk the ordinal bottom to top (from 0 up) -->
                                          <core:set value="${mapOKRTypes.keySet()}" var="keysetOKRTypes"/>
                                          <core:set value="${keysetOKRTypes.iterator()}" var="keyOKRTypes"/>
                                          <core:while test="${keyOKRTypes.hasNext()}">
                                            <core:set value="${keyOKRTypes.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapOKRTypes.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="tmpName"/>
                                            <!-- <core:set var="strTempName"  value="${tmpName.replace(' ',myBlnk)}"/> -->
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                              <gel:out trim="false">Create or update OKRTypes: tmpPIcode[${tmpPIcode}] tmpName[${tmpName}] </gel:out>
                                            </core:if>
                                            <!-- 
                      ('BO, 2, Theme'          ,'Business Objective')
                      ('SO, 1, Epic'           ,'Strategic Objective')
                      ('TO, 0, Feature'        ,'Team Objective')
                       -->
                                            <core:set value="${tmpPIcode.split(',')}" var="tmpPIcode"/>
                                            <!-- split the keys on the commas -->
                                            <core:set value="" var="v_OTIDPref"/>
                                            <core:set value="" var="v_OTOrdinal"/>
                                            <core:set value="" var="v_OTAWTName"/>
                                            <core:set value="" var="v_OTAWTObjID"/>
                                            <core:set value="" var="v_OTNewName"/>
                                            <core:set value="" var="v_OTParObjID"/>
                                            <core:if test="${(tmpPIcode.size() ge 1)}">
                                              <core:set value="${tmpPIcode[0].trim()}" var="v_OTIDPref"/>
                                            </core:if>
                                            <core:if test="${(tmpPIcode.size() ge 2)}">
                                              <core:set value="${tmpPIcode[1].trim()}" var="v_OTOrdinal"/>
                                            </core:if>
                                            <core:if test="${(tmpPIcode.size() ge 3)}">
                                              <core:set value="${tmpPIcode[2].trim()}" var="v_OTAWTName"/>
                                            </core:if>
                                            <core:set value="${tmpName}" var="v_OTNewName"/>
                                            <core:set value="${mapPITypNameObjId.get(v_OTAWTName)}" var="v_OTAWTObjID"/>
                                            <core:set value="${OType_Objective_ObjID}" var="v_OTParObjID"/>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Obj Type: size(${arrPIcode.size()}) v_OTIDPref(${v_OTIDPref}) v_OTOrdinal(${v_OTOrdinal}) v_OTAWTName(${v_OTAWTName}) v_OTAWTObjID(${v_OTAWTObjID}) v_OTNewName(${v_OTNewName}) v_OTParObjID(${v_OTParObjID})</gel:out>
                                            </core:if>
                                            <!--
                      https://rally1.rallydev.com/slm/webservice/v2.0/TypeDefinition?query=(Parent.Name = "Objective")&fetch=Name,ObjectID,IDPrefix,DisplayName,ElementName,Ordinal,AssociatedWorkType

                      https://rally1.rallydev.com/slm/webservice/v2.0/TypeDefinition?query=((Parent.name = "Objective") and (ordinal = 2))&fetch=Name,ObjectID,IDPrefix,DisplayName,ElementName,Ordinal,AssociatedWorkType&workspace=https://rally1.rallydev.com/slm/webservice/v2.0/workspace/643119226361
                      -->
                                            <!-- Search for existing Objective Type -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/TypeDefinition?query=((Parent.name${myBlnk}=${myBlnk}"Objective")${myBlnk}and${myBlnk}(ordinal${myBlnk}=${myBlnk}${v_OTOrdinal}))</core:set>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=Name,ObjectID,IDPrefix,DisplayName,ElementName,Ordinal,AssociatedWorkType" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${(v_RRencoded != null) and (v_RRencoded.length() &gt; 0)}">
                                                <core:invoke method="setRequestProperty" on="${connection}">
                                                  <core:arg type="java.lang.String" value="Authorization"/>
                                                  <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                </core:invoke>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:new className="java.io.BufferedReader" var="v_InputData">
                                                  <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                </core:new>
                                                <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>httpData: ${httpData}</gel:out>
                                                </core:if>
                                                <!-- free up some resources -->
                                                <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                <!-- JSON Response -->
                                                <core:new className="org.json.JSONObject" var="jsonResp">
                                                  <core:arg type="java.lang.String" value="${httpData}"/>
                                                </core:new>
                                                <core:if test="${bDebugJSON}">
                                                  <gel:out>jsonResp:</gel:out>
                                                  <gel:out>${jsonResp.toString(1)}</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                </core:if>
                                                <!-- PortfolioItem, top level JSON object -->
                                                <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results. We should get an empty array if not found, but an array nevertheless.  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:set value="${jsonQR.get('TotalResultCount')}" var="jarrQRCount"/>
                                              <gel:out>jarrRArray  : ${jarrRArray}  (${jarrRArray.getClass()})</gel:out>
                                              <gel:out>(jarrRArray == null) : ${(jarrRArray == null)} </gel:out>
                                              <gel:out>(jarrRArray.size()) : ${jarrRArray.size()} </gel:out>
                                              <gel:out>jarrQRCount: ${jarrQRCount} </gel:out>
                                              <core:if test="${jarrRArray != null and jarrRArray.size() gt 0}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>found Objective with Ordinal (jarrRArray != null) </gel:out>
                                                </core:if>
                                              </core:if>
                                              <core:if test="${jarrRArray == null or jarrRArray.size() eq 0}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>No existing Objective with this Ordinal. Create one</gel:out>
                                                </core:if>
                                              </core:if>
                                              <core:if test="${jarrQRCount == 0}">
                                                <gel:out>Create the Objective... </gel:out>
                                                <!-- POST to Create
                          https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition/create?fetch=true
                          {"TypeDefinition":{"Name":"Top","Workspace":"/workspace/643119226361","Parent":"/typedefinition/643119226969"}}
                        -->
                                                <core:set escapeText="false" var="createOType">
                          { "TypeDefinition": {"Name": "${v_OTNewName}", "Workspace":"/workspace/${v_RRworkspace}", "Parent":"/typedefinition/${v_OTParObjID}" } }
                        </core:set>
                                                <core:if test="${bDebug}">
                                                  <gel:out>createOType: ${createOType}</gel:out>
                                                </core:if>
                                                <!-- Setup URL for target PI -->
                                                <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/TypeDefinition/create?fetch=true</core:set>
                                                <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                  <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                                </core:if>
                                                <!-- MJS 8/5/2022 +fetch via URI update
                        <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI" >
                          <core:arg type="java.lang.String" value="${httpRESTURL}" />
                        </core:new>
                        <core:set var="void" value="${httpURI.setParameter('fetch', 'true')}"/>
                        <core:set var="httpRESTURL" encode="false" >${httpURI.toString()}</core:set>
                          -->
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>MJS httpRESTURL: ${httpRESTURL}</gel:out>
                                                </core:if>
                                                <core:new className="java.net.URL" var="remoteURL">
                                                  <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                                </core:new>
                                                <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                                <core:set value="${connection.setDoInput(true)}" var="void"/>
                                                <core:set value="${connection.setDoOutput(true)}" var="void"/>
                                                <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                                <core:expr value="${connection.setRequestMethod(&quot;POST&quot;)}"/>
                                                <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                                <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                                <core:if test="${v_RRauth_type.equals('API')}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="zsessionid"/>
                                                    <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                  </core:invoke>
                                                </core:if>
                                                <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                  <core:if test="${v_RRencoded != null}">
                                                    <!-- AND -->
                                                    <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                      <core:invoke method="setRequestProperty" on="${connection}">
                                                        <core:arg type="java.lang.String" value="Authorization"/>
                                                        <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                      </core:invoke>
                                                    </core:if>
                                                  </core:if>
                                                </core:if>
                                                <core:set value="${connection.connect()}" var="void"/>
                                                <core:set value="${connection.getOutputStream()}" var="v_os"/>
                                                <core:if test="${v_os != null}">
                                                  <core:new className="java.io.OutputStreamWriter" var="wr">
                                                    <core:arg type="java.io.OutputStream" value="${v_os}"/>
                                                  </core:new>
                                                  <core:set value="${wr.write(createOType)}" var="void"/>
                                                  <core:set value="${wr.flush()}" var="void"/>
                                                  <core:set value="${wr.close()}" var="void"/>
                                                </core:if>
                                                <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                  <gel:out>response_msg :  ${response_msg}</gel:out>
                                                  <gel:out>response_code:  ${response_code}</gel:out>
                                                </core:if>
                                                <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                <core:set value="${null}" var="jsonQR"/>
                                                <core:if test="${response_code == null}">
                                                  <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                  <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                      <gel:out/>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${response_code != null}">
                                                  <core:if test="${response_code == 401}">
                                                    <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${httpInputStream == null}">
                                                    <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                    <core:if test="${bDebug502}">
                                                      <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="INFO">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- OR -->
                                                  <core:if test="${httpInputStream != null}">
                                                    <core:new className="java.io.InputStreamReader" var="v_Input">
                                                      <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                    </core:new>
                                                    <core:new className="java.io.BufferedReader" var="v_InputData">
                                                      <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                    </core:new>
                                                    <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                    <core:if test="${bDebugREST}">
                                                      <gel:out>httpData: ${httpData}</gel:out>
                                                    </core:if>
                                                    <!-- free up some resources -->
                                                    <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                    <!-- JSON Response -->
                                                    <core:new className="org.json.JSONObject" var="jsonResp">
                                                      <core:arg type="java.lang.String" value="${httpData}"/>
                                                    </core:new>
                                                    <core:if test="${bDebugJSON}">
                                                      <gel:out>Create Objective type definition</gel:out>
                                                      <gel:out>jsonResp:</gel:out>
                                                      <gel:out>${jsonResp.toString(1)}</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                    </core:if>
                                                    <!-- Objective, top level JSON object -->
                                                    <core:set value="${jsonResp.getJSONObject('CreateResult')}" var="jsonQR"/>
                                                  </core:if>
                                                  <!-- (httpInputStream != null) -->
                                                  <core:if test="${response_code == 200}">
                                                    <core:set value="Objective type definition creation successful from ${v_OTNewName}(${v_OTOrdinal}) " var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${jsonQR == null}">
                                                    <core:if test="${bDebug}">
                                                      <core:if test="${bDebug}">
                                                        <gel:out>jsonQR is null</gel:out>
                                                      </core:if>
                                                    </core:if>
                                                  </core:if>
                                                  <core:if test="${jsonQR != null}">
                                                    <!-- Results, in a single entry array or JSONObject. -->
                                                    <core:set value="${jsonQR.get('Object')}" var="jarrRArray"/>
                                                    <core:if test="${jarrRArray != null}">
                                                      <!-- Get the NameArray JSON Object fields: Name,ObjectID,IDPrefix,DisplayName,ElementName,Ordinal,AssociatedWorkType -->
                                                      <!-- <core:set var="jsonRArray"         value="${jarrRArray.get(i_jarrRArray)}"/> -->
                                                      <core:set value="${jsonRArray.getString('_refObjectName')}" var="OType_Name"/>
                                                      <core:set value=" ${jsonRArray.getString('ObjectID')} " var="OType_ObjectID"/>
                                                      <core:set value="${OType_ObjectID.trim()}" var="OType_ObjectID"/>
                                                      <core:set value="${jsonRArray.getString('IDPrefix')}" var="OType_IDPrefix"/>
                                                      <core:set value="${jsonRArray.getString('DisplayName')}" var="OType_DisplayName"/>
                                                      <core:set value="${jsonRArray.getString('ElementName')}" var="OType_ElementName"/>
                                                      <core:set value="${jsonRArray.get('Ordinal')}" var="OType_Ordinal"/>
                                                      <core:if test="${bDebug}">
                                                        <gel:out>OType_Name        : ${OType_Name}</gel:out>
                                                        <gel:out>OType_ObjectID    : ${OType_ObjectID}  (${OType_ObjectID.getClass()})</gel:out>
                                                        <gel:out>OType_IDPrefix    : ${OType_IDPrefix}</gel:out>
                                                        <gel:out>OType_DisplayName : ${OType_DisplayName}</gel:out>
                                                        <gel:out>OType_ElementName : ${OType_ElementName}</gel:out>
                                                        <gel:out>OType_Ordinal     : ${OType_Ordinal} (${OType_Ordinal.getClass()})</gel:out>
                                                      </core:if>
                                                      <core:set value="" var="OTAWT_Name"/>
                                                      <core:set value="" var="OTAWT_ObjectID"/>
                                                      <core:set value="" var="OTAWT_IDPrefix"/>
                                                      <core:set value="" var="OTAWT_DisplayName"/>
                                                      <core:set value="" var="OTAWT_ElementName"/>
                                                      <core:set value="" var="OTAWT_Ordinal"/>
                                                      <core:if test="${bDebug}">
                                                        <gel:out trim="false">Saving Objective Type updated: OType_Name[${OType_Name}] OType_ObjectID[${OType_ObjectID}] OType_Ordinal[${OType_Ordinal}] OTAWT_ObjectID[${OTAWT_ObjectID}] OTAWT_ElementName[${OTAWT_ElementName}] </gel:out>
                                                      </core:if>
                                                      <core:if test="${bDebug}">
                                                        <gel:out/>
                                                      </core:if>
                                                      <core:set value="${mapOTypNameOrd.put(OType_Name,  OType_Ordinal)}" var="void"/>
                                                      <core:set value="${mapOTypOrdName.put(OType_Ordinal,    OType_Name)}" var="void"/>
                                                      <core:set value="${mapOTypOrdObjID.put(OType_Ordinal,    OType_ObjectID)}" var="void"/>
                                                      <core:set value="${mapOTypOrdIDPref.put(OType_Ordinal, OType_IDPrefix)}" var="void"/>
                                                      <core:set value="${mapOTypOrdAWTID.put(OType_Ordinal,  OTAWT_ObjectID)}" var="void"/>
                                                      <core:set value="${mapOTypOrdAWTName.put(OType_Ordinal,  OTAWT_ElementName)}" var="void"/>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- jsonQR != null -->
                                                </core:if>
                                                <!-- (response_code != null) -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <!-- Brute force update existing Objective at this ordinal. It is just presales/SE code for demo setup. does not have to be pretty -->
                                            <!-- POST to create and/or update the Objective hierarchy level here -->
                                            <!--
                      POST - Create
                        https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition/create?fetch=true
                        {"TypeDefinition":{"Name":"Top","Workspace":"/workspace/643119226361","Parent":"/typedefinition/643119226969"}}

                      POST - Update
                        https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition/create
                        {"TypeDefinition":{"Name":"Top","Workspace":"/workspace/643119226361","Parent":"/typedefinition/643119226969"}}

                        https://rally1.rallydev.com//slm/webservice/v2.x/TypeDefinition/643783595833
                        {"TypeDefinition":{"IDPrefix":"TO"}}
                        {"TypeDefinition":{"AssociatedWorkType":"/typedefinition/643119464669"}}
                      -->
                                            <!--
                          ('BO, 2, Theme'          ,'Business Objective')
                          ('SO, 1, Epic'           ,'Strategic Objective')
                          ('TO, 0, Feature'        ,'Team Objective')

                        <core:set var="v_OTIDPref"    value=""/>
                        <core:set var="v_OTOrdinal"   value=""/>
                        <core:set var="v_OTAWTName"   value=""/>
                        <core:set var="v_OTAWTObjID"  value=""/>
                        <core:set var="v_OTNewName"   value=""/>
                        <core:set var="v_OTParObjID"  value=""/>

                        <core:set var="OType_Ordinal"     value="${mapOTypNameOrd.get(v_OTAWTName)}"/>
                        <core:set var="OType_Name"        value="${mapOTypOrdName.get(v_OTOrdinal)}"/>
                        <core:set var="OType_ObjectID"    value="${mapOTypOrdObjID.get(v_OTOrdinal)}"/>
                        <core:set var="OType_IDPrefix"    value="${mapOTypOrdIDPref.get(v_OTOrdinal)}"/>
                        <core:set var="OTAWT_ObjectID"    value="${mapOTypOrdAWTID.get(v_OTOrdinal)}"/>
                        <core:set var="OTAWT_ElementName" value="${mapOTypOrdAWTName.get(v_OTOrdinal)}"/>
                      -->
                                            <core:set value="${mapOTypOrdObjID.get(v_OTOrdinal)}" var="OType_ObjectID"/>
                                            <core:set value="${mapPITypNameObjId.get(v_OTAWTName)}" var="v_OTAWTObjID"/>
                                            <core:if test="${bDebug}">
                                              <gel:out>v_OTOrdinal    : ${v_OTOrdinal}</gel:out>
                                              <gel:out>OType_ObjectID : ${OType_ObjectID}</gel:out>
                                              <gel:out>v_OTNewName    : ${v_OTNewName}</gel:out>
                                              <gel:out>v_OTIDPref     : ${v_OTIDPref}</gel:out>
                                              <gel:out>v_OTAWTName    : ${v_OTAWTName}</gel:out>
                                              <gel:out>v_OTAWTObjID   : ${v_OTAWTObjID}</gel:out>
                                            </core:if>
                                            <!-- code Brute force update
                         Initial test, view queries
                         Initial test, Assume no OKRs
                         Creation by Ordinality (0->2)
                          -Change mapOKRTypes loop to walk proposed OKRs up from zero (0,1,2,etc.)
                     -->
                                            <!--
                      MJS 8/5/2022 +fetch via URI update
                      -->
                                            <!-- Update the Objective -->
                                            <core:set escapeText="false" var="updateOType">
                      { "TypeDefinition": {"Name":"${v_OTNewName}", "IDPrefix":"${v_OTIDPref}", "AssociatedWorkType":"/typedefinition/${v_OTAWTObjID}" } }
                    </core:set>
                                            <core:if test="${bDebug}">
                                              <gel:out>updateOType: ${updateOType}</gel:out>
                                            </core:if>
                                            <!-- Setup URL for target PI -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/TypeDefinition/${OType_ObjectID}</core:set>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}?workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(true)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;POST&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${!(bSkipRESTRename)}">
                                              <core:set value="${connection.connect()}" var="void"/>
                                              <core:set value="${connection.getOutputStream()}" var="v_os"/>
                                              <core:if test="${v_os != null}">
                                                <core:new className="java.io.OutputStreamWriter" var="wr">
                                                  <core:arg type="java.io.OutputStream" value="${v_os}"/>
                                                </core:new>
                                                <core:set value="${wr.write(updateOType)}" var="void"/>
                                                <core:set value="${wr.flush()}" var="void"/>
                                                <core:set value="${wr.close()}" var="void"/>
                                              </core:if>
                                              <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                              <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                              <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                <gel:out>response_msg :  ${response_msg}</gel:out>
                                                <gel:out>response_code:  ${response_code}</gel:out>
                                              </core:if>
                                              <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                              <core:set value="${null}" var="jsonQR"/>
                                              <core:if test="${response_code == null}">
                                                <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                    <gel:out/>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${response_code != null}">
                                                <core:if test="${response_code == 401}">
                                                  <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${httpInputStream == null}">
                                                  <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                  <core:if test="${bDebug502}">
                                                    <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                </core:if>
                                                <!-- OR -->
                                                <core:if test="${httpInputStream != null}">
                                                  <core:new className="java.io.InputStreamReader" var="v_Input">
                                                    <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                  </core:new>
                                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                  </core:new>
                                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>httpData: ${httpData}</gel:out>
                                                  </core:if>
                                                  <!-- free up some resources -->
                                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                  <!-- JSON Response -->
                                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                                  </core:new>
                                                  <core:if test="${bDebugJSON}">
                                                    <gel:out>jsonResp:</gel:out>
                                                    <gel:out>${jsonResp.toString(1)}</gel:out>
                                                    <gel:out>_______________________________________________</gel:out>
                                                    <gel:out>_______________________________________________</gel:out>
                                                  </core:if>
                                                </core:if>
                                                <!-- (httpInputStream != null) -->
                                                <core:if test="${response_code == 200}">
                                                  <core:set value="Update of Objective successful ${OType_Name}(${OType_ObjectID}) IDPrefix(${OType_IDPrefix}) AWT: ${OTAWT_ElementName}(${OTAWT_ObjectID})" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- (response_code != null) -->
                                            </core:if>
                                            <!-- !(bSkipRESTRename) -->
                                            <core:if test="${bDebug}">
                                              <gel:out>_______________________________________________</gel:out>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Sleeping...</gel:out>
                                            </core:if>
                                            <!-- Sleep for a second or two to wait for Rally to update -->
                                            <u:sleep millis="${sleepOKRms}"/>
                                            <core:if test="${bDebug}">
                                              <gel:out>We Back!</gel:out>
                                            </core:if>
                                          </core:while>
                                          <!-- keyOKRTypes.hasNext() -->
                                          <core:if test="${bDebug}">
                                            <gel:out/>
                                          </core:if>
                                          <core:if test="${bDebug}">
                                            <gel:out trim="false">End of OKR updates</gel:out>
                                          </core:if>
                                          <core:if test="${bDebug}">
                                            <gel:out/>
                                          </core:if>
                                          <!-- Kanban State changes -->
                                          <!--
                    Setup mapStateChange for KanbanState Name and Enabled or not
    
                    get TypeDef ObjectID for Feature
                      https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition?pagesize=200&fetch=Name,ObjectID,IDPrefix,Note,DisplayName,ElementName&query=((Parent.Name = "Portfolio Item") AND (Name = "Feature"))
                    Get list of States for Features:
                      https://rally1.rallydev.com/slm/webservice/v2.x/State?fetch=Name,ObjectID,OrderIndex,Enabled&query=(typeDef = "/typedefinition/607225528389")
                    Or 
                    Get list of States for Features:
                      https://rally1.rallydev.com/slm/webservice/v2.x/State?fetch=Name,ObjectID,OrderIndex,Enabled&query=(typeDef.Name = "Feature")
                    Save to mapStates on Name, ObjectID
                    Walk mapStateChange
                      POST update: Name, Enabled
    
                        <core:set var="void" value="${mapKSRename.put('1 ,0 ,Propose'          ,'No Entry')}"/>
                        <core:set var="void" value="${mapKSRename.put('1 ,1 ,Discover'         ,'Funnel')}"/>
                        <core:set var="void" value="${mapKSRename.put('1 ,1 ,Develop'          ,'Analyzing')}"/>
                        <core:set var="void" value="${mapKSRename.put('1 ,1 ,Validate'         ,'Backlog')}"/>
                        <core:set var="void" value="${mapKSRename.put('1 ,1 ,Internal Release' ,'Implementing')}"/>
                        <core:set var="void" value="${mapKSRename.put('1 ,1 ,Open Beta'        ,'Validation')}"/>
                     -->
                                          <!-- Check if we need to process kanbanState changes -->
                                          <core:if test="${(mapKSRename.size() &gt; 0)}">
                                            <core:new className="java.util.HashMap" var="mapKSNameId"/>
                                            <core:new className="java.util.HashMap" var="mapKSNameIndex"/>
                                            <!-- Get all the kanbanState values for Feature
                      https://rally1.rallydev.com/slm/webservice/v2.x/State?fetch=Name,ObjectID,OrderIndex,Enabled&query=(typeDef.Name = "Feature")
                       -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/State?query=(typeDef.Name${myBlnk}=${myBlnk}"Feature")</core:set>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=Name,ObjectID,OrderIndex,Enabled" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg15: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg15: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:new className="java.io.BufferedReader" var="v_InputData">
                                                  <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                </core:new>
                                                <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>httpData: ${httpData}</gel:out>
                                                </core:if>
                                                <!-- free up some resources -->
                                                <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                <!-- JSON Response -->
                                                <core:new className="org.json.JSONObject" var="jsonResp">
                                                  <core:arg type="java.lang.String" value="${httpData}"/>
                                                </core:new>
                                                <core:if test="${bDebugJSON}">
                                                  <gel:out>jsonResp:</gel:out>
                                                  <gel:out>${jsonResp.toString(1)}</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                </core:if>
                                                <!-- PortfolioItem, top level JSON object -->
                                                <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_UUID"/>
                                            <core:set value="" var="ral_ObjectID"/>
                                            <core:set value="" var="ral_Name"/>
                                            <core:set value="" var="ral_Enabled"/>
                                            <core:set value="" var="ral_EnabledBol"/>
                                            <core:set value="" var="ral_OrderInd"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                  <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                  <core:set value="${jsonRArray.getString('Enabled')}" var="ral_Enabled"/>
                                                  <core:set value="${jsonRArray.get('Enabled')}" var="ral_EnabledBol"/>
                                                  <core:set value="${jsonRArray.get('OrderIndex')}" var="ral_OrderInd"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                    <gel:out>ral_ObjectID  : ${ral_ObjectID}  (${ral_ObjectID.getClass()})</gel:out>
                                                    <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                    <gel:out>ral_Enabled   : ${ral_Enabled} (${ral_Enabled.getClass()})</gel:out>
                                                    <gel:out>ral_EnabledBol: ${ral_EnabledBol} (${ral_EnabledBol.getClass()})</gel:out>
                                                    <gel:out>ral_OrderInd  : ${ral_OrderInd} (${ral_OrderInd.getClass()})</gel:out>
                                                  </core:if>
                                                  <core:set value="${mapKSNameId.put(ral_Name,ral_ObjectID)}" var="void"/>
                                                  <core:set value="${mapKSNameIndex.put(ral_Name, ral_OrderInd)}" var="void"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out trim="false">Saving kanbanState: name[${ral_Name}] ral_ObjectID[${ral_ObjectID}] ral_OrderInd[${ral_OrderInd}] </gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID == null) || (ral_ObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: kanbanState for Feature. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>_______________________________________________</gel:out>
                                            </core:if>
                                            <core:set value="${mapKSRename.keySet()}" var="keysetKSRename"/>
                                            <core:set value="${keysetKSRename.iterator()}" var="keyKSRename"/>
                                            <core:while test="${keyKSRename.hasNext()}">
                                              <core:set value="${keyKSRename.next()}" var="tmpPIcode"/>
                                              <core:set value="${mapKSRename.get(tmpPIcode)}" var="tmpName"/>
                                              <core:set value="${tmpName.trim()}" var="tmpName"/>
                                              <core:set value="${tmpName.replace(' ',myBlnk)}" var="strTempName"/>
                                              <core:if test="${bDebug}">
                                                <gel:out/>
                                                <gel:out trim="false">KSRename: tmpPIcode[${tmpPIcode}] tmpName[${tmpName}] strTempName[${strTempName}]  </gel:out>
                                              </core:if>
                                              <!-- ('1 ,I ,E ,Initiative ', 'Epic')
                              ('1 ,0 ,Propose'          ,'No Entry')
                              ('1 ,1 ,Discover'         ,'Funnel')
                              ('1 ,1 ,Develop'          ,'Analyzing')
                              ('1 ,1 ,Validate'         ,'Backlog')
                              ('1 ,1 ,Internal Release' ,'Implementing')
                              ('1 ,1 ,Open Beta'        ,'Validation')
                         -->
                                              <core:set value="${tmpPIcode.split(',')}" var="tmpPIcode"/>
                                              <!-- split the PI keys on the commas -->
                                              <core:set value="" var="v_PILvl"/>
                                              <core:set value="" var="v_KSEnable"/>
                                              <core:set value="" var="v_KSCurName"/>
                                              <core:set value="" var="v_KSNewName"/>
                                              <core:if test="${(tmpPIcode.size() ge 1)}">
                                                <core:set value="${tmpPIcode[0].trim()}" var="v_PILvl"/>
                                              </core:if>
                                              <core:if test="${(tmpPIcode.size() ge 2)}">
                                                <core:set value="${tmpPIcode[1].trim()}" var="v_KSEnable"/>
                                              </core:if>
                                              <core:if test="${(tmpPIcode.size() ge 3)}">
                                                <core:set value="${tmpPIcode[2]}" var="v_KSCurName"/>
                                              </core:if>
                                              <core:set value="${tmpName}" var="v_KSNewName"/>
                                              <core:if test="${bDebug}">
                                                <gel:out/>
                                              </core:if>
                                              <core:if test="${bDebug}">
                                                <gel:out>RenameKS: size(${arrPIcode.size()}) v_PILvl(${v_PILvl}) v_KSEnable(${v_KSEnable}) v_KSCurName(${v_KSCurName}) v_KSNewName(${v_KSNewName})</gel:out>
                                              </core:if>
                                              <core:set value="" var="v_KSCurObjId"/>
                                              <core:set value="" var="v_KSCurOrderInd"/>
                                              <core:set value="${mapKSNameId.get(v_KSCurName)}" var="v_KSCurObjId"/>
                                              <core:set value="${mapKSNameIndex.get(v_KSCurName)}" var="v_KSCurOrderInd"/>
                                              <core:if test="${bDebug}">
                                                <gel:out>RenameKS Found: Name(${v_KSCurName}) v_KSCurObjId(${v_KSCurObjId}) v_KSCurOrderInd(${v_KSCurOrderInd}) </gel:out>
                                              </core:if>
                                              <!-- POST to changet the PI Type here -->
                                              <!--
                        POST  
                          https://rally1.rallydev.com/slm/webservice/v2.x/TypeDefinition/607225528417
                          {"TypeDefinition":{"Name":"Epic","IDPrefix":"E"}}
                          https://rally1.rallydev.com/slm/webservice/v2.x/State/618738578443
                          {"State":{"Name":"Propose"}} 
                          {"State":{"Enabled":false}}
                        -->
                                              <core:if test="${((v_KSCurObjId == null) || (v_KSCurObjId.length() == 0))}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>Not found: kanbanState Type to rename. </gel:out>
                                                </core:if>
                                              </core:if>
                                              <!-- jsonQR != null -->
                                              <core:if test="${((v_KSCurObjId != null) &amp;&amp; (v_KSCurObjId.length() gt 0))}">
                                                <!-- We found the current KState. Now Rename it -->
                                                <core:set escapeText="false" var="renameKState">{ "State": { "Name": "${v_KSNewName}"</core:set>
                                                <core:if test="${(v_KSEnable == 0)}">
                                                  <core:set escapeText="false" var="renameKState">${renameKState}, "Enabled": false } }</core:set>
                                                </core:if>
                                                <core:set escapeText="false" var="renameKState">${renameKState} } }</core:set>
                                                <core:if test="${bDebug}">
                                                  <gel:out>renameKState: ${renameKState}</gel:out>
                                                </core:if>
                                                <!-- Setup URL for target PI -->
                                                <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/State/${v_KSCurObjId}</core:set>
                                                <core:set value="${httpRESTURL}?fetch=Name,ObjectID,Enabled,OrderIndex" var="httpRESTURL"/>
                                                <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                  <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                                </core:if>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                                </core:if>
                                                <core:new className="java.net.URL" var="remoteURL">
                                                  <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                                </core:new>
                                                <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                                <core:set value="${connection.setDoInput(true)}" var="void"/>
                                                <core:set value="${connection.setDoOutput(true)}" var="void"/>
                                                <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                                <core:expr value="${connection.setRequestMethod(&quot;POST&quot;)}"/>
                                                <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                                <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                                <core:if test="${v_RRauth_type.equals('API')}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="zsessionid"/>
                                                    <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                  </core:invoke>
                                                </core:if>
                                                <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                  <core:if test="${v_RRencoded != null}">
                                                    <!-- AND -->
                                                    <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                      <core:invoke method="setRequestProperty" on="${connection}">
                                                        <core:arg type="java.lang.String" value="Authorization"/>
                                                        <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                      </core:invoke>
                                                    </core:if>
                                                  </core:if>
                                                </core:if>
                                                <core:if test="${!(bSkipRESTRename)}">
                                                  <core:set value="${connection.connect()}" var="void"/>
                                                  <core:set value="${connection.getOutputStream()}" var="v_os"/>
                                                  <core:if test="${v_os != null}">
                                                    <core:new className="java.io.OutputStreamWriter" var="wr">
                                                      <core:arg type="java.io.OutputStream" value="${v_os}"/>
                                                    </core:new>
                                                    <core:set value="${wr.write(renameKState)}" var="void"/>
                                                    <core:set value="${wr.flush()}" var="void"/>
                                                    <core:set value="${wr.close()}" var="void"/>
                                                  </core:if>
                                                  <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                  <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                  <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                    <gel:out>response_msg :  ${response_msg}</gel:out>
                                                    <gel:out>response_code:  ${response_code}</gel:out>
                                                  </core:if>
                                                  <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                  <core:set value="${null}" var="jsonQR"/>
                                                  <core:if test="${response_code == null}">
                                                    <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                    <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                        <gel:out/>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${response_code != null}">
                                                    <core:if test="${response_code == 401}">
                                                      <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="WARN">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                    <core:if test="${httpInputStream == null}">
                                                      <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="WARN">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                      <core:if test="${bDebug502}">
                                                        <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                        <core:choose>
                                                          <core:when test="${gel_processId == null}">
                                                            <gel:out>${logMessage}</gel:out>
                                                          </core:when>
                                                          <core:otherwise>
                                                            <gel:log level="INFO">${logMessage}</gel:log>
                                                          </core:otherwise>
                                                        </core:choose>
                                                      </core:if>
                                                    </core:if>
                                                    <!-- OR -->
                                                    <core:if test="${httpInputStream != null}">
                                                      <core:new className="java.io.InputStreamReader" var="v_Input">
                                                        <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                      </core:new>
                                                      <core:new className="java.io.BufferedReader" var="v_InputData">
                                                        <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                      </core:new>
                                                      <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                      <core:if test="${bDebugREST}">
                                                        <gel:out>httpData: ${httpData}</gel:out>
                                                      </core:if>
                                                      <!-- free up some resources -->
                                                      <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                      <!-- JSON Response -->
                                                      <core:new className="org.json.JSONObject" var="jsonResp">
                                                        <core:arg type="java.lang.String" value="${httpData}"/>
                                                      </core:new>
                                                      <core:if test="${bDebugJSON}">
                                                        <gel:out>jsonResp:</gel:out>
                                                        <gel:out>${jsonResp.toString(1)}</gel:out>
                                                        <gel:out>_______________________________________________</gel:out>
                                                        <gel:out>_______________________________________________</gel:out>
                                                      </core:if>
                                                    </core:if>
                                                    <!-- (httpInputStream != null) -->
                                                    <core:if test="${response_code == 200}">
                                                      <core:set value="Rename successful for kanbanState from ${v_KSCurName}(${v_KSCurObjId}) to ${v_KSNewName} " var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="INFO">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- (response_code != null) -->
                                                </core:if>
                                                <!-- !(bSkipRESTRename) -->
                                              </core:if>
                                              <!-- Found the KState to rename... ((v_KSCurObjId != null) &amp;&amp; (v_KSCurObjId.length() gt 0)) -->
                                              <core:if test="${bDebug}">
                                                <gel:out>Sleeping...</gel:out>
                                              </core:if>
                                              <!-- Sleep for 1.1 seconds to wait for Rally to update -->
                                              <u:sleep millis="1100"/>
                                              <core:if test="${bDebug}">
                                                <gel:out>We Back!</gel:out>
                                              </core:if>
                                            </core:while>
                                            <!-- keyKSRename.hasNext() -->
                                          </core:if>
                                          <!-- (mapKSRename.size() > 0) -->
                                          <!-- Lookup the top level PIs by name. Save the current Format IDs -->
                                          <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                          <core:set value="${mapPIFmtId.clear()}" var="void"/>
                                          <!-- Workspace - Get the ObjectIDs for all workspaces -->
                                          <core:set value="${mapPIName.keySet()}" var="keysetPIName"/>
                                          <core:set value="${keysetPIName.iterator()}" var="keyPIName"/>
                                          <core:while test="${keyPIName.hasNext()}">
                                            <core:set value="${keyPIName.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapPIName.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="tmpName"/>
                                            <core:set value="${tmpName.replace(' ',myBlnk)}" var="strTempName"/>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                              <gel:out trim="false">PI: tmpPIcode[${tmpPIcode}] tmpName[${tmpName}] strTempName[${strTempName}]  </gel:out>
                                            </core:if>
                                            <!-- Search by Name -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(Name${myBlnk}=${myBlnk}"${strTempName}")</core:set>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:new className="java.io.BufferedReader" var="v_InputData">
                                                  <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                </core:new>
                                                <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>httpData: ${httpData}</gel:out>
                                                </core:if>
                                                <!-- free up some resources -->
                                                <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                <!-- JSON Response -->
                                                <core:new className="org.json.JSONObject" var="jsonResp">
                                                  <core:arg type="java.lang.String" value="${httpData}"/>
                                                </core:new>
                                                <core:if test="${bDebugJSON}">
                                                  <gel:out>jsonResp:</gel:out>
                                                  <gel:out>${jsonResp.toString(1)}</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                </core:if>
                                                <!-- PortfolioItem, top level JSON object -->
                                                <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_UUID"/>
                                            <core:set value="" var="ral_ObjectID"/>
                                            <core:set value="" var="ral_Name"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                  <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                  <core:set value="${jsonRArray.getString('FormattedID')}" var="ral_FmtID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                    <gel:out>ral_FmtID     : ${ral_FmtID}</gel:out>
                                                    <gel:out>ral_ObjectID  : ${ral_ObjectID}  (${ral_ObjectID.getClass()})</gel:out>
                                                    <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                  </core:if>
                                                  <core:set value="${mapPIFmtId.put(tmpPIcode,ral_FmtID)}" var="void"/>
                                                  <core:set value="${mapPIMoveName.put(tmpPIcode, ral_Name)}" var="void"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out trim="false">Saving PI: tmpPIcode[${tmpPIcode}] ral_FmtID[${ral_FmtID}] ral_ObjectID[${ral_ObjectID}] for tmpName[${tmpName}]</gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID == null) || (ral_ObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: PI by Name. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>_______________________________________________</gel:out>
                                            </core:if>
                                          </core:while>
                                          <!-- keyPIName.hasNext() -->
                                          <!-- Walk the list of PIs that we want to rename -->
                                          <core:set value="${mapPINameOld.keySet()}" var="keysetPINameOld"/>
                                          <core:set value="${keysetPINameOld.iterator()}" var="keyPINameOld"/>
                                          <core:while test="${keyPINameOld.hasNext()}">
                                            <core:set value="${keyPINameOld.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapPINameOld.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="arrPIName1"/>
                                            <core:set value="${tmpPIcode.split(',')}" var="arrPIcode"/>
                                            <!-- split the PI keys on the commas -->
                                            <core:set value="" var="arrPILvl"/>
                                            <core:set value="" var="arrPIcode1"/>
                                            <core:if test="${(arrPIcode.size() ge 1)}">
                                              <core:set value="${arrPIcode[0].trim()}" var="arrPILvl"/>
                                            </core:if>
                                            <core:if test="${(arrPIcode.size() ge 2)}">
                                              <core:set value="${arrPIcode[1].trim()}" var="arrPIcode1"/>
                                            </core:if>
                                            <core:set value="" var="tmpName"/>
                                            <core:set value="${mapPINameNew.get(arrPIcode1)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="arrPIName2"/>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Rename Old: Lvl(${arrPILvl}) PICode(${arrPIcode1}) NameOld(${arrPIName1})  </gel:out>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Rename New: Lvl(${arrPILvl}) PICode(${arrPIcode1}) NameNew(${arrPIName2})  </gel:out>
                                            </core:if>
                                            <!-- process PortfolioItems -->
                                            <core:set value="PortfolioItem" var="v_RR_pi_type"/>
                                            <!-- Portfolio Item Type -->
                                            <core:if test="${(arrPILvl eq 0)}">
                                              <core:set value="PortfolioItem/theme" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 1)}">
                                              <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 2)}">
                                              <core:set value="PortfolioItem/${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 3)}">
                                              <core:set value="hierarchicalrequirement" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                              <core:set value="${mapPIFmtId.get(arrPIcode1)}" var="vNewPICode"/>
                                              <core:if test="${((vNewPICode != null) &amp;&amp; (vNewPICode.length() gt 0))}">
                                                <core:set value="${vNewPICode}" var="arrPIcode1"/>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Rename: arrPIcode1(${arrPIcode1})</gel:out>
                                            </core:if>
                                            <core:set value="${arrPIName1.replace(' ',myBlnk)}" var="strTempName"/>
                                            <core:if test="${bDebug}">
                                              <gel:out>arrPIName1[${arrPIName1}] strTempName[${strTempName}] </gel:out>
                                            </core:if>
                                            <!-- Search by Name -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(Name${myBlnk}=${myBlnk}"${strTempName}")</core:set>
                                            <!-- Search by Name and FormattedID -->
                                            <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(FormattedID${myBlnk}=${myBlnk}"${arrPIcode1}"))</core:set>
                                            </core:if>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:if test="${v_Input != null}">
                                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                  </core:new>
                                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>httpData: ${httpData}</gel:out>
                                                  </core:if>
                                                  <!-- free up some resources -->
                                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                  <!-- JSON Response -->
                                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                                  </core:new>
                                                  <core:if test="${bDebugJSON}">
                                                    <gel:out>jsonResp:</gel:out>
                                                    <gel:out>${jsonResp.toString(1)}</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                  </core:if>
                                                  <!-- PortfolioItem, top level JSON object -->
                                                  <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                                </core:if>
                                                <!-- (v_Input != null) -->
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_UUID"/>
                                            <core:set value="" var="ral_ObjectID"/>
                                            <core:set value="" var="ral_Name"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                  <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                    <gel:out>ral_ObjectID  : ${ral_ObjectID} ${ral_ObjectID.getClass()}</gel:out>
                                                    <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID == null) || (ral_ObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: PI to rename. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID != null) &amp;&amp; (ral_ObjectID.length() gt 0))}">
                                              <!-- We found the PI. Now Rename it -->
                                              <!-- If needed, change Notes to a custom field
                        { "Feature": { "Parent": "e994f185-76e3-486d-9531-4c4abd5e8219" } }
                        { "Feature": { "Parent": "140509207648" } }
                         -->
                                              <core:set escapeText="false" var="renameFeature">
                        { "Feature": { "Name": "${arrPIName2}" } }
                      </core:set>
                                              <core:if test="${bDebug}">
                                                <gel:out>renameFeature       : ${renameFeature}</gel:out>
                                              </core:if>
                                              <!-- Setup URL for target PI -->
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}/${ral_ObjectID}</core:set>
                                              <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                <core:set encode="false" var="httpRESTURL">${httpRESTURL}?workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                              </core:if>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                              </core:if>
                                              <core:new className="java.net.URL" var="remoteURL">
                                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                              </core:new>
                                              <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                              <core:set value="${connection.setDoInput(true)}" var="void"/>
                                              <core:set value="${connection.setDoOutput(true)}" var="void"/>
                                              <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                              <core:expr value="${connection.setRequestMethod(&quot;POST&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                              <core:if test="${v_RRauth_type.equals('API')}">
                                                <core:invoke method="setRequestProperty" on="${connection}">
                                                  <core:arg type="java.lang.String" value="zsessionid"/>
                                                  <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                </core:invoke>
                                              </core:if>
                                              <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                <core:if test="${v_RRencoded != null}">
                                                  <!-- AND -->
                                                  <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                    <core:invoke method="setRequestProperty" on="${connection}">
                                                      <core:arg type="java.lang.String" value="Authorization"/>
                                                      <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                    </core:invoke>
                                                  </core:if>
                                                </core:if>
                                              </core:if>
                                              <core:if test="${!(bSkipRESTRename)}">
                                                <core:set value="${connection.connect()}" var="void"/>
                                                <core:set value="${connection.getOutputStream()}" var="v_os"/>
                                                <core:if test="${v_os != null}">
                                                  <core:new className="java.io.OutputStreamWriter" var="wr">
                                                    <core:arg type="java.io.OutputStream" value="${v_os}"/>
                                                  </core:new>
                                                  <core:set value="${wr.write(renameFeature)}" var="void"/>
                                                  <core:set value="${wr.flush()}" var="void"/>
                                                  <core:set value="${wr.close()}" var="void"/>
                                                </core:if>
                                                <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                  <gel:out>response_msg :  ${response_msg}</gel:out>
                                                  <gel:out>response_code:  ${response_code}</gel:out>
                                                </core:if>
                                                <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                <core:set value="${null}" var="jsonQR"/>
                                                <core:if test="${response_code == null}">
                                                  <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                  <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                      <gel:out/>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${response_code != null}">
                                                  <core:if test="${response_code == 401}">
                                                    <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${httpInputStream == null}">
                                                    <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                    <core:if test="${bDebug502}">
                                                      <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="INFO">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- OR -->
                                                  <core:if test="${httpInputStream != null}">
                                                    <core:new className="java.io.InputStreamReader" var="v_Input">
                                                      <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                    </core:new>
                                                    <core:new className="java.io.BufferedReader" var="v_InputData">
                                                      <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                    </core:new>
                                                    <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                    <core:if test="${bDebugREST}">
                                                      <gel:out>httpData: ${httpData}</gel:out>
                                                    </core:if>
                                                    <!-- free up some resources -->
                                                    <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                    <!-- JSON Response -->
                                                    <core:new className="org.json.JSONObject" var="jsonResp">
                                                      <core:arg type="java.lang.String" value="${httpData}"/>
                                                    </core:new>
                                                    <core:if test="${bDebugJSON}">
                                                      <gel:out>jsonResp:</gel:out>
                                                      <gel:out>${jsonResp.toString(1)}</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- (httpInputStream != null) -->
                                                  <core:if test="${response_code == 200}">
                                                    <!-- Search by Name only -->
                                                    <core:set value="Move successful of ${v_RR_pi_type}(${ral_ObjectID}): " var="logMessage"/>
                                                    <!-- Add parent PI -->
                                                    <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                                                      <core:set value="${logMessage}[${arrPIcode2}] " var="logMessage"/>
                                                    </core:if>
                                                    <!-- Add target PI -->
                                                    <core:if test="${((arrPIcode3 != null) &amp;&amp; (arrPIcode3.length() gt 0))}">
                                                      <core:set value="${logMessage}to [${arrPIcode3}], " var="logMessage"/>
                                                    </core:if>
                                                    <!-- Add current PI -->
                                                    <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                                      <core:set value="${logMessage}for [${arrPIcode1}] " var="logMessage"/>
                                                    </core:if>
                                                    <core:set value="${logMessage}${tmpName}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                </core:if>
                                                <!-- (response_code != null) -->
                                              </core:if>
                                              <!-- !(bSkipRESTRename) -->
                                            </core:if>
                                            <!-- Found the PI to move... ((ral_ObjectID != null) &amp;&amp; (ral_ObjectID.length() gt 0)) -->
                                          </core:while>
                                          <!-- keyPIName.hasNext() -->
                                          <!-- Feature Dependencies - for Rally Timeline
                      Add Dependencies: 15 on 27, 31 on 34
                      Add Dependencies: 28 on 16, 17 on 45,48
                    <core:set var="void" value="${mapPIDep.put('2, F15, 1'  ,'F27')}"/>
                    <core:set var="void" value="${mapPIDep.put('2, F31, 1'  ,'F34')}"/>
                    <core:set var="void" value="${mapPIDep.put('2, F28, 1'  ,'F16')}"/>
                    <core:set var="void" value="${mapPIDep.put('2, F17, 1'  ,'F45')}"/>
                    <core:set var="void" value="${mapPIDep.put('2, F17, 2'  ,'F48')}"/>
                    https://rally1.rallydev.com/slm/webservice/v2.x/batch
                    { "Batch": [ { "Entry": {
                      "Path": "/portfolioitem/feature/619162534609/predecessors/add",
                      "Method": "post",
                      "Body": {
                        "CollectionItems": [ 
                          { "_ref": "/portfolioitem/feature/619162663607" } 
                        ] 
                    } } } ] }        
                    -->
                                          <!-- Walk the list of PIs that we want to Link Dependencies -->
                                          <core:set value="${mapPIDep.keySet()}" var="keysetPIDep"/>
                                          <core:set value="${keysetPIDep.iterator()}" var="keyPIDep"/>
                                          <core:while test="${keyPIDep.hasNext()}">
                                            <core:set value="${keyPIDep.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapPIDep.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="arrPIDepOn"/>
                                            <core:set value="${tmpPIcode.split(',')}" var="arrPIcode"/>
                                            <!-- split the PI keys on the commas -->
                                            <core:set value="" var="arrPILvl"/>
                                            <core:set value="" var="arrPIcode1"/>
                                            <core:if test="${(arrPIcode.size() ge 1)}">
                                              <core:set value="${arrPIcode[0].trim()}" var="arrPILvl"/>
                                            </core:if>
                                            <core:if test="${(arrPIcode.size() ge 2)}">
                                              <core:set value="${arrPIcode[1].trim()}" var="arrPIcode1"/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Dependency: Lvl(${arrPILvl}) Feature(${arrPIcode1}) DepOn(${arrPIDepOn})  </gel:out>
                                            </core:if>
                                            <!-- process PortfolioItems -->
                                            <core:set value="PortfolioItem" var="v_RR_pi_type"/>
                                            <!-- Portfolio Item Type -->
                                            <core:if test="${(arrPILvl eq 0)}">
                                              <core:set value="PortfolioItem/theme" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 1)}">
                                              <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 2)}">
                                              <core:set value="PortfolioItem/${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 3)}">
                                              <core:set value="hierarchicalrequirement" var="v_RR_pi_type"/>
                                            </core:if>
                                            <!-- Get first Feature -->
                                            <!-- Search by FormattedID -->
                                            <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(FormattedID${myBlnk}=${myBlnk}"${arrPIcode1}")</core:set>
                                            </core:if>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:if test="${v_Input != null}">
                                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                  </core:new>
                                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>httpData: ${httpData}</gel:out>
                                                  </core:if>
                                                  <!-- free up some resources -->
                                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                  <!-- JSON Response -->
                                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                                  </core:new>
                                                  <core:if test="${bDebugJSON}">
                                                    <gel:out>jsonResp:</gel:out>
                                                    <gel:out>${jsonResp.toString(1)}</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                  </core:if>
                                                  <!-- PortfolioItem, top level JSON object -->
                                                  <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                                </core:if>
                                                <!-- (v_Input != null) -->
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_FeaUUID"/>
                                            <core:set value="" var="ral_FeaObjectID"/>
                                            <core:set value="" var="ral_FeaName"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_FeaName"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_FeaObjectID"/>
                                                  <core:set value="${ral_FeaObjectID.trim()}" var="ral_FeaObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_FeaUUID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_FeaName      : ${ral_FeaName}</gel:out>
                                                    <gel:out>ral_FeaObjectID  : ${ral_FeaObjectID} ${ral_FeaObjectID.getClass()}</gel:out>
                                                    <gel:out>ral_FeaUUID      : ${ral_FeaUUID}</gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_FeaObjectID == null) || (ral_FeaObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: First Feature for Dependency Link. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <!-- Get second Feature -->
                                            <!-- Search by FormattedID -->
                                            <core:if test="${((arrPIDepOn != null) &amp;&amp; (arrPIDepOn.length() gt 0))}">
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(FormattedID${myBlnk}=${myBlnk}"${arrPIDepOn}")</core:set>
                                            </core:if>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:if test="${v_Input != null}">
                                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                  </core:new>
                                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>httpData: ${httpData}</gel:out>
                                                  </core:if>
                                                  <!-- free up some resources -->
                                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                  <!-- JSON Response -->
                                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                                  </core:new>
                                                  <core:if test="${bDebugJSON}">
                                                    <gel:out>jsonResp:</gel:out>
                                                    <gel:out>${jsonResp.toString(1)}</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                  </core:if>
                                                  <!-- PortfolioItem, top level JSON object -->
                                                  <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                                </core:if>
                                                <!-- (v_Input != null) -->
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_FOnUUID"/>
                                            <core:set value="" var="ral_FOnObjectID"/>
                                            <core:set value="" var="ral_FOnName"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_FOnName"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_FOnObjectID"/>
                                                  <core:set value="${ral_FOnObjectID.trim()}" var="ral_FOnObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_FOnUUID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_FOnName      : ${ral_FOnName}</gel:out>
                                                    <gel:out>ral_FOnObjectID  : ${ral_FOnObjectID} ${ral_FOnObjectID.getClass()}</gel:out>
                                                    <gel:out>ral_FOnUUID      : ${ral_FOnUUID}</gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_FOnObjectID == null) || (ral_FOnObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: Second Feature for Dependency Link On. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${(((ral_FeaObjectID != null) &amp;&amp; (ral_FeaObjectID.length() gt 0)) &amp;&amp;                                       ((ral_FOnObjectID != null) &amp;&amp; (ral_FOnObjectID.length() gt 0)) )}">
                                              <!-- We found both Features. Now link the Dependency -->
                                              <!-- 
                        <core:set var="void" value="${mapPIDep.put('2, F17 '  ,'F48')}"/>
                        https://rally1.rallydev.com/slm/webservice/v2.x/batch
                        { "Batch": [ { "Entry": {
                          "Path": "/portfolioitem/feature/619162534609/predecessors/add",
                          "Method": "post",
                          "Body": {
                            "CollectionItems": [ 
                              { "_ref": "/portfolioitem/feature/619162663607" } 
                            ] 
                        } } } ] }        
                        -->
                                              <core:set escapeText="false" var="renameFeature">
                        { "Batch": [ { "Entry": {
                          "Path": "/portfolioitem/feature/${ral_FeaObjectID}/predecessors/add",
                          "Method": "post",
                          "Body": { "CollectionItems": [ { "_ref": "/portfolioitem/feature/${ral_FOnObjectID}" } ] 
                        } } } ] }        
                      </core:set>
                                              <core:if test="${bDebug}">
                                                <gel:out>renameFeature Dependency       : ${renameFeature}</gel:out>
                                              </core:if>
                                              <!-- Setup URL for Dependency link -->
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/batch</core:set>
                                              <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                <core:set encode="false" var="httpRESTURL">${httpRESTURL}?workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                              </core:if>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                              </core:if>
                                              <core:new className="java.net.URL" var="remoteURL">
                                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                              </core:new>
                                              <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                              <core:set value="${connection.setDoInput(true)}" var="void"/>
                                              <core:set value="${connection.setDoOutput(true)}" var="void"/>
                                              <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                              <core:expr value="${connection.setRequestMethod(&quot;POST&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                              <core:if test="${v_RRauth_type.equals('API')}">
                                                <core:invoke method="setRequestProperty" on="${connection}">
                                                  <core:arg type="java.lang.String" value="zsessionid"/>
                                                  <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                </core:invoke>
                                              </core:if>
                                              <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                <core:if test="${v_RRencoded != null}">
                                                  <!-- AND -->
                                                  <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                    <core:invoke method="setRequestProperty" on="${connection}">
                                                      <core:arg type="java.lang.String" value="Authorization"/>
                                                      <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                    </core:invoke>
                                                  </core:if>
                                                </core:if>
                                              </core:if>
                                              <core:if test="${!(bSkipRESTRename)}">
                                                <core:set value="${connection.connect()}" var="void"/>
                                                <core:set value="${connection.getOutputStream()}" var="v_os"/>
                                                <core:if test="${v_os != null}">
                                                  <core:new className="java.io.OutputStreamWriter" var="wr">
                                                    <core:arg type="java.io.OutputStream" value="${v_os}"/>
                                                  </core:new>
                                                  <core:set value="${wr.write(renameFeature)}" var="void"/>
                                                  <core:set value="${wr.flush()}" var="void"/>
                                                  <core:set value="${wr.close()}" var="void"/>
                                                </core:if>
                                                <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                  <gel:out>response_msg :  ${response_msg}</gel:out>
                                                  <gel:out>response_code:  ${response_code}</gel:out>
                                                </core:if>
                                                <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                <core:set value="${null}" var="jsonQR"/>
                                                <core:if test="${response_code == null}">
                                                  <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                  <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                      <gel:out/>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${response_code != null}">
                                                  <core:if test="${response_code == 401}">
                                                    <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${httpInputStream == null}">
                                                    <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                    <core:if test="${bDebug502}">
                                                      <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="INFO">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- OR -->
                                                  <core:if test="${httpInputStream != null}">
                                                    <core:new className="java.io.InputStreamReader" var="v_Input">
                                                      <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                    </core:new>
                                                    <core:new className="java.io.BufferedReader" var="v_InputData">
                                                      <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                    </core:new>
                                                    <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                    <core:if test="${bDebugREST}">
                                                      <gel:out>httpData: ${httpData}</gel:out>
                                                    </core:if>
                                                    <!-- free up some resources -->
                                                    <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                    <!-- JSON Response -->
                                                    <core:new className="org.json.JSONObject" var="jsonResp">
                                                      <core:arg type="java.lang.String" value="${httpData}"/>
                                                    </core:new>
                                                    <core:if test="${bDebugJSON}">
                                                      <gel:out>jsonResp:</gel:out>
                                                      <gel:out>${jsonResp.toString(1)}</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- (httpInputStream != null) -->
                                                  <core:if test="${response_code == 200}">
                                                    <!-- Search by Name only -->
                                                    <core:set value="Dependency Link successful for Feature(${ral_FeaObjectID})${arrPIcode1}: ${ral_FeaName}  on Feature(${ral_FOnObjectID})${arrPIDepOn}: ${ral_FOnName}" var="logMessage"/>
                                                    <core:set value="${logMessage}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                </core:if>
                                                <!-- (response_code != null) -->
                                              </core:if>
                                              <!-- !(bSkipRESTRename) -->
                                            </core:if>
                                            <!-- Found Both PIs to Link Dependency-->
                                          </core:while>
                                          <!-- keyPIDep.hasNext() -->
                                          <!-- Feature WSJF Scores - for Portfolio Kanban
                       WSJF Scores: 3 5 8 12 20 32
                    <core:set var="void" value="${mapPIWsjf.put('2, F1'   ,'20')}"/>
                    <core:set var="void" value="${mapPIWsjf.put('2, F45'  ,'20')}"/>
                    <core:set var="void" value="${mapPIWsjf.put('2, F44'  ,'12')}"/>
                    { 
                      "WSJFScore": 0
                    }        
                    -->
                                          <!-- Walk the list of PIs that we want to set WSJF -->
                                          <core:set value="${mapPIWsjf.keySet()}" var="keysetPIWsjf"/>
                                          <core:set value="${keysetPIWsjf.iterator()}" var="keyPIWsjf"/>
                                          <core:while test="${keyPIWsjf.hasNext()}">
                                            <core:set value="${keyPIWsjf.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapPIWsjf.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="arrPIWsjf"/>
                                            <core:set value="${tmpPIcode.split(',')}" var="arrPIcode"/>
                                            <!-- split the PI keys on the commas -->
                                            <core:set value="" var="arrPILvl"/>
                                            <core:set value="" var="arrPIcode1"/>
                                            <core:if test="${(arrPIcode.size() ge 1)}">
                                              <core:set value="${arrPIcode[0].trim()}" var="arrPILvl"/>
                                            </core:if>
                                            <core:if test="${(arrPIcode.size() ge 2)}">
                                              <core:set value="${arrPIcode[1].trim()}" var="arrPIcode1"/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>WSJF: Lvl(${arrPILvl}) Feature(${arrPIcode1}) WSJF(${arrPIWsjf})  </gel:out>
                                            </core:if>
                                            <!-- process PortfolioItems -->
                                            <core:set value="PortfolioItem" var="v_RR_pi_type"/>
                                            <!-- Portfolio Item Type -->
                                            <core:if test="${(arrPILvl eq 0)}">
                                              <core:set value="PortfolioItem/theme" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 1)}">
                                              <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 2)}">
                                              <core:set value="PortfolioItem/${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 3)}">
                                              <core:set value="hierarchicalrequirement" var="v_RR_pi_type"/>
                                            </core:if>
                                            <!-- Get first Feature -->
                                            <!-- Search by FormattedID -->
                                            <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(FormattedID${myBlnk}=${myBlnk}"${arrPIcode1}")</core:set>
                                            </core:if>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:if test="${v_Input != null}">
                                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                  </core:new>
                                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>httpData: ${httpData}</gel:out>
                                                  </core:if>
                                                  <!-- free up some resources -->
                                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                  <!-- JSON Response -->
                                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                                  </core:new>
                                                  <core:if test="${bDebugJSON}">
                                                    <gel:out>jsonResp:</gel:out>
                                                    <gel:out>${jsonResp.toString(1)}</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                  </core:if>
                                                  <!-- PortfolioItem, top level JSON object -->
                                                  <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                                </core:if>
                                                <!-- (v_Input != null) -->
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_UUID"/>
                                            <core:set value="" var="ral_ObjectID"/>
                                            <core:set value="" var="ral_Name"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                  <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                    <gel:out>ral_ObjectID  : ${ral_ObjectID} ${ral_ObjectID.getClass()}</gel:out>
                                                    <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID == null) || (ral_ObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: Feature for WSJF </gel:out>
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID != null) &amp;&amp; (ral_ObjectID.length() gt 0))}">
                                              <!-- We found Feature. Now set the WSJF -->
                                              <!-- 
                        <core:set var="void" value="${mapPIWsjf.put('2, F1'   ,'20')}"/>
                        { "Feature": { "WSJFScore": 0 } }
                        -->
                                              <core:set escapeText="false" var="renameFeature">
                        { "Feature": { "WSJFScore": "${arrPIWsjf}" } }
                      </core:set>
                                              <core:if test="${bDebug}">
                                                <gel:out>renameFeature WSJF       : ${renameFeature}</gel:out>
                                              </core:if>
                                              <!-- Setup URL for target PI -->
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}/${ral_ObjectID}</core:set>
                                              <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                <core:set encode="false" var="httpRESTURL">${httpRESTURL}?workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                              </core:if>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                              </core:if>
                                              <core:new className="java.net.URL" var="remoteURL">
                                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                              </core:new>
                                              <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                              <core:set value="${connection.setDoInput(true)}" var="void"/>
                                              <core:set value="${connection.setDoOutput(true)}" var="void"/>
                                              <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                              <core:expr value="${connection.setRequestMethod(&quot;POST&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                              <core:if test="${v_RRauth_type.equals('API')}">
                                                <core:invoke method="setRequestProperty" on="${connection}">
                                                  <core:arg type="java.lang.String" value="zsessionid"/>
                                                  <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                </core:invoke>
                                              </core:if>
                                              <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                <core:if test="${v_RRencoded != null}">
                                                  <!-- AND -->
                                                  <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                    <core:invoke method="setRequestProperty" on="${connection}">
                                                      <core:arg type="java.lang.String" value="Authorization"/>
                                                      <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                    </core:invoke>
                                                  </core:if>
                                                </core:if>
                                              </core:if>
                                              <core:if test="${!(bSkipRESTRename)}">
                                                <core:set value="${connection.connect()}" var="void"/>
                                                <core:set value="${connection.getOutputStream()}" var="v_os"/>
                                                <core:if test="${v_os != null}">
                                                  <core:new className="java.io.OutputStreamWriter" var="wr">
                                                    <core:arg type="java.io.OutputStream" value="${v_os}"/>
                                                  </core:new>
                                                  <core:set value="${wr.write(renameFeature)}" var="void"/>
                                                  <core:set value="${wr.flush()}" var="void"/>
                                                  <core:set value="${wr.close()}" var="void"/>
                                                </core:if>
                                                <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                  <gel:out>response_msg :  ${response_msg}</gel:out>
                                                  <gel:out>response_code:  ${response_code}</gel:out>
                                                </core:if>
                                                <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                <core:set value="${null}" var="jsonQR"/>
                                                <core:if test="${response_code == null}">
                                                  <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                  <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                      <gel:out/>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${response_code != null}">
                                                  <core:if test="${response_code == 401}">
                                                    <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${httpInputStream == null}">
                                                    <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                    <core:if test="${bDebug502}">
                                                      <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="INFO">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- OR -->
                                                  <core:if test="${httpInputStream != null}">
                                                    <core:new className="java.io.InputStreamReader" var="v_Input">
                                                      <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                    </core:new>
                                                    <core:new className="java.io.BufferedReader" var="v_InputData">
                                                      <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                    </core:new>
                                                    <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                    <core:if test="${bDebugREST}">
                                                      <gel:out>httpData: ${httpData}</gel:out>
                                                    </core:if>
                                                    <!-- free up some resources -->
                                                    <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                    <!-- JSON Response -->
                                                    <core:new className="org.json.JSONObject" var="jsonResp">
                                                      <core:arg type="java.lang.String" value="${httpData}"/>
                                                    </core:new>
                                                    <core:if test="${bDebugJSON}">
                                                      <gel:out>jsonResp:</gel:out>
                                                      <gel:out>${jsonResp.toString(1)}</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- (httpInputStream != null) -->
                                                  <core:if test="${response_code == 200}">
                                                    <!-- Search by Name only -->
                                                    <core:set value="WSJF set successful for Feature(${ral_ObjectID})${arrPIcode1}: ${ral_Name}  WSJF(${arrPIWsjf})" var="logMessage"/>
                                                    <core:set value="${logMessage}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                </core:if>
                                                <!-- (response_code != null) -->
                                              </core:if>
                                              <!-- !(bSkipRESTRename) -->
                                            </core:if>
                                            <!-- Found PI to set WSJF-->
                                          </core:while>
                                          <!-- keyPIWsjf.hasNext() -->
                                          <!-- Walk the list of Projects that we want to cleanup -->
                                          <core:set value="${mapProjNameNew.keySet()}" var="keysetProjNameNew"/>
                                          <core:set value="${keysetProjNameNew.iterator()}" var="keyProjNameNew"/>
                                          <core:while test="${keyProjNameNew.hasNext()}">
                                            <core:set value="${keyProjNameNew.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapProjNameNew.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="arrProjName2"/>
                                            <core:set value="${tmpPIcode}" var="arrProjName1"/>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Rename Rally Project: Old(${arrProjName1}) New(${arrProjName2})  </gel:out>
                                            </core:if>
                                            <core:set value="${arrProjName1.replace(' ',myBlnk)}" var="strTempName"/>
                                            <core:if test="${bDebug}">
                                              <gel:out>Search arrProjName1[${arrProjName1}] strTempName[${strTempName}] </gel:out>
                                            </core:if>
                                            <!-- Search by Name -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/Project?query=(Name${myBlnk}=${myBlnk}"${strTempName}")</core:set>
                                            <!-- Search by Name and FormattedID
                    <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                      <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(FormattedID${myBlnk}=${myBlnk}"${arrPIcode1}"))</core:set>
                    </core:if>
                      -->
                                            <!--
                    <core:set var="httpRESTURL" value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name"/>
                      -->
                                            <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}fetch=ObjectID</core:set>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:if test="${v_Input != null}">
                                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                  </core:new>
                                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>httpData: ${httpData}</gel:out>
                                                  </core:if>
                                                  <!-- free up some resources -->
                                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                  <!-- JSON Response -->
                                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                                  </core:new>
                                                  <core:if test="${bDebugJSON}">
                                                    <gel:out>jsonResp:</gel:out>
                                                    <gel:out>${jsonResp.toString(1)}</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                  </core:if>
                                                  <!-- PortfolioItem, top level JSON object -->
                                                  <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                                </core:if>
                                                <!-- (v_Input != null) -->
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_UUID"/>
                                            <core:set value="" var="ral_ObjectID"/>
                                            <core:set value="" var="ral_Name"/>
                                            <core:set value="${null}" var="ral_ref"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                  <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_ref')}" var="ral_ref"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                    <gel:out>ral_ObjectID  : ${ral_ObjectID} ${ral_ObjectID.getClass()}</gel:out>
                                                    <gel:out>ral_ref       : ${ral_ref} ${ral_ref.getClass()}</gel:out>
                                                    <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ref == null) || (ral_ref.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: Proj to rename. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ref != null) &amp;&amp; (ral_ref.length() gt 0))}">
                                              <!-- We found the Proj. Now Rename it -->
                                              <!-- If needed, change Notes to a custom field
                        { "Feature": { "Parent": "e994f185-76e3-486d-9531-4c4abd5e8219" } }
                        { "Feature": { "Parent": "140509207648" } }
                         -->
                                              <core:set escapeText="false" var="renameFeature">
                        { "Project": { "Name": "${arrProjName2}" } }
                      </core:set>
                                              <core:if test="${bDebug}">
                                                <gel:out>renameFeature Project       : ${renameFeature}</gel:out>
                                              </core:if>
                                              <!-- Setup URL for target PI -->
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/Project/${ral_ObjectID}</core:set>
                                              <core:set var="httpRESTURL">${ral_ref}</core:set>
                                              <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                <core:set encode="false" var="httpRESTURL">${httpRESTURL}?workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                              </core:if>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                              </core:if>
                                              <core:new className="java.net.URL" var="remoteURL">
                                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                              </core:new>
                                              <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                              <core:set value="${connection.setDoInput(true)}" var="void"/>
                                              <core:set value="${connection.setDoOutput(true)}" var="void"/>
                                              <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                              <core:expr value="${connection.setRequestMethod(&quot;POST&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                              <core:if test="${v_RRauth_type.equals('API')}">
                                                <core:invoke method="setRequestProperty" on="${connection}">
                                                  <core:arg type="java.lang.String" value="zsessionid"/>
                                                  <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                </core:invoke>
                                              </core:if>
                                              <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                <core:if test="${v_RRencoded != null}">
                                                  <!-- AND -->
                                                  <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                    <core:invoke method="setRequestProperty" on="${connection}">
                                                      <core:arg type="java.lang.String" value="Authorization"/>
                                                      <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                    </core:invoke>
                                                  </core:if>
                                                </core:if>
                                              </core:if>
                                              <core:if test="${!(bSkipRESTRename)}">
                                                <core:set value="${connection.connect()}" var="void"/>
                                                <core:set value="${connection.getOutputStream()}" var="v_os"/>
                                                <core:if test="${v_os != null}">
                                                  <core:new className="java.io.OutputStreamWriter" var="wr">
                                                    <core:arg type="java.io.OutputStream" value="${v_os}"/>
                                                  </core:new>
                                                  <core:set value="${wr.write(renameFeature)}" var="void"/>
                                                  <core:set value="${wr.flush()}" var="void"/>
                                                  <core:set value="${wr.close()}" var="void"/>
                                                </core:if>
                                                <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                  <gel:out>response_msg :  ${response_msg}</gel:out>
                                                  <gel:out>response_code:  ${response_code}</gel:out>
                                                </core:if>
                                                <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                <core:set value="${null}" var="jsonQR"/>
                                                <core:if test="${response_code == null}">
                                                  <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                  <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                      <gel:out/>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${response_code != null}">
                                                  <core:if test="${response_code == 401}">
                                                    <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${httpInputStream == null}">
                                                    <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                    <core:if test="${bDebug502}">
                                                      <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="INFO">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- OR -->
                                                  <core:if test="${httpInputStream != null}">
                                                    <core:new className="java.io.InputStreamReader" var="v_Input">
                                                      <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                    </core:new>
                                                    <core:new className="java.io.BufferedReader" var="v_InputData">
                                                      <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                    </core:new>
                                                    <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                    <core:if test="${bDebugREST}">
                                                      <gel:out>httpData: ${httpData}</gel:out>
                                                    </core:if>
                                                    <!-- free up some resources -->
                                                    <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                    <!-- JSON Response -->
                                                    <core:new className="org.json.JSONObject" var="jsonResp">
                                                      <core:arg type="java.lang.String" value="${httpData}"/>
                                                    </core:new>
                                                    <core:if test="${bDebugJSON}">
                                                      <gel:out>jsonResp:</gel:out>
                                                      <gel:out>${jsonResp.toString(1)}</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                      <gel:out>_______________________________________________</gel:out>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- (httpInputStream != null) -->
                                                  <core:if test="${response_code == 200}">
                                                    <!-- Search by Name only -->
                                                    <core:set value="Move successful for Rally Project: Old(${arrProjName1}) New(${arrProjName2})  " var="logMessage"/>
                                                    <!-- Add parent PI -->
                                                    <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                                                      <core:set value="${logMessage}[${arrPIcode2}] " var="logMessage"/>
                                                    </core:if>
                                                    <core:set value="${logMessage}${tmpName}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                </core:if>
                                                <!-- (response_code != null) -->
                                              </core:if>
                                              <!-- !(bSkipRESTRename) -->
                                            </core:if>
                                            <!-- Found the Proj to cleanup... ((ral_ObjectID != null) &amp;&amp; (ral_ObjectID.length() gt 0)) -->
                                          </core:while>
                                          <!-- keyProjNameNew.hasNext() -->
                                        </core:if>
                                        <!--  (v_RRis_active eq 1) -->
                                      </core:if>
                                      <!--  !(tmpWrk.equals(savWrk))  -->
                                    </core:if>
                                    <!--  (tmpWrk != null) -->
                                  </core:while>
                                  <!-- keyRRCodeWrk.hasNext() -->
                                </core:if>
                                <!-- !(bSkipRenameACFeatures) -->
                                <!-- MJS -->
                                <!-- ________________ -->
                                <!--
          Move seldom unused AC demo data to other AC Initiatives
          -->
                                <core:if test="${(bUseKlean1581Names)}">
                                  <!-- Move demo data to get some progress on other Initiatives -->
                                  <core:set value="${mapPIMove.put('2 ,F45 ,I1 , I8', 'Knowledgebase')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F27 ,I3 , I9', 'Shopping preferences')}" var="void"/>
                                  <!--
          <core:set var="void" value="${mapPIMoveName.put('I8'  ,'Trending Assist' )}"/>
          <core:set var="void" value="${mapPIMoveName.put('I9'  ,'Credit Scoring' )}"/>
            -->
                                  <core:if test="${bDebug}">
                                    <gel:out trim="false">mapPIMove.put() </gel:out>
                                  </core:if>
                                  <core:if test="${bDebug}">
                                    <gel:out trim="false">mapPIMove.size(): ${mapPIMove.size()} </gel:out>
                                  </core:if>
                                </core:if>
                                <!-- (bUseKlean1581Names) -->
                                <core:if test="${(bUseKlean1581NameRest)}">
                                  <!-- Move demo data to get some progress on other Initiatives -->
                                  <core:set value="${mapPIMove.put('2 ,F45 ,I8 , I1', 'Knowledgebase')}" var="void"/>
                                  <core:set value="${mapPIMove.put('2 ,F27 ,I9 , I3', 'Shopping preferences')}" var="void"/>
                                  <core:if test="${bDebug}">
                                    <gel:out trim="false">mapPIMove.put() </gel:out>
                                  </core:if>
                                  <core:if test="${bDebug}">
                                    <gel:out trim="false">mapPIMove.size(): ${mapPIMove.size()} </gel:out>
                                  </core:if>
                                </core:if>
                                <!-- (bUseKlean1581NameReset) -->
                                <core:if test="${(bSkipDelACFeatures)}">
                                  <core:set value="Skipping Del AC Features..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                      <gel:out/>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                </core:if>
                                <!-- (bSkipDelACFeatures) -->
                                <core:if test="${ !(bSkipDelACFeatures) || bUseKlean1581Names || bUseKlean1581NameReset}">
                                  <core:set value="Moving seldom used AC Features from the connected AC workspace, prep for PPM Presales demos..." var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                      <gel:out/>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:set value="" var="savWrk"/>
                                  <!-- Workspace - Get the ObjectIDs for all workspaces -->
                                  <core:set value="${mapRRCodeWrk.keySet()}" var="keysetRRCodeWrk"/>
                                  <core:set value="${keysetRRCodeWrk.iterator()}" var="keyRRCodeWrk"/>
                                  <core:while test="${keyRRCodeWrk.hasNext()}">
                                    <core:set value="${keyRRCodeWrk.next()}" var="tmpRRcode"/>
                                    <core:set value="${mapRRCodeWrk.get(tmpRRcode)}" var="tmpWrk"/>
                                    <core:set value="${tmpWrk.trim()}" var="tmpWrk"/>
                                    <core:set value="${mapRRCodeURL.get(tmpRRcode)}" var="RallyHost"/>
                                    <core:set value="${mapRRCodeAuthType.get(tmpRRcode)}" var="v_RRauth_type"/>
                                    <core:set value="${mapRRCodeIsActive.get(tmpRRcode)}" var="v_RRis_active"/>
                                    <core:set value="${mapRRCodeKey.get(tmpRRcode)}" var="v_RRapi_key"/>
                                    <core:set value="${mapRRCodeEnc.get(tmpRRcode)}" var="v_RRencoded"/>
                                    <core:set value="${mapRRCodeWrkID.get(tmpRRcode)}" var="v_RRworkspace"/>
                                    <core:set value="${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RRprj_pi_type"/>
                                    <core:set value="${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RRtsk_pi_type"/>
                                    <core:if test="${bDebug}">
                                      <gel:out/>
                                      <gel:out trim="false">Workspace: tmpRRcode[${tmpRRcode}] tmpWrk[${tmpWrk}] v_RRworkspace[${v_RRworkspace}]  v_RRis_active(${v_RRis_active}) v_RRauth_type(${v_RRauth_type}) v_RRencoded(${v_RRencoded}) v_RRprj_pi_type(${v_RRprj_pi_type}) v_RRtsk_pi_type(${v_RRtsk_pi_type})  </gel:out>
                                    </core:if>
                                    <core:if test="${(tmpWrk != null)}">
                                      <!-- AND -->
                                      <core:if test="${bDebug}">
                                        <gel:out trim="false">tmpWrk[${tmpWrk}] </gel:out>
                                      </core:if>
                                      <core:if test="${bDebug}">
                                        <gel:out trim="false">savWrk[${savWrk}] </gel:out>
                                      </core:if>
                                      <core:if test="${!(tmpWrk.equals(savWrk))}">
                                        <!-- Only if we did not yet process this workspace -->
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">!(tmpWrk.equals(savWrk)) </gel:out>
                                        </core:if>
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">tmpWrk[${tmpWrk}] </gel:out>
                                        </core:if>
                                        <core:if test="${bDebug}">
                                          <gel:out trim="false">savWrk[${savWrk}] </gel:out>
                                        </core:if>
                                        <core:set value="${tmpWrk}" var="savWrk"/>
                                        <core:if test="${(v_RRis_active eq 1)}">
                                          <!-- Integration is Active -->
                                          <core:if test="${bDebug}">
                                            <gel:out trim="false">(v_RRis_active eq 1) </gel:out>
                                          </core:if>
                                          <!-- Walk the list of PIs that we want to cleanup -->
                                          <core:set value="${mapPIMove.keySet()}" var="keysetPIMove"/>
                                          <core:set value="${keysetPIMove.iterator()}" var="keyPIMove"/>
                                          <core:while test="${keyPIMove.hasNext()}">
                                            <core:if test="${bDebug}">
                                              <gel:out trim="false">keyPIMove.hasNext() </gel:out>
                                            </core:if>
                                            <core:set value="${keyPIMove.next()}" var="tmpPIcode"/>
                                            <core:set value="${mapPIMove.get(tmpPIcode)}" var="tmpName"/>
                                            <core:set value="${tmpName.trim()}" var="tmpName"/>
                                            <core:set value="${tmpPIcode.split(',')}" var="arrPIcode"/>
                                            <!-- split the PI keys on the commas -->
                                            <core:set value="" var="arrPILvl"/>
                                            <core:set value="" var="arrPIcode1"/>
                                            <core:set value="" var="arrPIcode2"/>
                                            <core:set value="" var="arrPIcode3"/>
                                            <core:set value="" var="arrPIcode4"/>
                                            <core:if test="${(arrPIcode.size() ge 1)}">
                                              <core:set value="${arrPIcode[0].trim()}" var="arrPILvl"/>
                                            </core:if>
                                            <core:if test="${(arrPIcode.size() ge 2)}">
                                              <core:set value="${arrPIcode[1].trim()}" var="arrPIcode1"/>
                                            </core:if>
                                            <core:if test="${(arrPIcode.size() ge 3)}">
                                              <core:set value="${arrPIcode[2].trim()}" var="arrPIcode2"/>
                                            </core:if>
                                            <core:if test="${(arrPIcode.size() ge 4)}">
                                              <core:set value="${arrPIcode[3].trim()}" var="arrPIcode3"/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out/>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Move: size(${arrPIcode.size()}) arrPILvl(${arrPILvl}) arrPIFeat(${arrPIcode1}) arrPIInitFrom(${arrPIcode2}) arrPIInitTo(${arrPIcode3}) tmpName(${tmpName})</gel:out>
                                            </core:if>
                                            <!-- process PortfolioItems -->
                                            <core:set value="PortfolioItem" var="v_RR_pi_type"/>
                                            <!-- Portfolio Item Type -->
                                            <core:set value="PortfolioItem" var="v_RR_Ppi_type"/>
                                            <!-- Parent Portfolio Item Type -->
                                            <core:if test="${(arrPILvl eq 0)}">
                                              <core:set value="PortfolioItem/theme" var="v_RR_pi_type"/>
                                              <core:set value="PortfolioItem/theme" var="v_RR_Ppi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 1)}">
                                              <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                              <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_Ppi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 2)}">
                                              <core:set value="PortfolioItem/${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RR_pi_type"/>
                                              <core:set value="PortfolioItem/${mapRRCodePrjPI.get(tmpRRcode)}" var="v_RR_Ppi_type"/>
                                            </core:if>
                                            <core:if test="${(arrPILvl eq 3)}">
                                              <core:set value="hierarchicalrequirement" var="v_RR_pi_type"/>
                                              <core:set value="PortfolioItem/${mapRRCodeTskPI.get(tmpRRcode)}" var="v_RR_Ppi_type"/>
                                            </core:if>
                                            <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                                              <core:set value="${mapPIFmtId.get(arrPIcode2)}" var="vNewPICode"/>
                                              <core:if test="${((vNewPICode != null) &amp;&amp; (vNewPICode.length() gt 0))}">
                                                <core:set value="${vNewPICode}" var="arrPIcode2"/>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${((arrPIcode3 != null) &amp;&amp; (arrPIcode3.length() gt 0))}">
                                              <core:set value="${mapPIFmtId.get(arrPIcode3)}" var="vNewPICode"/>
                                              <core:if test="${((vNewPICode != null) &amp;&amp; (vNewPICode.length() gt 0))}">
                                                <core:set value="${vNewPICode}" var="arrPIcode3"/>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Move: size(${arrPIcode.size()}) arrPILvl(${arrPILvl}) arrPIFeat(${arrPIcode1}) arrPIInitFrom(${arrPIcode2}) arrPIInitTo(${arrPIcode3}) tmpName(${tmpName})</gel:out>
                                            </core:if>
                                            <core:set value="${tmpName.replace(' ',myBlnk)}" var="strTempName"/>
                                            <core:if test="${bDebug}">
                                              <gel:out>tmpName[${tmpName}] strTempName[${strTempName}] </gel:out>
                                            </core:if>
                                            <!-- 
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RR_pi_type}?query=(FormattedID${myBlnk}=${myBlnk}"${v_TAglTskId}")</core:set>
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RR_pi_type}?query=(Name${myBlnk}contains${myBlnk}"${strTempName}")</core:set>
    
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RR_pi_type}?query=(FormattedID = "${v_PrjFmtId}")</core:set> 
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RR_pi_type}?query=(Name = "${strTempProjName}")</core:set> 
    
                    <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RRprj_pi_type}?query=(Name${myBlnk}contains${myBlnk}"${strTempName}")</core:set>
                    <core:set var="httpRESTURL" value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name"/>
                    -->
                                            <!-- Search by Name -->
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(Name${myBlnk}=${myBlnk}"${strTempName}")</core:set>
                                            <!-- Search by Name and FormattedID -->
                                            <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(FormattedID${myBlnk}=${myBlnk}"${arrPIcode1}"))</core:set>
                                              <!-- Search by Name, FormattedID and parent FormattedID -->
                                              <!-- No longer using the FormattedID to look for Features, just the name and parent
                      <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                        <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=(((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(FormattedID${myBlnk}=${myBlnk}"${arrPIcode1}"))${myBlnk}AND${myBlnk}(Parent.FormattedID${myBlnk}=${myBlnk}"${arrPIcode2}"))</core:set>
                      </core:if>
                        -->
                                              <!-- Search by Name and parent FormattedID -->
                                              <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                                                <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(Parent.FormattedID${myBlnk}=${myBlnk}"${arrPIcode2}"))</core:set>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                            <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                              <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                            </core:if>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                            </core:if>
                                            <core:new className="java.net.URL" var="remoteURL">
                                              <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                            </core:new>
                                            <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                            <core:set value="${connection.setDoInput(true)}" var="void"/>
                                            <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                            <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                            <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                            <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                            <core:if test="${v_RRauth_type.equals('API')}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="zsessionid"/>
                                                <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                              </core:invoke>
                                            </core:if>
                                            <core:if test="${v_RRauth_type.equals('BASIC')}">
                                              <core:if test="${v_RRencoded != null}">
                                                <!-- AND -->
                                                <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="Authorization"/>
                                                    <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                  </core:invoke>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:if test="${bDebugVerLog}">
                                              <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebugSec}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <core:set value="${connection.connect()}" var="void"/>
                                            <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                            <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                            <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                              <gel:out>response_msg :  ${response_msg}</gel:out>
                                              <gel:out>response_code:  ${response_code}</gel:out>
                                            </core:if>
                                            <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_23"/>
                                            <core:set value="${(milEnd_23 - milStart_23)}" var="elapsedTime"/>
                                            <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                            <core:if test="${bDebugTimings}">
                                              <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                            </core:if>
                                            <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_24"/>
                                            <core:set value="${null}" var="jsonQR"/>
                                            <core:if test="${response_code == null}">
                                              <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                              <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${response_code != null}">
                                              <core:if test="${response_code == 401}">
                                                <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebug502}">
                                                  <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <!-- OR -->
                                              <core:if test="${httpInputStream != null}">
                                                <core:new className="java.io.InputStreamReader" var="v_Input">
                                                  <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                </core:new>
                                                <core:new className="java.io.BufferedReader" var="v_InputData">
                                                  <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                </core:new>
                                                <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>httpData: ${httpData}</gel:out>
                                                </core:if>
                                                <!-- free up some resources -->
                                                <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                <!-- JSON Response -->
                                                <core:new className="org.json.JSONObject" var="jsonResp">
                                                  <core:arg type="java.lang.String" value="${httpData}"/>
                                                </core:new>
                                                <core:if test="${bDebugJSON}">
                                                  <gel:out>jsonResp:</gel:out>
                                                  <gel:out>${jsonResp.toString(1)}</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                  <gel:out>__________________</gel:out>
                                                </core:if>
                                                <!-- PortfolioItem, top level JSON object -->
                                                <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                              </core:if>
                                              <!-- (httpInputStream != null) -->
                                            </core:if>
                                            <!-- (response_code != null) -->
                                            <core:if test="${jsonQR == null}">
                                              <core:if test="${bDebug}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>jsonQR is null</gel:out>
                                                </core:if>
                                              </core:if>
                                            </core:if>
                                            <core:set value="" var="ral_UUID"/>
                                            <core:set value="" var="ral_ObjectID"/>
                                            <core:set value="" var="ral_Name"/>
                                            <core:if test="${jsonQR != null}">
                                              <!-- Results, in a single entry array  -->
                                              <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                              <core:if test="${jarrRArray != null}">
                                                <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                </core:if>
                                                <core:set value="0" var="i_jarrRArray"/>
                                                <!-- this is a String -->
                                                <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                <!-- convert to numeric, but the default is a long -->
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long to an int, which we need for the json calls to work -->
                                                <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                  <!-- Get the NameArray JSON Object -->
                                                  <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                                  <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                  <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                  <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                  <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                    <gel:out>ral_ObjectID  : ${ral_ObjectID} ${ral_ObjectID.getClass()}</gel:out>
                                                    <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                  </core:if>
                                                  <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long back to an int, which we need for the json calls -->
                                                </core:while>
                                                <!-- i_jarrRArray < len_jarrRArray -->
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID == null) || (ral_ObjectID.length() == 0))}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Not found: PI to move. </gel:out>
                                              </core:if>
                                            </core:if>
                                            <!-- jsonQR != null -->
                                            <core:if test="${((ral_ObjectID != null) &amp;&amp; (ral_ObjectID.length() gt 0))}">
                                              <!-- We found the PI. Now look for the Parent PI -->
                                              <core:set value="${mapPIMoveName.get(arrPIcode3)}" var="tmpName"/>
                                              <core:set value="${tmpName.trim()}" var="tmpName"/>
                                              <core:set value="${tmpName.replace(' ',myBlnk)}" var="strTempName"/>
                                              <core:if test="${bDebug}">
                                                <gel:out>tmpName[${tmpName}] strTempName[${strTempName}] </gel:out>
                                              </core:if>
                                              <!-- Search by Name -->
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_Ppi_type}?query=(Name${myBlnk}=${myBlnk}"${strTempName}")</core:set>
                                              <!-- Search by Name and FormattedID -->
                                              <core:if test="${((arrPIcode3 != null) &amp;&amp; (arrPIcode3.length() gt 0))}">
                                                <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_Ppi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(FormattedID${myBlnk}=${myBlnk}"${arrPIcode3}"))</core:set>
                                                <!-- Search by Name, FormattedID and parent FormattedID -->
                                                <core:if test="${((arrPIcode4 != null) &amp;&amp; (arrPIcode4.length() gt 0))}">
                                                  <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_Ppi_type}?query=(((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(FormattedID${myBlnk}=${myBlnk}"${arrPIcode3}"))${myBlnk}AND${myBlnk}(Parent.FormattedID${myBlnk}=${myBlnk}"${arrPIcode4}"))</core:set>
                                                </core:if>
                                              </core:if>
                                              <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                              <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                              </core:if>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                              </core:if>
                                              <core:new className="java.net.URL" var="remoteURL">
                                                <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                              </core:new>
                                              <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                              <core:set value="${connection.setDoInput(true)}" var="void"/>
                                              <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                              <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                              <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                              <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                              <core:if test="${v_RRauth_type.equals('API')}">
                                                <core:invoke method="setRequestProperty" on="${connection}">
                                                  <core:arg type="java.lang.String" value="zsessionid"/>
                                                  <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                </core:invoke>
                                              </core:if>
                                              <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                <core:if test="${v_RRencoded != null}">
                                                  <!-- AND -->
                                                  <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                    <core:invoke method="setRequestProperty" on="${connection}">
                                                      <core:arg type="java.lang.String" value="Authorization"/>
                                                      <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                    </core:invoke>
                                                  </core:if>
                                                </core:if>
                                              </core:if>
                                              <core:if test="${bDebugVerLog}">
                                                <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${bDebugSec}">
                                                  <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                              </core:if>
                                              <core:set value="${connection.connect()}" var="void"/>
                                              <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                              <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                              <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                <gel:out>response_msg :  ${response_msg}</gel:out>
                                                <gel:out>response_code:  ${response_code}</gel:out>
                                              </core:if>
                                              <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                              <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_23"/>
                                              <core:set value="${(milEnd_23 - milStart_23)}" var="elapsedTime"/>
                                              <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                              <core:if test="${bDebugTimings}">
                                                <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                              </core:if>
                                              <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_24"/>
                                              <core:set value="${null}" var="jsonQR"/>
                                              <core:if test="${response_code == null}">
                                                <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                    <gel:out/>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <core:if test="${response_code != null}">
                                                <core:if test="${response_code == 401}">
                                                  <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${httpInputStream == null}">
                                                  <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                  <core:if test="${bDebug502}">
                                                    <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                </core:if>
                                                <!-- OR -->
                                                <core:if test="${httpInputStream != null}">
                                                  <core:new className="java.io.InputStreamReader" var="v_Input">
                                                    <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                  </core:new>
                                                  <core:new className="java.io.BufferedReader" var="v_InputData">
                                                    <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                  </core:new>
                                                  <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>httpData: ${httpData}</gel:out>
                                                  </core:if>
                                                  <!-- free up some resources -->
                                                  <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                  <!-- JSON Response -->
                                                  <core:new className="org.json.JSONObject" var="jsonResp">
                                                    <core:arg type="java.lang.String" value="${httpData}"/>
                                                  </core:new>
                                                  <core:if test="${bDebugJSON}">
                                                    <gel:out>jsonResp:</gel:out>
                                                    <gel:out>${jsonResp.toString(1)}</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                    <gel:out>__________________</gel:out>
                                                  </core:if>
                                                  <!-- PortfolioItem, top level JSON object -->
                                                  <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                                </core:if>
                                                <!-- (httpInputStream != null) -->
                                              </core:if>
                                              <!-- (response_code != null) -->
                                              <core:if test="${jsonQR == null}">
                                                <core:if test="${bDebug}">
                                                  <core:if test="${bDebug}">
                                                    <gel:out>jsonQR is null</gel:out>
                                                  </core:if>
                                                </core:if>
                                              </core:if>
                                              <core:set value="" var="ral_PUUID"/>
                                              <core:set value="" var="ral_PObjectID"/>
                                              <core:set value="" var="ral_PName"/>
                                              <core:if test="${jsonQR != null}">
                                                <!-- Results, in a single entry array  -->
                                                <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                                <core:if test="${jarrRArray != null}">
                                                  <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                                  <core:if test="${bDebug}">
                                                    <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                                  </core:if>
                                                  <core:set value="0" var="i_jarrRArray"/>
                                                  <!-- this is a String -->
                                                  <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                                  <!-- convert to numeric, but the default is a long -->
                                                  <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                  <!-- convert the long to an int, which we need for the json calls to work -->
                                                  <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                    <!-- Get the NameArray JSON Object -->
                                                    <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                    <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_PName"/>
                                                    <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                    <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_PObjectID"/>
                                                    <core:set value="${ral_PObjectID.trim()}" var="ral_PObjectID"/>
                                                    <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_PUUID"/>
                                                    <core:if test="${bDebug}">
                                                      <gel:out>ral_PName      : ${ral_PName}</gel:out>
                                                      <gel:out>ral_PObjectID  : ${ral_PObjectID} ${ral_PObjectID.getClass()}</gel:out>
                                                      <gel:out>ral_PUUID      : ${ral_PUUID}</gel:out>
                                                    </core:if>
                                                    <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                    <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                    <!-- convert the long back to an int, which we need for the json calls -->
                                                  </core:while>
                                                  <!-- i_jarrRArray < len_jarrRArray -->
                                                </core:if>
                                              </core:if>
                                              <!-- jsonQR != null -->
                                              <core:if test="${((ral_PObjectID == null) || (ral_PObjectID.length() == 0))}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>Not found: Target Parent PI to move to. </gel:out>
                                                </core:if>
                                              </core:if>
                                              <!-- jsonQR != null -->
                                              <core:if test="${((ral_PObjectID != null) &amp;&amp; (ral_PObjectID.length() gt 0))}">
                                                <!-- We found the target Parent PI, now move it -->
                                                <!-- If needed, change Notes to a custom field
                          { "Feature": { "Parent": "e994f185-76e3-486d-9531-4c4abd5e8219" } }
                          { "Feature": { "Parent": "140509207648" } }
                           -->
                                                <core:set escapeText="false" var="moveFeature">
                          { "Feature": { "Parent": "${ral_PObjectID}" } }
                        </core:set>
                                                <core:if test="${bDebug}">
                                                  <gel:out>moveFeature       : ${moveFeature}</gel:out>
                                                </core:if>
                                                <!-- Setup URL for target PI -->
                                                <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/${v_RR_pi_type}/${ral_ObjectID}</core:set>
                                                <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                                  <core:set encode="false" var="httpRESTURL">${httpRESTURL}?workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                                </core:if>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>MJS workspace2</gel:out>
                                                  <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                                </core:if>
                                                <core:new className="java.net.URL" var="remoteURL">
                                                  <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                                </core:new>
                                                <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                                <core:set value="${connection.setDoInput(true)}" var="void"/>
                                                <core:set value="${connection.setDoOutput(true)}" var="void"/>
                                                <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                                <core:expr value="${connection.setRequestMethod(&quot;POST&quot;)}"/>
                                                <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                                <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                                <core:if test="${v_RRauth_type.equals('API')}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="zsessionid"/>
                                                    <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                  </core:invoke>
                                                </core:if>
                                                <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                  <core:if test="${v_RRencoded != null}">
                                                    <!-- AND -->
                                                    <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                      <core:invoke method="setRequestProperty" on="${connection}">
                                                        <core:arg type="java.lang.String" value="Authorization"/>
                                                        <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                      </core:invoke>
                                                    </core:if>
                                                  </core:if>
                                                </core:if>
                                                <core:if test="${!(bSkipRESTMove)}">
                                                  <core:set value="${connection.connect()}" var="void"/>
                                                  <core:set value="${connection.getOutputStream()}" var="v_os"/>
                                                  <core:if test="${v_os != null}">
                                                    <core:new className="java.io.OutputStreamWriter" var="wr">
                                                      <core:arg type="java.io.OutputStream" value="${v_os}"/>
                                                    </core:new>
                                                    <core:set value="${wr.write(moveFeature)}" var="void"/>
                                                    <core:set value="${wr.flush()}" var="void"/>
                                                    <core:set value="${wr.close()}" var="void"/>
                                                  </core:if>
                                                  <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                  <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                  <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                  <core:if test="${bDebugREST}">
                                                    <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                    <gel:out>response_msg :  ${response_msg}</gel:out>
                                                    <gel:out>response_code:  ${response_code}</gel:out>
                                                  </core:if>
                                                  <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                  <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_23"/>
                                                  <core:set value="${(milEnd_23 - milStart_23)}" var="elapsedTime"/>
                                                  <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                                  <core:if test="${bDebugTimings}">
                                                    <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                                  </core:if>
                                                  <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_24"/>
                                                  <core:set value="${null}" var="jsonQR"/>
                                                  <core:if test="${response_code == null}">
                                                    <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                    <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                        <gel:out/>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${response_code != null}">
                                                    <core:if test="${response_code == 401}">
                                                      <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="WARN">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                    <core:if test="${httpInputStream == null}">
                                                      <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="WARN">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                      <core:if test="${bDebug502}">
                                                        <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                        <core:choose>
                                                          <core:when test="${gel_processId == null}">
                                                            <gel:out>${logMessage}</gel:out>
                                                          </core:when>
                                                          <core:otherwise>
                                                            <gel:log level="INFO">${logMessage}</gel:log>
                                                          </core:otherwise>
                                                        </core:choose>
                                                      </core:if>
                                                    </core:if>
                                                    <!-- OR -->
                                                    <core:if test="${httpInputStream != null}">
                                                      <core:new className="java.io.InputStreamReader" var="v_Input">
                                                        <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                                      </core:new>
                                                      <core:new className="java.io.BufferedReader" var="v_InputData">
                                                        <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                                      </core:new>
                                                      <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                                      <core:if test="${bDebugREST}">
                                                        <gel:out>httpData: ${httpData}</gel:out>
                                                      </core:if>
                                                      <!-- free up some resources -->
                                                      <core:set value="${httpInputStream.close()}" var="dummy"/>
                                                      <!-- JSON Response -->
                                                      <core:new className="org.json.JSONObject" var="jsonResp">
                                                        <core:arg type="java.lang.String" value="${httpData}"/>
                                                      </core:new>
                                                      <core:if test="${bDebugJSON}">
                                                        <gel:out>jsonResp:</gel:out>
                                                        <gel:out>${jsonResp.toString(1)}</gel:out>
                                                        <gel:out>_______________________________________________</gel:out>
                                                        <gel:out>_______________________________________________</gel:out>
                                                      </core:if>
                                                    </core:if>
                                                    <!-- (httpInputStream != null) -->
                                                    <core:if test="${response_code == 200}">
                                                      <!-- Search by Name only -->
                                                      <core:set value="Move successful of ${v_RR_pi_type}(${ral_ObjectID}): " var="logMessage"/>
                                                      <!-- Add parent PI -->
                                                      <core:if test="${((arrPIcode2 != null) &amp;&amp; (arrPIcode2.length() gt 0))}">
                                                        <core:set value="${logMessage}[${arrPIcode2}] " var="logMessage"/>
                                                      </core:if>
                                                      <!-- Add target PI -->
                                                      <core:if test="${((arrPIcode3 != null) &amp;&amp; (arrPIcode3.length() gt 0))}">
                                                        <core:set value="${logMessage}to [${arrPIcode3}], " var="logMessage"/>
                                                      </core:if>
                                                      <!-- Add current PI -->
                                                      <core:if test="${((arrPIcode1 != null) &amp;&amp; (arrPIcode1.length() gt 0))}">
                                                        <core:set value="${logMessage}for [${arrPIcode1}] " var="logMessage"/>
                                                      </core:if>
                                                      <core:set value="${logMessage}${tmpName}" var="logMessage"/>
                                                      <core:choose>
                                                        <core:when test="${gel_processId == null}">
                                                          <gel:out>${logMessage}</gel:out>
                                                        </core:when>
                                                        <core:otherwise>
                                                          <gel:log level="INFO">${logMessage}</gel:log>
                                                        </core:otherwise>
                                                      </core:choose>
                                                    </core:if>
                                                  </core:if>
                                                  <!-- (response_code != null) -->
                                                </core:if>
                                                <!-- !(bSkipRESTMove) -->
                                              </core:if>
                                              <!-- Found the target Parent PI to move to... ((ral_ObjectID != null) &amp;&amp; (ral_ObjectID.length() gt 0)) -->
                                            </core:if>
                                            <!-- Found the PI to move... ((ral_ObjectID != null) &amp;&amp; (ral_ObjectID.length() gt 0)) -->
                                          </core:while>
                                          <!-- keyPIMove.hasNext() -->
                                        </core:if>
                                        <!--  (v_RRis_active eq 1) -->
                                      </core:if>
                                      <!--  !(tmpWrk.equals(savWrk))  -->
                                    </core:if>
                                    <!--  (tmpWrk != null) -->
                                  </core:while>
                                  <!-- keyRRCodeWrk.hasNext() -->
                                </core:if>
                                <!-- (!bSkipDelACFeatures) || bUseKlean1581Names -->
                                <core:catch var="exvar2">
                                  <core:if test="${!(bSkipSyncPPMProjects)}">
                                    <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                    <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                    <core:if test="${bDebugTimings}">
                                      <gel:out>Script Elapse #22: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                    </core:if>
                                    <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}  sec[${sdFmtElapseNum.format(elapsedTime/1000)}]" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                    <!-- ________________ -->
                                    <!-- ___ Get the Project IDs and Names.  ___ -->
                                    <sql:query var="v_invRecord">
              SELECT inv.code proj_id
                   , inv.id proj_int_id
                   , inv.name proj_name
                   , pr.agl_id
                   , pr.agl_ext_id
                   , pr.agl_sync
                   , pr.agl_system
              FROM inv_investments inv
                   LEFT OUTER JOIN odf_ca_project pr ON pr.id = inv.id
                 , nmc_integrations int
              WHERE inv.id NOT IN(SELECT prid FROM inv_projects WHERE is_template = 1)
                AND inv.is_active = 1
                AND inv.ODF_OBJECT_CODE = 'project'
      
              <core:if test="${v_PrjProjId != null}">
                                        <!-- AND -->
                                        <core:if test="${(v_PrjProjId.length() &gt; 0)}">
                  AND inv.id = '${v_PrjProjId}'
                </core:if>
                                      </core:if>
      
                AND int.code = pr.agl_system
                AND int.integration_vendor_code = 'RALLY'
              ORDER BY inv.code
      
            </sql:query>
                                    <!-- <core:if test="${bDebug}"><gel:out trim="false">Got DB Connection.</gel:out></core:if> -->
                                    <core:if test="${bDebug}">
                                      <gel:out/>
                                      <gel:out>_______________________________________________</gel:out>
                                    </core:if>
                                    <core:set value="${v_invRecord.rows.size()}" var="len_arrProjs"/>
                                    <core:if test="${bDebug}">
                                      <gel:out>Number of Projects found for Project Name query: ${len_arrProjs}</gel:out>
                                      <gel:out/>
                                    </core:if>
                                    <core:set value="Reconnecting Agile Projects and Tasks" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                        <gel:out/>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <core:forEach indexVar="i" items="${v_invRecord.rows}" var="thisrow">
                                      <core:set var="v_ProjCode"><![CDATA[${v_invRecord.rows[i].proj_id}]]></core:set>
                                      <core:set var="v_ProjId"><![CDATA[${v_invRecord.rows[i].proj_int_id}]]></core:set>
                                      <core:set var="v_Uprj_name"><![CDATA[${v_invRecord.rows[i].proj_name}]]></core:set>
                                      <core:set var="v_PrjFmtId"><![CDATA[${v_invRecord.rows[i].agl_id}]]></core:set>
                                      <core:set var="v_PrjExtId"><![CDATA[${v_invRecord.rows[i].agl_ext_id}]]></core:set>
                                      <core:set var="v_PrjAglSys"><![CDATA[${v_invRecord.rows[i].agl_system}]]></core:set>
                                      <core:if test="${bDebug}">
                                        <gel:out>Processing Project (${v_ProjCode}): ${v_Uprj_name}</gel:out>
                                        <gel:out/>
                                      </core:if>
                                      <core:set value="Processing Project (${v_ProjCode}) agl_system(${v_PrjAglSys}): ${v_Uprj_name} " var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                          <gel:out/>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                      <core:set value="${mapRRCodeName.get(v_PrjAglSys)}" var="v_RRname"/>
                                      <core:set value="${mapRRCodeURL.get(v_PrjAglSys)}" var="RallyHost"/>
                                      <core:set value="${mapRRCodeAuthType.get(v_PrjAglSys)}" var="v_RRauth_type"/>
                                      <core:set value="${mapRRCodeIsActive.get(tmpRRcode)}" var="v_RRis_active"/>
                                      <core:set value="${mapRRCodeKey.get(v_PrjAglSys)}" var="v_RRapi_key"/>
                                      <core:set value="${mapRRCodeEnc.get(v_PrjAglSys)}" var="v_RRencoded"/>
                                      <core:set value="${mapRRCodeWrkID.get(v_PrjAglSys)}" var="v_RRworkspace"/>
                                      <core:set value="${mapRRCodePrjPI.get(v_PrjAglSys)}" var="v_RRprj_pi_type"/>
                                      <core:set value="${mapRRCodeTskPI.get(v_PrjAglSys)}" var="v_RRtsk_pi_type"/>
                                      <core:if test="${bDebugVerLog}">
                                        <core:set value="Msg4: v_PrjAglSys(${v_PrjAglSys}) v_RRname(${v_RRname}): v_RRauth_type(${v_RRauth_type}) v_RRapi_key[${v_RRapi_key}] v_RRencoded[${v_RRencoded}] v_RRworkspace[${v_RRworkspace}] RallyHost[${RallyHost}]  " var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="INFO">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <core:if test="${RallyHost == null || RallyHost.length() == 0}">
                                        <core:if test="${bDebug}">
                                          <gel:out/>
                                        </core:if>
                                        <core:set value="ERROR: Remote API Setup not found for Rally Integration. Call your CA PPM Admin or your CA PPM Presales Core Team." var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="ERROR">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <!-- ________________________ -->
                                      <!-- ___ Get the Rally Initiative info  ___ -->
                                      <core:if test="${bDebug}">
                                        <gel:out>Get Rally Initiative Info...</gel:out>
                                      </core:if>
                                      <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_23"/>
                                      <core:catch var="exvar3">
                                        <!-- Rally REST Initiative Calls Start... -->
                                        <core:set value="${mapRRCodePrjPI.get(v_PrjAglSys)}" var="v_Uagl_Prj_Code"/>
                                        <core:set value="${v_Uprj_name.replace(' ',myBlnk)}" var="strTempName"/>
                                        <core:if test="${bDebug}">
                                          <gel:out>v_Uprj_name[${v_Uprj_name}] strTempName[${strTempName}] </gel:out>
                                        </core:if>
                                        <!-- 
                <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_Uagl_Prj_Code}?query=(FormattedID = "${v_PrjFmtId}")</core:set> 
                <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_Uagl_Prj_Code}?query=(Name = "${strTempProjName}")</core:set> 
                  -->
                                        <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RRprj_pi_type}?query=(Name${myBlnk}contains${myBlnk}"${strTempName}")</core:set>
                                        <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                        <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                          <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                        </core:if>
                                        <core:if test="${bDebugREST}">
                                          <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                        </core:if>
                                        <core:new className="java.net.URL" var="remoteURL">
                                          <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                        </core:new>
                                        <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                        <core:set value="${connection.setDoInput(true)}" var="void"/>
                                        <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                        <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                        <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                        <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                        <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                        <core:if test="${v_RRauth_type.equals('API')}">
                                          <core:invoke method="setRequestProperty" on="${connection}">
                                            <core:arg type="java.lang.String" value="zsessionid"/>
                                            <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                          </core:invoke>
                                        </core:if>
                                        <core:if test="${v_RRauth_type.equals('BASIC')}">
                                          <core:if test="${v_RRencoded != null}">
                                            <!-- AND -->
                                            <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                              <core:invoke method="setRequestProperty" on="${connection}">
                                                <core:arg type="java.lang.String" value="Authorization"/>
                                                <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                              </core:invoke>
                                            </core:if>
                                          </core:if>
                                        </core:if>
                                        <core:if test="${bDebugVerLog}">
                                          <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="INFO">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                          <core:if test="${bDebugSec}">
                                            <core:set value="Msg5: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                        </core:if>
                                        <core:set value="${connection.connect()}" var="void"/>
                                        <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                        <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                        <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                        <core:if test="${bDebugREST}">
                                          <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                          <gel:out>response_msg :  ${response_msg}</gel:out>
                                          <gel:out>response_code:  ${response_code}</gel:out>
                                        </core:if>
                                        <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_23"/>
                                        <core:set value="${(milEnd_23 - milStart_23)}" var="elapsedTime"/>
                                        <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                        <core:if test="${bDebugTimings}">
                                          <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                        </core:if>
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_24"/>
                                        <core:set value="${null}" var="jsonQR"/>
                                        <core:if test="${response_code == null}">
                                          <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                          <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                              <gel:out/>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="WARN">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                        </core:if>
                                        <core:if test="${response_code != null}">
                                          <core:if test="${response_code == 401}">
                                            <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:if test="${httpInputStream == null}">
                                            <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                            <core:if test="${bDebug502}">
                                              <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                          </core:if>
                                          <!-- OR -->
                                          <core:if test="${httpInputStream != null}">
                                            <core:new className="java.io.InputStreamReader" var="v_Input">
                                              <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                            </core:new>
                                            <core:new className="java.io.BufferedReader" var="v_InputData">
                                              <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                            </core:new>
                                            <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                            <core:if test="${bDebugREST}">
                                              <gel:out>httpData: ${httpData}</gel:out>
                                            </core:if>
                                            <!-- free up some resources -->
                                            <core:set value="${httpInputStream.close()}" var="dummy"/>
                                            <!-- JSON Response -->
                                            <core:new className="org.json.JSONObject" var="jsonResp">
                                              <core:arg type="java.lang.String" value="${httpData}"/>
                                            </core:new>
                                            <core:if test="${bDebugJSON}">
                                              <gel:out>jsonResp:</gel:out>
                                              <gel:out>${jsonResp.toString(1)}</gel:out>
                                              <gel:out>__________________</gel:out>
                                              <gel:out>__________________</gel:out>
                                            </core:if>
                                            <!-- PortfolioItem, top level JSON object -->
                                            <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                          </core:if>
                                          <!-- (httpInputStream != null) -->
                                        </core:if>
                                        <!-- (response_code != null) -->
                                        <core:if test="${jsonQR == null}">
                                          <core:if test="${bDebug}">
                                            <core:if test="${bDebug}">
                                              <gel:out>jsonQR is null</gel:out>
                                            </core:if>
                                          </core:if>
                                          <core:set value="Not Found Project(${v_ProjCode}.${v_ProjId}) agl_id(${v_PrjFmtId}) " var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                              <gel:out/>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="INFO">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                        </core:if>
                                        <core:set value="" var="ral_UUID"/>
                                        <core:set value="" var="ral_ObjectID"/>
                                        <core:set value="" var="ral_Name"/>
                                        <core:set value="" var="ral_ObjectID"/>
                                        <core:set value="" var="ral_UUID"/>
                                        <core:set value="" var="ral_FmtID"/>
                                        <core:if test="${jsonQR != null}">
                                          <!-- Results, in a single entry array  -->
                                          <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                          <core:if test="${jarrRArray != null}">
                                            <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                            <core:if test="${bDebug}">
                                              <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                            </core:if>
                                            <core:set value="0" var="i_jarrRArray"/>
                                            <!-- this is a String -->
                                            <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                            <!-- convert to numeric, but the default is a long -->
                                            <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                            <!-- convert the long to an int, which we need for the json calls to work -->
                                            <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                              <!-- Get the NameArray JSON Object -->
                                              <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                              <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                              <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                              <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                              <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                              <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                              <core:set value="${jsonRArray.getString('FormattedID')}" var="ral_FmtID"/>
                                              <core:if test="${bDebug}">
                                                <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                <gel:out>ral_ObjectID  : ${ral_ObjectID} ${ral_ObjectID.getClass()}</gel:out>
                                                <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                <gel:out>ral_FmtID     : ${ral_FmtID}</gel:out>
                                              </core:if>
                                              <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                              <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                              <!-- convert the long back to an int, which we need for the json calls -->
                                            </core:while>
                                            <!-- i_jarrRArray < len_jarrRArray -->
                                          </core:if>
                                        </core:if>
                                        <!-- jsonQR != null -->
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_24"/>
                                        <core:set value="${(milEnd_24 - milStart_24)}" var="elapsedTime"/>
                                        <core:if test="${bDebugTimings}">
                                          <gel:out>Elapse JSON parsing: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                        </core:if>
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                        <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                        <core:if test="${bDebugTimings}">
                                          <gel:out>Script Elapse #27: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                        </core:if>
                                        <!-- MJS __  SQL Update the Project with new agile external id-->
                                        <core:if test="${bDebug}">
                                          <gel:out/>
                                          <gel:out>Checking Project(${v_ProjCode}.${v_ProjId}) agl_ext_id(${v_PrjExtId}) for new agl_ext_id ObjectID(${ral_ObjectID}) UUID(${ral_UUID})...</gel:out>
                                        </core:if>
                                        <core:if test="${bDebugVerbose}">
                                          <gel:out/>
                                          <gel:out>ral_ObjectID.getClass() : ${ral_ObjectID.getClass()} ral_ObjectID.length() :${ral_ObjectID.length()}  value[${ral_ObjectID}] </gel:out>
                                          <gel:out>v_PrjExtId.getClass(): ${v_PrjExtId.getClass()} v_PrjExtId.length():${v_PrjExtId.length()}  value[${v_PrjExtId}] </gel:out>
                                        </core:if>
                                        <core:if test="${(ral_FmtID.length() &gt; 0)}">
                                          <core:if test="${bDebugVerbose}">
                                            <gel:out>ral_FmtID.length() &gt; 0</gel:out>
                                          </core:if>
                                          <core:if test="${(v_PrjFmtId.length() == 0) || (!ral_FmtID.equals(v_PrjFmtId))}">
                                            <core:if test="${bDebugVerbose}">
                                              <gel:out>(v_PrjFmtId.length() == 0) || (!ral_FmtID.equals(v_PrjFmtId))</gel:out>
                                            </core:if>
                                            <core:if test="${bDebug}">
                                              <gel:out>Updating Project FmtID...</gel:out>
                                            </core:if>
                                            <core:set value="Updating Project(${v_ProjCode}.${v_ProjId}) agl_id(${v_PrjFmtId}) with new agl_id(${ral_FmtID})" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                                <gel:out/>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                            <core:if test="${!bSkipUpdate}">
                                              <core:if test="${bDebug}">
                                                <gel:out>Updating Projects with...</gel:out>
                                              </core:if>
                                              <sql:update var="v_invProj">
                        UPDATE odf_ca_project
                           SET agl_id = '${ral_FmtID}'
                         WHERE id = '${v_ProjId}'
                      </sql:update>
                                            </core:if>
                                            <!-- !(bSkipUpdate) -->
                                          </core:if>
                                        </core:if>
                                        <core:if test="${bArmstrong144_UUID}">
                                          <core:if test="${(ral_UUID.length() &gt; 0)}">
                                            <core:if test="${bDebugVerbose}">
                                              <gel:out>ral_UUID.length() &gt; 0</gel:out>
                                            </core:if>
                                            <core:if test="${(v_PrjExtId.length() == 0) || (!ral_UUID.equals(v_PrjExtId))}">
                                              <core:if test="${bDebugVerbose}">
                                                <gel:out>(v_PrjExtId.length() == 0) || (!ral_UUID.equals(v_PrjExtId))</gel:out>
                                              </core:if>
                                              <core:if test="${bDebug}">
                                                <gel:out>Updating Project ExtID...</gel:out>
                                              </core:if>
                                              <core:set value="Updating Project(${v_ProjCode}.${v_ProjId}) agl_ext_id(${v_PrjExtId}) with new agl_ext_id(${ral_UUID})" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${!bSkipUpdate}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>Updating Projects with...</gel:out>
                                                </core:if>
                                                <sql:update var="v_invProj">
                          UPDATE odf_ca_project
                             SET agl_ext_id = '${ral_UUID}'
                           WHERE id = '${v_ProjId}'
                        </sql:update>
                                              </core:if>
                                              <!-- !(bSkipUpdate) -->
                                              <core:set value="${ral_UUID}" var="v_PrjExtId"/>
                                            </core:if>
                                          </core:if>
                                        </core:if>
                                        <!-- bArmstrong144_UUID -->
                                        <core:if test="${!bArmstrong144_UUID}">
                                          <core:if test="${(ral_ObjectID.length() &gt; 0)}">
                                            <core:if test="${bDebugVerbose}">
                                              <gel:out>ral_ObjectID.length() &gt; 0</gel:out>
                                            </core:if>
                                            <core:if test="${(v_PrjExtId.length() == 0) || (!ral_ObjectID.equals(v_PrjExtId))}">
                                              <core:if test="${bDebugVerbose}">
                                                <gel:out>(v_PrjExtId.length() == 0) || (!ral_ObjectID.equals(v_PrjExtId))</gel:out>
                                              </core:if>
                                              <core:if test="${bDebug}">
                                                <gel:out>Updating Project ExtID...</gel:out>
                                              </core:if>
                                              <core:set value="Updating Project(${v_ProjCode}.${v_ProjId}) agl_ext_id(${v_PrjExtId}) with new agl_ext_id(${ral_ObjectID})" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                  <gel:out/>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${!bSkipUpdate}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>Updating Projects with...</gel:out>
                                                </core:if>
                                                <sql:update var="v_invProj">
                          UPDATE odf_ca_project
                             SET agl_ext_id = '${ral_ObjectID}'
                           WHERE id = '${v_ProjId}'
                        </sql:update>
                                              </core:if>
                                              <!-- !(bSkipUpdate) -->
                                              <core:set value="${ral_ObjectID}" var="v_PrjExtId"/>
                                            </core:if>
                                          </core:if>
                                        </core:if>
                                        <!-- bArmstrong144_UUID -->
                                        <core:if test="${bDebug}">
                                          <gel:out/>
                                          <gel:out/>
                                          <gel:out>==================</gel:out>
                                        </core:if>
                                      </core:catch>
                                      <!-- ___ Error Exception processing  ___ -->
                                      <core:if test="${not empty exvar3}">
                                        <gel:out/>
                                        <gel:out>__________________________________________________________________</gel:out>
                                        <core:set value="EXCEPTION: ${exvar3.getMessage()}" var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="INFO">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                        <core:if test="${bDebug}">
                                          <gel:out>exvar3.toString() ${exvar3.toString()}</gel:out>
                                          <gel:out>exvar3.getName() ${exvar3.getName()}</gel:out>
                                          <gel:out>ERROR - Exception: ${exvar3}</gel:out>
                                          <gel:out/>
                                        </core:if>
                                        <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                                          <core:arg type="java.lang.Throwable" value="${exvar3}"/>
                                        </core:new>
                                        <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                                        <gel:out/>
                                        <gel:out/>
                                        <gel:out>__________________________________________________________________</gel:out>
                                        <gel:out>__________________________________________________________________</gel:out>
                                      </core:if>
                                      <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                      <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                      <core:if test="${bDebugTimings}">
                                        <gel:out>Script Elapse #55: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                      </core:if>
                                      <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                      <!-- ________________________ -->
                                      <!-- ___ Get PPM PRTasks info for this Project ___ -->
                                      <core:if test="${bDebug}">
                                        <gel:out>Get PPM PRTask info... </gel:out>
                                        <gel:out/>
                                      </core:if>
                                      <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_33"/>
                                      <!-- ORDER BY t.prwbssequence so we have the info on the Parent Tasks before processing the child tasks. But it does not much matter, really. -->
                                      <sql:query var="taskDetails">
                SELECT  
                    t.prid task_intid,
                    t.prwbslevel task_lvl,
                    t.prexternalid task_id, 
                    t.prname task_name,
                    t.pristask is_task,
                    odft.agl_tsk_id,
                    odft.agl_tsk_ext_id
      
                  <core:if test="${((ppm_ver ge 15.4) || bForce154)}">
                    , odft.agl_tsk_status
                    , odft.agl_tsk_story_id
                    , odft.agl_tsk_p_story_id
                    , odft.agl_tsk_iteration
                    , odft.agl_tsk_plan_est
                  </core:if>

                                        <!-- ((ppm_ver ge 15.4) || bForce154) -->
      
                FROM  prtask t
                LEFT JOIN inv_investments inv ON inv.id = t.prprojectid 
                LEFT JOIN odf_ca_project odfp on odfp.id = inv.id
                LEFT JOIN odf_ca_task odft ON odft.id = t.prid
                WHERE inv.code='${v_ProjCode}'
                  AND (odft.agl_tsk_ext_id is not null
                  <core:if test="${((ppm_ver ge 15.2) || bForce152)}">
                    OR odft.agl_tsk_sync = '1'
                  </core:if>
                    )
                ORDER BY t.prwbssequence 
              </sql:query>
                                      <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_33"/>
                                      <core:set value="${(milEnd_33 - milStart_33)}" var="elapsedTime"/>
                                      <core:if test="${bDebugTimings}">
                                        <gel:out>Elapse Time PRTask Query: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                      </core:if>
                                      <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                      <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                      <core:if test="${bDebugTimings}">
                                        <gel:out>Script Elapse #73: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                      </core:if>
                                      <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                      <core:set value="${taskDetails.rows.size()}" var="len_arrTasks"/>
                                      <core:set value="Found ${len_arrTasks} Rally linked Tasks." var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                          <gel:out/>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                      <core:set value="" var="v_ParentTaskFmtId"/>
                                      <core:set value="" var="v_ParentTaskExtId"/>
                                      <core:forEach indexVar="i" items="${taskDetails.rows}" var="thisrow">
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                        <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                        <core:if test="${bDebugTimings}">
                                          <gel:out>Script Elapse #74: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                        </core:if>
                                        <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                        <core:set var="v_TaskLvl"><![CDATA[${taskDetails.rows[i].task_lvl}]]></core:set>
                                        <core:set var="v_TaskIntId"><![CDATA[${taskDetails.rows[i].task_intid}]]></core:set>
                                        <core:set var="v_TaskId"><![CDATA[${taskDetails.rows[i].task_id}]]></core:set>
                                        <core:set var="v_TaskName"><![CDATA[${taskDetails.rows[i].task_name}]]></core:set>
                                        <core:set var="v_TaskIsTask"><![CDATA[${taskDetails.rows[i].is_task}]]></core:set>
                                        <core:set var="v_TAglTskId"><![CDATA[${taskDetails.rows[i].agl_tsk_id}]]></core:set>
                                        <core:set var="v_TAglTskExtId"><![CDATA[${taskDetails.rows[i].agl_tsk_ext_id}]]></core:set>
                                        <core:set var="v_Task_Status"><![CDATA[${taskDetails.rows[i].agl_tsk_status}]]></core:set>
                                        <core:set var="v_Task_Story_id"><![CDATA[${taskDetails.rows[i].agl_tsk_story_id}]]></core:set>
                                        <core:set var="v_Task_P_story_id"><![CDATA[${taskDetails.rows[i].agl_tsk_p_story_id}]]></core:set>
                                        <core:set var="v_Task_Iteration"><![CDATA[${taskDetails.rows[i].agl_tsk_iteration}]]></core:set>
                                        <core:set var="v_Task_Plan_est"><![CDATA[${taskDetails.rows[i].agl_tsk_plan_est}]]></core:set>
                                        <core:if test="${bDebug}">
                                          <gel:out/>
                                          <gel:out>Task(${v_TaskId}).${v_TaskIntId} [${v_TAglTskId}][${v_TAglTskExtId}]:  ${v_TaskName}</gel:out>
                                        </core:if>
                                        <core:if test="${bDebug}">
                                          <gel:out/>
                                          <gel:out>Task(${v_TaskId}).${v_TaskIntId} [${v_TAglTskId}] Task_Status(${v_Task_Status}) Task_Story_id(${v_Task_Story_id}) Task_P_story_id(${v_Task_P_story_id}) Task_Iteration(${v_Task_Iteration}) Task_Plan_est(${v_Task_Plan_est}) </gel:out>
                                        </core:if>
                                        <core:set value="" var="ral_Name"/>
                                        <core:set value="" var="ral_ObjectID"/>
                                        <core:set value="" var="ral_ObjectID"/>
                                        <core:set value="" var="ral_UUID"/>
                                        <core:set value="" var="ral_FmtID"/>
                                        <!-- ________________________ -->
                                        <!-- ___ Get the Rally Feature info  ___ -->
                                        <core:if test="${bDebug}">
                                          <gel:out>Get Rally Feature Info...</gel:out>
                                        </core:if>
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_43"/>
                                        <core:catch var="exvar4">
                                          <!-- Check to see if our PPM Task is an AC Feature (Portfolio Item) or an AC Story (hierarchicalrequirement) -->
                                          <core:set value="false" var="bTaskIsStory"/>
                                          <core:if test="${v_Task_Story_id != null}">
                                            <!-- AND -->
                                            <core:if test="${v_Task_Story_id.length() &gt; 0}">
                                              <core:set value="true" var="bTaskIsStory"/>
                                              <core:if test="${bDebug}">
                                                <gel:out>PPM Task is an AC Story</gel:out>
                                              </core:if>
                                            </core:if>
                                          </core:if>
                                          <!-- Rally REST Feature Calls Start... -->
                                          <core:set value="${mapRRCodeTskPI.get(v_PrjAglSys)}" var="v_Uagl_Tsk_Code"/>
                                          <core:set value="${v_TaskName.replace(' ',myBlnk)}" var="strTempName1"/>
                                          <core:set value="${strTempName1.replace('#','%23')}" var="strTempName"/>
                                          <core:if test="${bDebug}">
                                            <gel:out>v_TaskName[${v_TaskName}] strTempName[${strTempName}] </gel:out>
                                          </core:if>
                                          <!-- 
                  <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_Uagl_Tsk_Code}?query=(FormattedID${myBlnk}=${myBlnk}"${v_TAglTskId}")</core:set>
                  <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RRtsk_pi_type}?query=(Name${myBlnk}contains${myBlnk}"${strTempName}")</core:set>
                  -->
                                          <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RRtsk_pi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(Parent.ObjectUUID${myBlnk}=${myBlnk}"${v_PrjExtId}"))</core:set>
                                          <core:if test="${(v_PrjExtId.length() lt 14)}">
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/PortfolioItem/${v_RRtsk_pi_type}?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(Parent.ObjectID${myBlnk}=${myBlnk}"${v_PrjExtId}"))</core:set>
                                          </core:if>
                                          <!-- Rally REST Story Calls Start... -->
                                          <core:if test="${bTaskIsStory}">
                                            <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/hierarchicalrequirement?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(${v_RRtsk_pi_type}.ObjectUUID${myBlnk}=${myBlnk}"${v_ParentTaskExtId}"))</core:set>
                                            <core:if test="${(v_PrjExtId.length() lt 14)}">
                                              <core:set var="httpRESTURL">${RallyHost}${RallyUrlPath}/hierarchicalrequirement?query=((Name${myBlnk}=${myBlnk}"${strTempName}")${myBlnk}AND${myBlnk}(${v_RRtsk_pi_type}.ObjectID${myBlnk}=${myBlnk}"${v_ParentTaskExtId}"))</core:set>
                                            </core:if>
                                          </core:if>
                                          <core:set value="${httpRESTURL}${myAmpr}fetch=ObjectID,FormattedID,Name" var="httpRESTURL"/>
                                          <core:if test="${(!(bSkipWorkspace) and (v_RRworkspace != null) and (v_RRworkspace.length() &gt; 0))}">
                                            <core:set encode="false" var="httpRESTURL">${httpRESTURL}${myAmpr}workspace=${RallyHost}${RallyUrlPath}/workspace/${v_RRworkspace}</core:set>
                                          </core:if>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                          </core:if>
                                          <core:if test="${bDebug502}">
                                            <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:new className="java.net.URL" var="remoteURL">
                                            <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                          </core:new>
                                          <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                          <core:set value="${connection.setDoInput(true)}" var="void"/>
                                          <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                          <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                          <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                          <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                          <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                          <core:if test="${v_RRauth_type.equals('API')}">
                                            <core:invoke method="setRequestProperty" on="${connection}">
                                              <core:arg type="java.lang.String" value="zsessionid"/>
                                              <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                            </core:invoke>
                                          </core:if>
                                          <core:if test="${v_RRauth_type.equals('BASIC')}">
                                            <core:if test="${v_RRencoded != null}">
                                              <!-- AND -->
                                              <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                <core:invoke method="setRequestProperty" on="${connection}">
                                                  <core:arg type="java.lang.String" value="Authorization"/>
                                                  <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                </core:invoke>
                                              </core:if>
                                            </core:if>
                                          </core:if>
                                          <core:if test="${bDebugVerLog}">
                                            <core:set value="Msg6: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                            <core:if test="${bDebugSec}">
                                              <core:set value="Msg6: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="INFO">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                          </core:if>
                                          <core:set value="${connection.connect()}" var="void"/>
                                          <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                          <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                          <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                            <gel:out>response_msg :  ${response_msg}</gel:out>
                                            <gel:out>response_code:  ${response_code}</gel:out>
                                          </core:if>
                                          <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_43"/>
                                          <core:set value="${(milEnd_43 - milStart_43)}" var="elapsedTime"/>
                                          <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                          <core:if test="${bDebugTimings}">
                                            <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                          </core:if>
                                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_44"/>
                                          <core:set value="${null}" var="jsonQR"/>
                                          <core:if test="${response_code == null}">
                                            <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                            <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                                <gel:out/>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:if test="${response_code != null}">
                                            <core:if test="${response_code == 401}">
                                              <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${(response_code == 502) || (response_code == 504)}">
                                              <core:set value="ERROR on HTTP. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebug502}">
                                                <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <!-- (bDebug502) -->
                                              <core:if test="${httpInputStream == null}">
                                                <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="WARN">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:set value="Trying to connect again." var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:new className="java.net.URL" var="remoteURL">
                                                  <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                                </core:new>
                                                <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                                <core:set value="${connection.setDoInput(true)}" var="void"/>
                                                <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                                <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                                <core:expr value="${connection.setRequestMethod(&quot;GET&quot;)}"/>
                                                <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                                <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                                <core:if test="${v_RRauth_type.equals('API')}">
                                                  <core:invoke method="setRequestProperty" on="${connection}">
                                                    <core:arg type="java.lang.String" value="zsessionid"/>
                                                    <core:arg type="java.lang.String" value="${v_RRapi_key}"/>
                                                  </core:invoke>
                                                </core:if>
                                                <core:if test="${v_RRauth_type.equals('BASIC')}">
                                                  <core:if test="${v_RRencoded != null}">
                                                    <!-- AND -->
                                                    <core:if test="${(v_RRencoded.length() &gt; 0)}">
                                                      <core:invoke method="setRequestProperty" on="${connection}">
                                                        <core:arg type="java.lang.String" value="Authorization"/>
                                                        <core:arg type="java.lang.String" value="Basic ${v_RRencoded}"/>
                                                      </core:invoke>
                                                    </core:if>
                                                  </core:if>
                                                </core:if>
                                                <core:if test="${bDebugVerLog}">
                                                  <core:set value="Msg6: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) " var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                  <core:if test="${bDebugSec}">
                                                    <core:set value="Msg6: v_PrjAglSys(${v_PrjAglSys}) v_RRauth_type(${v_RRauth_type}) AuthBasic(${v_RRencoded}) AuthAPI(${v_RRapi_key}) " var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="INFO">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                </core:if>
                                                <core:set value="${connection.connect()}" var="void"/>
                                                <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                                <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                                <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                                <core:if test="${bDebugREST}">
                                                  <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                                  <gel:out>response_msg :  ${response_msg}</gel:out>
                                                  <gel:out>response_code:  ${response_code}</gel:out>
                                                </core:if>
                                                <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                                <core:if test="${response_code == null}">
                                                  <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                                  <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                      <gel:out/>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="WARN">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                </core:if>
                                                <core:if test="${response_code != null}">
                                                  <core:if test="${response_code == 401}">
                                                    <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <core:if test="${(response_code == 502) || (response_code == 504)}">
                                                    <core:set value="ERROR on HTTP. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                                    <core:choose>
                                                      <core:when test="${gel_processId == null}">
                                                        <gel:out>${logMessage}</gel:out>
                                                      </core:when>
                                                      <core:otherwise>
                                                        <gel:log level="WARN">${logMessage}</gel:log>
                                                      </core:otherwise>
                                                    </core:choose>
                                                  </core:if>
                                                  <!-- (response_code == 502) || (response_code == 504) -->
                                                </core:if>
                                                <!-- (response_code != null) -->
                                              </core:if>
                                              <!-- httpInputStream == null -->
                                            </core:if>
                                            <!-- (response_code == 502) || (response_code == 504) -->
                                            <core:if test="${httpInputStream == null}">
                                              <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebug502}">
                                                <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <!-- OR -->
                                            <core:if test="${httpInputStream != null}">
                                              <core:new className="java.io.InputStreamReader" var="v_Input">
                                                <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                              </core:new>
                                              <core:new className="java.io.BufferedReader" var="v_InputData">
                                                <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                              </core:new>
                                              <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpData: ${httpData}</gel:out>
                                              </core:if>
                                              <!-- free up some resources -->
                                              <core:set value="${httpInputStream.close()}" var="dummy"/>
                                              <!-- JSON Response -->
                                              <core:new className="org.json.JSONObject" var="jsonResp">
                                                <core:arg type="java.lang.String" value="${httpData}"/>
                                              </core:new>
                                              <core:if test="${bDebugJSON}">
                                                <gel:out>jsonResp:</gel:out>
                                                <gel:out>${jsonResp.toString(1)}</gel:out>
                                                <gel:out>__________________</gel:out>
                                                <gel:out>__________________</gel:out>
                                              </core:if>
                                              <!-- PortfolioItem, top level JSON object -->
                                              <core:set value="${jsonResp.getJSONObject('QueryResult')}" var="jsonQR"/>
                                            </core:if>
                                            <!-- (httpInputStream != null) -->
                                          </core:if>
                                          <!-- (response_code != null) -->
                                          <core:if test="${jsonQR == null}">
                                            <core:if test="${bDebug}">
                                              <gel:out>jsonQR is null</gel:out>
                                            </core:if>
                                            <core:set value="Not Found Task(${v_TaskId}.${v_TaskIntId}) agl_ext_id(${v_TAglTskExtId})  " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                                <gel:out/>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:set value="" var="ral_ObjectID"/>
                                          <core:set value="" var="ral_Name"/>
                                          <core:if test="${jsonQR != null}">
                                            <!-- Results, in a single entry array  -->
                                            <core:set value="${jsonQR.getJSONArray('Results')}" var="jarrRArray"/>
                                            <core:if test="${jarrRArray != null}">
                                              <core:set value="${jarrRArray.length()}" var="len_jarrRArray"/>
                                              <core:if test="${bDebug}">
                                                <gel:out># Results     : ${len_jarrRArray}</gel:out>
                                              </core:if>
                                              <core:set value="0" var="i_jarrRArray"/>
                                              <!-- this is a String -->
                                              <core:set value="${i_jarrRArray+0}" var="i_jarrRArray"/>
                                              <!-- convert to numeric, but the default is a long -->
                                              <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                              <!-- convert the long to an int, which we need for the json calls to work -->
                                              <core:while test="${i_jarrRArray lt len_jarrRArray}">
                                                <!-- Get the NameArray JSON Object -->
                                                <core:set value="${jarrRArray.get(i_jarrRArray)}" var="jsonRArray"/>
                                                <core:set value="${jsonRArray.getString('_refObjectName')}" var="ral_Name"/>
                                                <!-- we add spaces, then remove them to make sure our datatype is a String, not a Long for comparison later -->
                                                <core:set value=" ${jsonRArray.getString('ObjectID')} " var="ral_ObjectID"/>
                                                <core:set value="${ral_ObjectID.trim()}" var="ral_ObjectID"/>
                                                <core:set value="${jsonRArray.getString('_refObjectUUID')}" var="ral_UUID"/>
                                                <core:set value="${jsonRArray.getString('FormattedID')}" var="ral_FmtID"/>
                                                <core:if test="${bDebug}">
                                                  <gel:out>ral_Name      : ${ral_Name}</gel:out>
                                                  <gel:out>ral_ObjectID  : ${ral_ObjectID} ${ral_ObjectID.getClass()}</gel:out>
                                                  <gel:out>ral_UUID      : ${ral_UUID}</gel:out>
                                                  <gel:out>ral_FmtID     : ${ral_FmtID}</gel:out>
                                                </core:if>
                                                <core:set value="${i_jarrRArray+1}" var="i_jarrRArray"/>
                                                <core:set value="${i_jarrRArray.intValue()}" var="i_jarrRArray"/>
                                                <!-- convert the long back to an int, which we need for the json calls -->
                                              </core:while>
                                              <!-- i_jarrRArray < len_jarrRArray -->
                                            </core:if>
                                          </core:if>
                                          <!-- jsonQR != null -->
                                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_44"/>
                                          <core:set value="${(milEnd_44 - milStart_44)}" var="elapsedTime"/>
                                          <core:if test="${bDebugTimings}">
                                            <gel:out>Elapse JSON parsing: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                          </core:if>
                                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                          <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                          <core:if test="${bDebugTimings}">
                                            <gel:out>Script Elapse #27: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                          </core:if>
                                          <!-- MJS __  SQL Update the PRTask with AC IDs -->
                                          <core:if test="${bDebug}">
                                            <gel:out/>
                                            <gel:out>Checking Task(${v_TaskId}.${v_TaskIntId}) agl_ext_id(${v_TAglTskExtId}) for new agl_tsk_ext_id ObjecID(${ral_ObjectID}) UUID(${ral_UUID})...</gel:out>
                                          </core:if>
                                          <core:if test="${bDebugVerbose}">
                                            <gel:out/>
                                            <gel:out>ral_ObjectID.getClass()  : ${ral_ObjectID.getClass()} ral_ObjectID.length()  :${ral_ObjectID.length()}  value[${ral_ObjectID}] </gel:out>
                                            <gel:out>v_TAglTskExtId.getClass(): ${v_TAglTskExtId.getClass()} v_TAglTskExtId.length():${v_TAglTskExtId.length()}  value[${v_TAglTskExtId}] </gel:out>
                                            <gel:out>v_ParentTaskFmtId(${v_ParentTaskFmtId}) v_ParentTaskExtId(${v_ParentTaskExtId}) </gel:out>
                                          </core:if>
                                          <core:if test="${(ral_FmtID.length() &gt; 0)}">
                                            <core:if test="${bDebugVerbose}">
                                              <gel:out>ral_FmtID.length() &gt; 0</gel:out>
                                            </core:if>
                                            <!-- If this is a Feature, update the Feature ID -->
                                            <core:if test="${!(bTaskIsStory)}">
                                              <!-- It is a Feature (Story Parent). Save the newly found Parent UUID -->
                                              <core:set value="${ral_FmtID}" var="v_ParentTaskFmtId"/>
                                              <core:if test="${(v_TAglTskId.length() == 0) || (!ral_FmtID.equals(v_TAglTskId))}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>Updating Task FmtID...</gel:out>
                                                </core:if>
                                                <core:set value="Updating Task(${v_TaskId}.${v_TaskIntId}) agl_tsk_id(${v_TAglTskId}) with new agl_tsk_id(${ral_FmtID})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                    <gel:out/>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${!bSkipUpdate}">
                                                  <core:if test="${bDebug}">
                                                    <gel:out>calling SQL:Update on Task ID...</gel:out>
                                                  </core:if>
                                                  <sql:update var="v_invTask">
                            UPDATE odf_ca_task
                               SET agl_tsk_id = '${ral_FmtID}'
                             WHERE id = '${v_TaskIntId}'
                          </sql:update>
                                                  <sql:update var="v_invTask">
                            UPDATE prtask
                               SET prexternalid = '${ral_FmtID}'
                             WHERE prid = '${v_TaskIntId}'
                          </sql:update>
                                                </core:if>
                                                <!-- !(bSkipUpdate) -->
                                              </core:if>
                                              <!-- (v_TAglTskId.length() == 0) || (!ral_FmtID.equals(v_TAglTskId)) -->
                                            </core:if>
                                            <!-- !(bTaskIsStory) -->
                                            <!-- If this is a Story, update the Story ID -->
                                            <core:if test="${bTaskIsStory}">
                                              <core:if test="${(v_Task_Story_id.length() == 0) || (!ral_FmtID.equals(v_Task_Story_id))}">
                                                <core:if test="${bDebug}">
                                                  <gel:out>Updating Task Story FmtID...</gel:out>
                                                </core:if>
                                                <core:set value="Updating Task(${v_TaskId}.${v_TaskIntId}) Task_Story_id(${v_Task_Story_id}) with new agl_tsk_story_id(${ral_FmtID})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                    <gel:out/>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${!bSkipUpdate}">
                                                  <core:if test="${bDebug}">
                                                    <gel:out>calling SQL:Update on Task Story ID...</gel:out>
                                                  </core:if>
                                                  <sql:update var="v_invTask">
                            UPDATE odf_ca_task
                               SET agl_tsk_story_id = '${ral_FmtID}'
                             WHERE id = '${v_TaskIntId}'
                          </sql:update>
                                                  <sql:update var="v_invTask">
                            UPDATE prtask
                               SET prexternalid = '${ral_FmtID}'
                             WHERE prid = '${v_TaskIntId}'
                          </sql:update>
                                                </core:if>
                                                <!-- !(bSkipUpdate) -->
                                              </core:if>
                                              <!-- (v_Task_Story_id.length() == 0) || (!ral_FmtID.equals(v_Task_Story_id)) -->
                                            </core:if>
                                            <!-- bTaskIsStory -->
                                            <!-- If this is a Story, update the Feature ID -->
                                            <core:if test="${bTaskIsStory}">
                                              <core:if test="${(v_ParentTaskFmtId.length() &gt; 0)}">
                                                <core:if test="${(v_TAglTskId.length() == 0) || (!v_ParentTaskFmtId.equals(v_TAglTskId))}">
                                                  <core:if test="${bDebug}">
                                                    <gel:out>Updating Task FmtID...</gel:out>
                                                  </core:if>
                                                  <core:set value="Updating Task(${v_TaskId}.${v_TaskIntId}) Feature agl_tsk_id(${v_TAglTskId}) with new Feature agl_tsk_id(${v_ParentTaskFmtId})" var="logMessage"/>
                                                  <core:choose>
                                                    <core:when test="${gel_processId == null}">
                                                      <gel:out>${logMessage}</gel:out>
                                                      <gel:out/>
                                                    </core:when>
                                                    <core:otherwise>
                                                      <gel:log level="INFO">${logMessage}</gel:log>
                                                    </core:otherwise>
                                                  </core:choose>
                                                  <core:if test="${!bSkipUpdate}">
                                                    <core:if test="${bDebug}">
                                                      <gel:out>calling SQL:Update on Task Feature ID...</gel:out>
                                                    </core:if>
                                                    <sql:update var="v_invTask">
                              UPDATE odf_ca_task
                                 SET agl_tsk_id = '${v_ParentTaskFmtId}'
                               WHERE id = '${v_TaskIntId}'
                            </sql:update>
                                                  </core:if>
                                                  <!-- !(bSkipUpdate) -->
                                                </core:if>
                                                <!-- (v_TAglTskId.length() == 0) || (!v_ParentTaskFmtId.equals(v_TAglTskId)) -->
                                              </core:if>
                                              <!-- (v_ParentTaskFmtId.length() > 0) -->
                                            </core:if>
                                            <!-- bTaskIsStory -->
                                          </core:if>
                                          <!-- (ral_FmtID.length() > 0) -->
                                          <core:if test="${bArmstrong144_UUID}">
                                            <core:if test="${(ral_UUID.length() &gt; 0)}">
                                              <core:if test="${bDebugVerbose}">
                                                <gel:out>ral_UUID.length() &gt; 0</gel:out>
                                              </core:if>
                                              <!-- If not a Story, it is a Feature (Story Parent). Save the newly found Parent UUID -->
                                              <core:if test="${!(bTaskIsStory)}">
                                                <core:set value="${ral_UUID}" var="v_ParentTaskExtId"/>
                                              </core:if>
                                              <core:if test="${(v_TAglTskExtId == null) || (v_TAglTskExtId.length() == 0) || (!ral_UUID.equals(v_TAglTskExtId))}">
                                                <core:if test="${bDebugVerbose}">
                                                  <gel:out>(v_TAglTskExtId.length() == 0) || (!ral_UUID.equals(v_TAglTskExtId))</gel:out>
                                                </core:if>
                                                <core:if test="${bDebug}">
                                                  <gel:out>Updating Task ExtID...</gel:out>
                                                </core:if>
                                                <core:set value="Updating Task(${v_TaskId}.${v_TaskIntId}) agl_tsk_ext_id(${v_TAglTskExtId}) with new agl_tsk_ext_id(${ral_UUID})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                    <gel:out/>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${!bSkipUpdate}">
                                                  <core:if test="${bDebug}">
                                                    <gel:out>calling SQL:Update on Task...</gel:out>
                                                  </core:if>
                                                  <sql:update var="v_invTask">
                            UPDATE odf_ca_task
                               SET agl_tsk_ext_id = '${ral_UUID}'
                             WHERE id = '${v_TaskIntId}'
                          </sql:update>
                                                </core:if>
                                                <!-- !(bSkipUpdate) -->
                                              </core:if>
                                            </core:if>
                                          </core:if>
                                          <core:if test="${!bArmstrong144_UUID}">
                                            <core:if test="${(ral_ObjectID.length() &gt; 0)}">
                                              <core:if test="${bDebugVerbose}">
                                                <gel:out>ral_ObjectID.length() &gt; 0</gel:out>
                                              </core:if>
                                              <!-- If not a Story, it is a Feature (Story Parent). Save the newly found Parent ObjectID -->
                                              <core:if test="${!(bTaskIsStory)}">
                                                <core:set value="${ral_ObjectID}" var="v_ParentTaskExtId"/>
                                              </core:if>
                                              <core:if test="${(v_TAglTskExtId == null) || (v_TAglTskExtId.length() == 0) || (!ral_ObjectID.equals(v_TAglTskExtId))}">
                                                <core:if test="${bDebugVerbose}">
                                                  <gel:out>(v_TAglTskExtId.length() == 0) || (!ral_ObjectID.equals(v_TAglTskExtId))</gel:out>
                                                </core:if>
                                                <core:if test="${bDebug}">
                                                  <gel:out>Updating Task ExtID...</gel:out>
                                                </core:if>
                                                <core:set value="Updating Task(${v_TaskId}.${v_TaskIntId}) agl_tsk_ext_id(${v_TAglTskExtId}) with new agl_tsk_ext_id(${ral_ObjectID})" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                    <gel:out/>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                                <core:if test="${!bSkipUpdate}">
                                                  <core:if test="${bDebug}">
                                                    <gel:out>calling SQL:Update on Task...</gel:out>
                                                  </core:if>
                                                  <sql:update var="v_invTask">
                            UPDATE odf_ca_task
                               SET agl_tsk_ext_id = '${ral_ObjectID}'
                             WHERE id = '${v_TaskIntId}'
                          </sql:update>
                                                </core:if>
                                                <!-- !(bSkipUpdate) -->
                                              </core:if>
                                            </core:if>
                                          </core:if>
                                          <core:if test="${bDebug}">
                                            <gel:out/>
                                            <gel:out/>
                                            <gel:out>==================</gel:out>
                                          </core:if>
                                        </core:catch>
                                        <!-- ___ Error Exception processing  ___ -->
                                        <core:if test="${not empty exvar4}">
                                          <gel:out/>
                                          <gel:out>__________________________________________________________________</gel:out>
                                          <core:set value="EXCEPTION: ${exvar4.getMessage()}" var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="INFO">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                          <core:if test="${bDebug}">
                                            <gel:out>exvar4.toString() ${exvar4.toString()}</gel:out>
                                            <gel:out>exvar4.getName() ${exvar4.getName()}</gel:out>
                                            <gel:out>ERROR - Exception: ${exvar4}</gel:out>
                                            <gel:out/>
                                          </core:if>
                                          <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                                            <core:arg type="java.lang.Throwable" value="${exvar4}"/>
                                          </core:new>
                                          <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                                          <gel:out/>
                                          <gel:out/>
                                          <gel:out>__________________________________________________________________</gel:out>
                                          <gel:out>__________________________________________________________________</gel:out>
                                        </core:if>
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                        <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                        <core:if test="${bDebugTimings}">
                                          <gel:out>Script Elapse #55: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                        </core:if>
                                        <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                      </core:forEach>
                                      <!-- PPM PRTask info for this Project -->
                                      <core:if test="${bDebug}">
                                        <gel:out/>
                                        <gel:out>Finished PPM PRTasks </gel:out>
                                      </core:if>
                                      <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                      <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                      <core:if test="${bDebugTimings}">
                                        <gel:out>Script Elapse #75: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                      </core:if>
                                      <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                    </core:forEach>
                                    <!-- invRecord, or for each Project -->
                                    <core:if test="${bDebug}">
                                      <gel:out/>
                                      <gel:out>Finished PPM Projects </gel:out>
                                    </core:if>
                                    <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                    <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                    <core:if test="${bDebugTimings}">
                                      <gel:out>Script Elapse #82: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                    </core:if>
                                    <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                  </core:if>
                                  <!-- !bSkipSyncPPMProjects -->
                                  <!-- ________________ -->
                                  <!--
            Delete all entries in the PPM Missing Users table
    
            DELETE INT_AGL_MISSING_USERS WHERE user_name = 'dthomas@megasales.com'
            or DELETE INT_AGL_MISSING_USERS 
            -->
                                  <core:if test="${!bSkip_DelMissingUsers}">
                                    <core:set value="Cleaning up Missing Users table" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                        <gel:out/>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                    <core:if test="${!(bSkipUpdate)}">
                                      <sql:update var="v_missingRes">
                DELETE int_agl_missing_users 
              </sql:update>
                                    </core:if>
                                    <!-- !(bSkipUpdate) -->
                                  </core:if>
                                  <!-- ________________ -->
                                  <!--
            Delete all entries in the Agile Milestones table
    
            DELETE ODF_MULTI_VALUED_LOOKUPS where attribute = 'agl_tsk_milestones'
            DELETE int_agl_milestones where milestone_id NOT in (select unique value  from ODF_MULTI_VALUED_LOOKUPS where attribute = 'agl_tsk_milestones')
            -->
                                  <core:if test="${!bSkip_DelMilestones}">
                                    <core:if test="${((ppm_ver ge 15.2) || bForce152)}">
                                      <core:set value="Cleaning up Agile Milestones table" var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                          <gel:out/>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                      <core:if test="${!(bSkipUpdate)}">
                                        <sql:update var="v_milestones">
                  DELETE odf_multi_valued_lookups WHERE attribute = 'agl_tsk_milestones'
                </sql:update>
                                        <sql:update var="v_milestones">
                  DELETE int_agl_milestones WHERE milestone_id NOT IN (SELECT UNIQUE value FROM odf_multi_valued_lookups WHERE attribute = 'agl_tsk_milestones')
                </sql:update>
                                      </core:if>
                                      <!-- !(bSkipUpdate) -->
                                    </core:if>
                                    <!-- ((ppm_ver ge 15.2) || bForce152) -->
                                  </core:if>
                                  <!-- ________________ -->
                                  <!--
            Cleanup PPM-to-AC Task data to prepare for OOTB sync
    
            on Task, if agl_ext_id blank, 
              clear out agl_tsk_id (so we sync/create new AC Features)
              clear out prtask.prexternalid (so we can create unique PPM Task IDs)
            -->
                                  <core:if test="${!(bSkipPPMtoACTaskCleanup)}">
                                    <core:if test="${((ppm_ver ge 15.2) || bForce152)}">
                                      <core:set value="Cleaning up attributes in PPM-to-AC Tasks in preparation for OOTB Sync AC..." var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                          <gel:out/>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                      <!-- Cleanup PPM-to-AC Tasks -->
                                      <core:if test="${!(bSkipUpdate)}">
                                        <core:if test="${bDebug}">
                                          <core:set value="PPM-to-AC Tasks cleanup: Reset odf_ca_task.agl_tsk_id " var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="INFO">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                        </core:if>
                                        <sql:update var="v_taskCleanup">
                  UPDATE odf_ca_task 
                     SET agl_tsk_id = ''
                   WHERE id IN (
                     SELECT t.prid task_intid
                       FROM inv_investments inv 
                       LEFT JOIN odf_ca_project odfp ON odfp.id = inv.id
                       LEFT JOIN prtask t ON inv.id = t.prprojectid 
                       LEFT JOIN odf_ca_task odft ON odft.id = t.prid
                       LEFT JOIN nmc_integrations int ON int.code = odfp.agl_system
                       LEFT JOIN odf_ca_integration odfint ON int.id = odfint.id
                      WHERE odfint.agl_create_direction = 'PPM_TO_AGL'
                        AND odft.agl_tsk_sync = '1'
                        AND odft.agl_tsk_ext_id IS NULL
                      )
                </sql:update>
                                        <core:if test="${bDebug}">
                                          <core:set value="PPM-to-AC Tasks cleanup: Reset prtask.prexternalid " var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="INFO">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                        </core:if>
                                        <sql:update var="v_taskCleanup">
                  UPDATE prtask 
                     SET prexternalid = ''
                   WHERE prid IN (
                     SELECT t.prid task_intid
                       FROM inv_investments inv 
                       LEFT JOIN odf_ca_project odfp ON odfp.id = inv.id
                       LEFT JOIN prtask t ON inv.id = t.prprojectid 
                       LEFT JOIN odf_ca_task odft ON odft.id = t.prid
                       LEFT JOIN nmc_integrations int ON int.code = odfp.agl_system
                       LEFT JOIN odf_ca_integration odfint ON int.id = odfint.id
                      WHERE odfint.agl_create_direction = 'PPM_TO_AGL'
                       AND odft.agl_tsk_sync = '1'
                       AND odft.agl_tsk_ext_id IS NULL
                      )
                </sql:update>
                                      </core:if>
                                      <!-- !(bSkipUpdate) -->
                                    </core:if>
                                    <!-- ((ppm_ver ge 15.2) || bForce152) -->
                                  </core:if>
                                  <!-- !(bSkipPPMtoACTaskCleanup) -->
                                  <core:if test="${!(bSkipInitPPMtoACProjects)}">
                                    <core:if test="${((ppm_ver ge 15.3) || bForce153)}">
                                      <!-- ________________________ -->
                                      <!-- ___ Get the PPM Time Tracking sub-tasks for all Projects ___ -->
                                      <core:if test="${bDebug}">
                                        <gel:out>Get PPM PRTask info... </gel:out>
                                        <gel:out/>
                                      </core:if>
                                      <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_33"/>
                                      <core:set value="Cleaning up Time Tracking sub-tasks in PPM-to-AC demo Projects in preparation for OOTB Sync AC..." var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                          <gel:out/>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                      <sql:query var="taskDetails">
    
                SELECT  inv.id invid,
                    inv.name proj_name,
                    t.prname task_name,
                    t.prid task_intid,
                    t.prexternalid task_id, 
                    t.prwbslevel, 
                    t.prwbssequence, 
                    t.wbs_parseq pseq, 
                    t.wbs_nnbseq,
                    t.pristask is_task
                FROM  prtask t
                LEFT JOIN inv_investments inv ON inv.id = t.prprojectid 
                , ( SELECT  
                    inv.id invid,
                    t.prid task_intid,
                    t.prwbssequence tseq, 
                    inv.name proj_name,
                    t.prname task_name,
                    t.prexternalid task_id, 
                    t.prwbslevel, 
                    t.wbs_parseq, 
                    t.wbs_nnbseq,
                    odft.agl_tsk_id,
                    odft.agl_tsk_ext_id, 
                    odft.agl_tsk_sync,
                    t.pristask is_task,
                    t.priskey is_key
                FROM  prtask t
                LEFT JOIN inv_investments inv ON inv.id = t.prprojectid 
                LEFT JOIN inv_projects prj ON inv.id = prj.prid
                LEFT JOIN odf_ca_task odft ON odft.id = t.prid
                WHERE odft.agl_tsk_sync = 1
                  AND prj.is_template != 1
                ORDER BY inv.name,t.prwbssequence 
                ) ft
                WHERE (ft.invid = inv.id AND ft.tseq = t.wbs_parseq)
    
              </sql:query>
                                      <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_33"/>
                                      <core:set value="${(milEnd_33 - milStart_33)}" var="elapsedTime"/>
                                      <core:if test="${bDebugTimings}">
                                        <gel:out>Elapse Time PRTask Query: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                      </core:if>
                                      <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                      <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                      <core:if test="${bDebugTimings}">
                                        <gel:out>Script Elapse #73: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                      </core:if>
                                      <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                      <core:set value="${taskDetails.rows.size()}" var="len_arrTasks"/>
                                      <core:set value="Found ${len_arrTasks} Rally linked Tasks." var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                          <gel:out/>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="INFO">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                      <core:forEach indexVar="i" items="${taskDetails.rows}" var="thisrow">
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                        <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                        <core:if test="${bDebugTimings}">
                                          <gel:out>Script Elapse #74: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                        </core:if>
                                        <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                        <core:set var="v_InvId"><![CDATA[${taskDetails.rows[i].invid}]]></core:set>
                                        <core:set var="v_TaskIntId"><![CDATA[${taskDetails.rows[i].task_intid}]]></core:set>
                                        <core:set var="v_TaskId"><![CDATA[${taskDetails.rows[i].task_id}]]></core:set>
                                        <core:set var="v_ProjName"><![CDATA[${taskDetails.rows[i].proj_name}]]></core:set>
                                        <core:set var="v_TaskName"><![CDATA[${taskDetails.rows[i].task_name}]]></core:set>
                                        <core:set var="v_TaskIsTask"><![CDATA[${taskDetails.rows[i].is_task}]]></core:set>
                                        <core:if test="${bDebug}">
                                          <gel:out/>
                                          <gel:out>Project(${v_InvId}).${v_ProjName} Task(${v_TaskId}).${v_TaskIntId}:  ${v_TaskName}</gel:out>
                                        </core:if>
                                        <core:set value="" var="ral_Name"/>
                                        <core:set value="" var="ral_ObjectID"/>
                                        <core:set value="" var="ral_ObjectID"/>
                                        <core:set value="" var="ral_UUID"/>
                                        <core:set value="" var="ral_FmtID"/>
                                        <!-- ________________________ -->
                                        <!-- ___ Delete the PPM Task   ___ -->
                                        <core:if test="${bDebug}">
                                          <gel:out>Delete the PPM Task...</gel:out>
                                        </core:if>
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_43"/>
                                        <core:catch var="exvar5">
                                          <!-- PPM REST Task Delete begins here... -->
                                          <!--
                  /projects/{projectsInternalId}/tasks/{tasksInternalId}
                  /projects/{invid}/tasks/{task_intid}
                  http://ppmcps04.ca.com/ppm/rest/v1/projects/5037001/tasks/5065148
                  -->
                                          <core:set var="httpRESTURL">${XOGURL}${PPMUrlPath}/projects/${v_InvId}/tasks/${v_TaskIntId}</core:set>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>httpRESTURL: ${httpRESTURL}</gel:out>
                                          </core:if>
                                          <core:if test="${bDebug502}">
                                            <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:new className="java.net.URL" var="remoteURL">
                                            <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                          </core:new>
                                          <core:set value="${remoteURL.openConnection()}" var="connection"/>
                                          <core:set value="${connection.setDoInput(true)}" var="void"/>
                                          <core:set value="${connection.setDoOutput(false)}" var="void"/>
                                          <core:set value="${connection.setUseCaches(false)}" var="void"/>
                                          <!-- <core:expr value='${connection.setRequestMethod("GET")}'/>  -->
                                          <core:expr value="${connection.setRequestMethod(&quot;DELETE&quot;)}"/>
                                          <core:expr value="${connection.setRequestProperty(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                          <core:expr value="${connection.setRequestProperty(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                          <core:expr value="${connection.setRequestProperty(h_authToken, v_authToken)}"/>
                                          <core:if test="${bDebugVerLog}">
                                            <core:set value="MsgP1: Auth(${h_authToken}: ${v_authToken}) Project(${v_InvId}) ${v_ProjName}  Task(${v_TaskIntId}) ${v_TaskName} ) " var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="INFO">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:set value="${connection.connect()}" var="void"/>
                                          <core:set value="${connection.getHeaderField(0)}" var="response_hdr"/>
                                          <core:set value="${connection.getResponseMessage()}" var="response_msg"/>
                                          <core:set value="${connection.getResponseCode()}" var="response_code"/>
                                          <core:if test="${bDebugREST}">
                                            <gel:out>getHeaderField(0): ${response_hdr}</gel:out>
                                            <gel:out>response_msg :  ${response_msg}</gel:out>
                                            <gel:out>response_code:  ${response_code}</gel:out>
                                          </core:if>
                                          <core:set value="${connection.getInputStream()}" var="httpInputStream"/>
                                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd_43"/>
                                          <core:set value="${(milEnd_43 - milStart_43)}" var="elapsedTime"/>
                                          <core:set value="${dteElapse.setTime(elapsedTime)}" var="dummy"/>
                                          <core:if test="${bDebugTimings}">
                                            <gel:out>Elapse Rally REST: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                          </core:if>
                                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milStart_44"/>
                                          <core:if test="${response_code == null}">
                                            <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                            <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                            <core:choose>
                                              <core:when test="${gel_processId == null}">
                                                <gel:out>${logMessage}</gel:out>
                                                <gel:out/>
                                              </core:when>
                                              <core:otherwise>
                                                <gel:log level="WARN">${logMessage}</gel:log>
                                              </core:otherwise>
                                            </core:choose>
                                          </core:if>
                                          <core:if test="${response_code != null}">
                                            <core:if test="${response_code == 401}">
                                              <core:set value="ERROR on Authentication: Please validate Integrations setup: ${v_RRname}(${v_PrjAglSys})" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                            </core:if>
                                            <core:if test="${(response_code == 502) || (response_code == 504)}">
                                              <core:set value="ERROR on HTTP. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebug502}">
                                                <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <!-- (bDebug502) -->
                                            </core:if>
                                            <!-- (response_code == 502) || (response_code == 504) -->
                                            <core:if test="${httpInputStream == null}">
                                              <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                              <core:choose>
                                                <core:when test="${gel_processId == null}">
                                                  <gel:out>${logMessage}</gel:out>
                                                </core:when>
                                                <core:otherwise>
                                                  <gel:log level="WARN">${logMessage}</gel:log>
                                                </core:otherwise>
                                              </core:choose>
                                              <core:if test="${bDebug502}">
                                                <core:set value="httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                            </core:if>
                                            <!-- OR -->
                                            <core:if test="${httpInputStream != null}">
                                              <core:new className="java.io.InputStreamReader" var="v_Input">
                                                <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                              </core:new>
                                              <core:new className="java.io.BufferedReader" var="v_InputData">
                                                <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                              </core:new>
                                              <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                              <core:if test="${bDebugREST}">
                                                <gel:out>httpData: ${httpData}</gel:out>
                                              </core:if>
                                              <!-- free up some resources -->
                                              <core:set value="${httpInputStream.close()}" var="dummy"/>
                                              <core:if test="${(response_code == 200) }">
                                                <core:set value="Task Deleted: Project(${v_InvId}) ${v_ProjName}  Task(${v_TaskIntId}) ${v_TaskName} " var="logMessage"/>
                                                <core:choose>
                                                  <core:when test="${gel_processId == null}">
                                                    <gel:out>${logMessage}</gel:out>
                                                  </core:when>
                                                  <core:otherwise>
                                                    <gel:log level="INFO">${logMessage}</gel:log>
                                                  </core:otherwise>
                                                </core:choose>
                                              </core:if>
                                              <!-- (response_code == 200) -->
                                              <!-- JSON Response -->
                                              <!-- for GET
                      <core:new className="org.json.JSONObject" var="jsonResp" >
                        <core:arg type="java.lang.String" value="${httpData}" />
                      </core:new>
          
                      <core:if test="${bDebugJSONXXX}">
                        <gel:out>jsonResp:</gel:out>
                        <gel:out>${jsonResp.toString(1)}</gel:out>
                        <gel:out>_______________________________________________</gel:out>
                        <gel:out>_______________________________________________</gel:out>
                      </core:if>
                       -->
                                            </core:if>
                                            <!-- (httpInputStream != null) -->
                                          </core:if>
                                          <!-- (response_code != null) -->
                                          <core:if test="${bDebug}">
                                            <gel:out/>
                                            <gel:out/>
                                            <gel:out>==================</gel:out>
                                          </core:if>
                                        </core:catch>
                                        <!-- ___ Error Exception processing  ___ -->
                                        <core:if test="${not empty exvar5}">
                                          <gel:out/>
                                          <gel:out>__________________________________________________________________</gel:out>
                                          <core:set value="EXCEPTION: ${exvar5.getMessage()}" var="logMessage"/>
                                          <core:choose>
                                            <core:when test="${gel_processId == null}">
                                              <gel:out>${logMessage}</gel:out>
                                            </core:when>
                                            <core:otherwise>
                                              <gel:log level="INFO">${logMessage}</gel:log>
                                            </core:otherwise>
                                          </core:choose>
                                          <core:if test="${bDebug}">
                                            <gel:out>exvar5.toString() ${exvar5.toString()}</gel:out>
                                            <gel:out>exvar5.getName() ${exvar5.getName()}</gel:out>
                                            <gel:out>ERROR - Exception: ${exvar5}</gel:out>
                                            <gel:out/>
                                          </core:if>
                                          <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                                            <core:arg type="java.lang.Throwable" value="${exvar5}"/>
                                          </core:new>
                                          <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                                          <gel:out/>
                                          <gel:out/>
                                          <gel:out>__________________________________________________________________</gel:out>
                                          <gel:out>__________________________________________________________________</gel:out>
                                        </core:if>
                                        <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                                        <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                                        <core:if test="${bDebugTimings}">
                                          <gel:out>Script Elapse #55: sec[${sdFmtElapseNum.format(elapsedTime/1000)}]</gel:out>
                                        </core:if>
                                        <!-- <core:set var="logMessage"  value="Script Elapse: ${sdFmtElapse.format(dteElapse)}" /><core:choose><core:when test="${gel_processId == null}"><gel:out>${logMessage}</gel:out></core:when><core:otherwise><gel:log level="INFO">${logMessage}</gel:log></core:otherwise></core:choose>  -->
                                      </core:forEach>
                                      <!-- PPM PRTask info for this Project -->
                                      <core:if test="${bDebug}">
                                        <gel:out/>
                                        <gel:out>Finished PPM PRTasks </gel:out>
                                      </core:if>
                                    </core:if>
                                    <!-- ((ppm_ver ge 15.3) || bForce153) -->
                                  </core:if>
                                  <!-- !(bSkipInitPPMtoACProjects) -->
                                </core:catch>
                                <core:if test="${not empty exvar2}">
                                  <gel:out/>
                                  <gel:out>__________________________________________________________________</gel:out>
                                  <core:set value="1 EXCEPTION: ${exvar2.getMessage()}" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:if test="${bDebug}">
                                    <gel:out>ERROR - Exception: ${exvar2}</gel:out>
                                    <gel:out/>
                                  </core:if>
                                  <gel:out/>
                                  <gel:out>__________________________________________________________________</gel:out>
                                  <gel:out>__________________________________________________________________</gel:out>
                                  <!--
              -->
                                  <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                                    <core:arg type="java.lang.Throwable" value="${exvar2}"/>
                                  </core:new>
                                  <gel:log level="INFO" message="ERROR - TAG Exception: ${exTag}"/>
                                  <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                                  <gel:out/>
                                  <gel:out>__________________________________________________________________</gel:out>
                                  <gel:out>__________________________________________________________________</gel:out>
                                </core:if>
                              </core:catch>
                              <core:if test="${not empty exvar}">
                                <gel:out/>
                                <gel:out>__________________________________________________________________</gel:out>
                                <core:set value="2 EXCEPTION: ${exvar.getMessage()}" var="logMessage"/>
                                <core:choose>
                                  <core:when test="${gel_processId == null}">
                                    <gel:out>${logMessage}</gel:out>
                                  </core:when>
                                  <core:otherwise>
                                    <gel:log level="INFO">${logMessage}</gel:log>
                                  </core:otherwise>
                                </core:choose>
                                <gel:out>__________________________________________________________________</gel:out>
                                <gel:out>__________________________________________________________________</gel:out>
                              </core:if>
                            </core:if>
                            <!-- (!(bChkIntDemoSetup)) || ((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup)) -->
                            <!-- ________________________ -->
                            <!-- ___ If needed, reset the Demo Setup flag and/or set the Integrations instance to Active  ___ -->
                            <core:if test="${(v_IntId != null) &amp;&amp; (v_IntId.length() &gt; 0)}">
                              <core:if test="${((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup) &amp;&amp; (bResetIntDemoSetup)) || (bSetIntDemoToActive)}">
                                <core:new className="org.json.JSONObject" var="jsonPatchInt"/>
                                <!-- Supply the Integrations object Internal Id on the URL for the PATCH, not in the body
        <core:set var="dummy" value='${jsonPatchInt.put("_internalId",v_IntIdInt)}'/>
        -->
                                <core:set value="false" var="bIntChangesFound"/>
                                <core:if test="${(bResetIntDemoSetup)}">
                                  <core:set value="true" var="bIntChangesFound"/>
                                  <core:set value="${(1==0)}" var="bTemp"/>
                                  <core:set value="${jsonPatchInt.put(&quot;z_runDataSync&quot;,bTemp)}" var="dummy"/>
                                  <core:if test="${bDebug}">
                                    <core:set value="set z_runDataSync to false" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                </core:if>
                                <core:if test="${(bSetIntDemoToActive)}">
                                  <core:set value="true" var="bIntChangesFound"/>
                                  <core:set value="${(1==1)}" var="bTemp"/>
                                  <core:set value="${jsonPatchInt.put(&quot;isActive&quot;,bTemp)}" var="dummy"/>
                                  <core:if test="${bDebug}">
                                    <core:set value="set isActive to true" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                </core:if>
                                <core:if test="${(bIntChangesFound)}">
                                  <core:set value="Updating (${v_IntId}.${v_IntCode}) ${v_IntName}" var="logMessage"/>
                                  <core:choose>
                                    <core:when test="${gel_processId == null}">
                                      <gel:out>${logMessage}</gel:out>
                                    </core:when>
                                    <core:otherwise>
                                      <gel:log level="INFO">${logMessage}</gel:log>
                                    </core:otherwise>
                                  </core:choose>
                                  <core:if test="${bDebugREST}">
                                    <core:set value="jsonPatchInt: ${jsonPatchInt}" var="logMessage"/>
                                    <core:choose>
                                      <core:when test="${gel_processId == null}">
                                        <gel:out>${logMessage}</gel:out>
                                      </core:when>
                                      <core:otherwise>
                                        <gel:log level="INFO">${logMessage}</gel:log>
                                      </core:otherwise>
                                    </core:choose>
                                  </core:if>
                                  <!-- PATCH the linked object -->
                                  <core:set var="httpRESTURL">${XOGURL}${PPMUrlPath}/integrations/${v_IntId}</core:set>
                                  <core:new className="org.apache.http.client.utils.URIBuilder" var="httpURI">
                                    <core:arg type="java.lang.String" value="${httpRESTURL}"/>
                                  </core:new>
                                  <core:new className="org.apache.http.client.methods.HttpPatch" var="httppatch">
                                    <core:arg type="java.net.URI" value="${httpURI.build()}"/>
                                  </core:new>
                                  <core:if test="${bDebugREST}">
                                    <gel:out>httppatch.getURI():  ${httppatch.getURI()}</gel:out>
                                  </core:if>
                                  <core:new className="org.apache.http.entity.StringEntity" var="httpEntity">
                                    <core:arg type="java.lang.String" value="${jsonPatchInt.toString(1)}"/>
                                  </core:new>
                                  <core:expr value="${httppatch.setEntity(httpEntity)}"/>
                                  <core:expr value="${httppatch.setHeader(&quot;Content-type&quot;, &quot;application/json&quot;)}"/>
                                  <core:expr value="${httppatch.setHeader(&quot;Accept&quot;, &quot;application/json&quot;)}"/>
                                  <core:expr value="${httppatch.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;)}"/>
                                  <core:expr value="${httppatch.setHeader(h_authToken, v_authToken)}"/>
                                  <core:if test="${!(bSkipRESTUpdate)}">
                                    <core:if test="${bDebug}">
                                      <gel:out trim="false">Patching Integration...</gel:out>
                                    </core:if>
                                    <!-- Should be just client.execute(httppatch), but we need to identify the httppatch class by specifying it using the core:arg parameter -->
                                    <core:invoke method="execute" on="${client}" var="response">
                                      <core:arg type="org.apache.http.client.methods.HttpPatch" value="${httppatch}"/>
                                    </core:invoke>
                                    <core:set value="${response.getStatusLine().getStatusCode()}" var="response_code"/>
                                    <core:set value="${response.getStatusLine().getReasonPhrase()}" var="response_msg"/>
                                    <!-- this is usually empty, pointless -->
                                    <core:if test="${bDebugREST}">
                                      <gel:out>getStatusLine():  ${response.getStatusLine()}</gel:out>
                                    </core:if>
                                    <core:set value="${null}" var="jsonQR"/>
                                    <core:set value="${null}" var="httpInputStream"/>
                                    <core:set value="${response.getEntity()}" var="entity"/>
                                    <core:if test="${entity != null}">
                                      <core:set value="${entity.getContent()}" var="httpInputStream"/>
                                    </core:if>
                                    <core:if test="${response_code == null}">
                                      <!-- There was not even a response code returned. This usually happens when the URL is incorrect. -->
                                      <core:set value="ERROR on Connection: Reponse Code is 0. Check the URL or the firewall. ${v_RRname}(${v_PrjAglSys}): ${RallyHost}" var="logMessage"/>
                                      <core:choose>
                                        <core:when test="${gel_processId == null}">
                                          <gel:out>${logMessage}</gel:out>
                                          <gel:out/>
                                        </core:when>
                                        <core:otherwise>
                                          <gel:log level="WARN">${logMessage}</gel:log>
                                        </core:otherwise>
                                      </core:choose>
                                    </core:if>
                                    <core:if test="${response_code != null}">
                                      <core:if test="${(response_code != 200)}">
                                        <core:set value="ERROR on PATCH. response_code(${response_code}) response_msg: ${response_msg} " var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="WARN">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <core:if test="${httpInputStream == null}">
                                        <core:set value="httpInputStream == NULL, getHeaderField(0): ${response_hdr} response_code(${response_code}) response_msg: ${response_msg}  httpRESTURL: ${httpRESTURL}" var="logMessage"/>
                                        <core:choose>
                                          <core:when test="${gel_processId == null}">
                                            <gel:out>${logMessage}</gel:out>
                                          </core:when>
                                          <core:otherwise>
                                            <gel:log level="WARN">${logMessage}</gel:log>
                                          </core:otherwise>
                                        </core:choose>
                                      </core:if>
                                      <!-- OR -->
                                      <core:if test="${httpInputStream != null}">
                                        <core:new className="java.io.InputStreamReader" var="v_Input">
                                          <core:arg type="java.io.InputStream" value="${httpInputStream}"/>
                                        </core:new>
                                        <core:new className="java.io.BufferedReader" var="v_InputData">
                                          <core:arg type="java.io.InputStreamReader" value="${v_Input}"/>
                                        </core:new>
                                        <core:set value="${v_InputData.readLine()}" var="httpData"/>
                                        <core:if test="${bDebugREST}">
                                          <gel:out>httpData: ${httpData}</gel:out>
                                        </core:if>
                                        <!-- free up some resources -->
                                        <core:set value="${httpInputStream.close()}" var="dummy"/>
                                        <!-- JSON Response -->
                                        <core:new className="org.json.JSONObject" var="jsonResp">
                                          <core:arg type="java.lang.String" value="${httpData}"/>
                                        </core:new>
                                      </core:if>
                                      <!-- (httpInputStream != null) -->
                                    </core:if>
                                    <!-- (response_code != null) -->
                                    <core:if test="${response_code == 200}">
                                      <!-- Successful Update -->
                                      <core:set value="Update of Integration successful (${v_IntId}.${v_IntCode}): ${v_IntName} " var="logMessage"/>
                                    </core:if>
                                    <core:if test="${jsonResp == null}">
                                      <core:if test="${bDebug}">
                                        <gel:out>jsonResp is null</gel:out>
                                      </core:if>
                                    </core:if>
                                  </core:if>
                                  <!-- !(bSkipRESTUpdate) -->
                                </core:if>
                                <!-- (bIntChangesFound) -->
                              </core:if>
                              <!-- (v_IntId != null) -->
                            </core:if>
                            <!-- ((bChkIntDemoSetup) &amp;&amp; (bRunDemoSetup) &amp;&amp; (bResetIntDemoSetup)) || (bSetIntDemoToActive) -->
                          </core:catch>
                          <!-- exvar1 -->
                          <!-- ___ Error Exception processing  ___ -->
                          <core:if test="${not empty exvar1}">
                            <core:set value="EXCEPTION: ${exvar1.getMessage()}" var="logMessage"/>
                            <core:choose>
                              <core:when test="${gel_processId == null}">
                                <gel:out>${logMessage}</gel:out>
                              </core:when>
                              <core:otherwise>
                                <gel:log level="INFO">${logMessage}</gel:log>
                              </core:otherwise>
                            </core:choose>
                            <core:if test="${bDebug}">
                              <gel:out>exvar1.toString() ${exvar1.toString()}</gel:out>
                              <gel:out>exvar1.getName() ${exvar1.getName()}</gel:out>
                              <gel:out>ERROR - Exception: ${exvar1}</gel:out>
                              <gel:out/>
                            </core:if>
                            <core:new className="org.apache.commons.jelly.JellyTagException" var="exTag">
                              <core:arg type="java.lang.Throwable" value="${exvar1}"/>
                            </core:new>
                            <gel:out>ERROR - TAG Exception: ${exTag}</gel:out>
                            <gel:out/>
                          </core:if>
                          <core:invokeStatic className="java.lang.System" method="currentTimeMillis" var="milEnd"/>
                          <core:set value="${(milEnd - milStart)}" var="elapsedTime"/>
                          <core:new className="java.util.Date" var="dteElapse">
                            <core:arg type="java.lang.Long" value="${elapsedTime}"/>
                          </core:new>
                          <core:if test="${bDebugTimings}">
                            <gel:out/>
                          </core:if>
                          <core:set value="Script Elapse: ${sdFmtElapse.format(dteElapse)} sec[${sdFmtElapseNum.format(elapsedTime/1000)}]" var="logMessage"/>
                          <core:choose>
                            <core:when test="${gel_processId == null}">
                              <gel:out>${logMessage}</gel:out>
                            </core:when>
                            <core:otherwise>
                              <gel:log level="INFO">${logMessage}</gel:log>
                            </core:otherwise>
                          </core:choose>
                          <core:if test="${bDebug}">
                            <gel:out/>
                            <gel:out>The End</gel:out>
                            <gel:out/>
                            <gel:out/>
                            <gel:out/>
                          </core:if>
                        </gel:script>
                      </scriptText>
                      <scriptParameter isSecure="false" name="SkipRenameACFeatures"/>
                      <scriptParameter isSecure="false" name="Use_Rally_Project_Scope"/>
                      <scriptParameter isSecure="false" name="Chk_Int_Demo_Setup"/>
                      <scriptParameter isSecure="false" name="Reset_Int_Demo_Setup"/>
                      <scriptParameter isSecure="false" name="Set_Int_Demo_to_Active"/>
                      <scriptParameter isSecure="false" name="DemoDataset" value="VSMforDemos1601"/>
                    </customScript>
                    <Notifications notifyOwner="false">
                      <NotifyWhen stepActionInError="false" stepActionPerformed="false" value="0"/>
                      <Assignees/>
                    </Notifications>
                  </Action>
                </Operations>
                <TransitionRestrictions>
                  <TransitionRestriction>
                    <Join type="BPM_JT_NONE">
                      <Condition sequencNo="1" type="BPM_SCT_PRECONDITION"/>
                    </Join>
                  </TransitionRestriction>
                  <TransitionRestriction>
                    <Split type="BPM_ST_SEQUENCE">
                      <Condition sequencNo="1" type="BPM_SCT_POSTCONDITION">
                        <Transitions>
                          <Transition to="syncIntMap"/>
                        </Transitions>
                      </Condition>
                    </Split>
                  </TransitionRestriction>
                </TransitionRestrictions>
              </Step>
            </Steps>
            <Groups/>
            <OBSAssocs complete="false"/>
          </Process>
        </Processes>
        
      </contentPack>
      <XOGOutput>
        <Object type="contentPack"/>
        <Status state="SUCCESS"/>
        <Statistics failureRecords="0" insertedRecords="0" totalNumberOfRecords="2" updatedRecords="0"/>
        <Records/>
      </XOGOutput>
    </NikuDataBus>