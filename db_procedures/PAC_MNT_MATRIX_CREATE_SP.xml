<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_procedure</Code>
      <Records>
        <Record>
          <code>PAC_MNT_MATRIX_CREATE_SP</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PPM"."PAC_MNT_MATRIX_CREATE_SP" 
(
  in_matrixName     IN VARCHAR2,
  matrixType           VARCHAR2,
  in_matrixLocation IN VARCHAR2,
  in_matrixComments IN VARCHAR2,
  matrixSecurity       VARCHAR2,
  matrixCurrency       VARCHAR2,
  userName             VARCHAR2
)
AS
  matrixName           GLOBALPKG.STRING;
  matrixLocation       GLOBALPKG.STRING;
  matrixComments       VARCHAR2(256);
  StoO_selcnt          INTEGER;
  StoO_error           INTEGER;
  StoO_rowcnt          INTEGER;
  StoO_crowcnt         INTEGER := 0;
  StoO_fetchstatus     INTEGER := 0;
  StoO_errmsg          GLOBALPKG.STRING;
  StoO_sqlstatus       INTEGER;
  matrixKey            NUMBER;
  userId               NUMBER;
BEGIN
	PAC_MNT_MATRIX_CREATE_SP.matrixName := PAC_MNT_MATRIX_CREATE_SP.in_matrixName;
	PAC_MNT_MATRIX_CREATE_SP.matrixLocation := PAC_MNT_MATRIX_CREATE_SP.in_matrixLocation;
	PAC_MNT_MATRIX_CREATE_SP.matrixComments := PAC_MNT_MATRIX_CREATE_SP.in_matrixComments;

  PAC_MNT_MATRIX_CREATE_SP.matrixName :=  RTRIM(LTRIM(NVL(RTRIM(PAC_MNT_MATRIX_CREATE_SP.matrixName), '')));
  PAC_MNT_MATRIX_CREATE_SP.matrixLocation :=  RTRIM(LTRIM(NVL(RTRIM(PAC_MNT_MATRIX_CREATE_SP.matrixLocation), '')));
  PAC_MNT_MATRIX_CREATE_SP.matrixComments :=  RTRIM(LTRIM(NVL(RTRIM(PAC_MNT_MATRIX_CREATE_SP.matrixComments), '')));

  BEGIN
		StoO_rowcnt := 0;
		StoO_selcnt := 0;
		StoO_error  := 0;

      SELECT  CMNUSERS.id
      INTO Pac_Mnt_Matrix_Create_Sp.userId
      FROM SRM_RESOURCES SRMR, CMN_SEC_USERS CMNUSERS
     WHERE SRMR.UNIQUE_NAME = RTRIM(LTRIM(Pac_Mnt_Matrix_Create_Sp.userName))
       AND SRMR.user_id=CMNUSERS.id;
   

		StoO_rowcnt := SQL%ROWCOUNT;
		EXCEPTION
			WHEN TOO_MANY_ROWS THEN
				StoO_rowcnt := 2;
			WHEN NO_DATA_FOUND THEN
				StoO_rowcnt := 0;
				StoO_selcnt := 0;
			WHEN OTHERS THEN
				StoO_rowcnt := 0;
				StoO_selcnt := 0;
				StoO_error := SQLCODE;
				StoO_errmsg := SQLERRM;
	END;

  IF PAC_MNT_MATRIX_CREATE_SP.matrixName IS NULL THEN
    BEGIN
      raise_application_error(-20200, 'Matrix name must be specifyed!');
      RETURN ;
    END;
	END IF;

  IF PAC_MNT_MATRIX_CREATE_SP.matrixType IS NULL THEN
    BEGIN
      raise_application_error(-20201, 'Matrix type must be specifyed!');
      RETURN ;
    END;
	END IF;

  IF PAC_MNT_MATRIX_CREATE_SP.matrixLocation IS NOT NULL THEN
		BEGIN
      BEGIN
        StoO_selcnt := 0;
        StoO_error  := 0;
        StoO_rowcnt := 0;

        SELECT 1 INTO StoO_selcnt
        FROM DUAL
        WHERE not EXISTS (
          SELECT  1
          FROM locations
          WHERE locationid = PAC_MNT_MATRIX_CREATE_SP.matrixLocation );

        StoO_rowcnt := SQL%ROWCOUNT;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
          WHEN OTHERS THEN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
            StoO_error := SQLCODE;
            StoO_errmsg := SQLERRM;
      END;

      IF StoO_selcnt != 0 THEN
        BEGIN
          raise_application_error(-20202, 'Specified location does not exist! Use Browse button to find right location.');
          RETURN;
        END;
      END IF;
    END;
  END IF;

  BEGIN
		BEGIN
      StoO_selcnt := 0;
      StoO_error  := 0;
      StoO_rowcnt := 0;
      SELECT 1 INTO StoO_selcnt
      FROM DUAL
      WHERE  EXISTS (
        SELECT  1
        FROM ppa_Matrix
        WHERE Description = PAC_MNT_MATRIX_CREATE_SP.matrixName );
      StoO_rowcnt := SQL%ROWCOUNT;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
        WHEN OTHERS THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
          StoO_error := SQLCODE;
          StoO_errmsg := SQLERRM;
		END;

    IF StoO_selcnt != 0 THEN
      BEGIN
        raise_application_error(-20203, 'A Matrix with this name already exists!  Matrix names must be unique.');
        RETURN;
      END;
		END IF;
  END;

  SAVEPOINT Transactn;

  BEGIN
    BEGIN
      StoO_error   := 0;
      StoO_rowcnt  := 0;

      INSERT INTO ppa_Matrix (MATRIXKEY, Description, MatrixType, Comments, AccessCode, DEFAULT_CURRENCY_CODE,
      created_date, created_by, last_updated_date, last_updated_by)
        VALUES (S_285_1_PPA_MATRIX.nextval, PAC_MNT_MATRIX_CREATE_SP.matrixName, PAC_MNT_MATRIX_CREATE_SP.matrixType,
          PAC_MNT_MATRIX_CREATE_SP.matrixComments, PAC_MNT_MATRIX_CREATE_SP.matrixSecurity, PAC_MNT_MATRIX_CREATE_SP.matrixCurrency,
          SYSDATE, Pac_Mnt_Matrix_Create_Sp.userId, SYSDATE, Pac_Mnt_Matrix_Create_Sp.userId);

      StoO_rowcnt := SQL%ROWCOUNT;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
        WHEN OTHERS THEN
          StoO_error := SQLCODE;
          StoO_errmsg := SQLERRM;
    END;

    IF StoO_error != 0 THEN
      BEGIN
        ROLLBACK TO SAVEPOINT Transactn;
        raise_application_error(-20205, 'Error Inserting New Matrix');
        RETURN;
      END;
    END IF;
  END;

  SELECT S_285_1_PPA_MATRIX.CURRVAL INTO matrixKey FROM dual;

  IF PAC_MNT_MATRIX_CREATE_SP.matrixLocation IS NOT NULL THEN
    BEGIN
      BEGIN
        StoO_error   := 0;
        StoO_rowcnt  := 0;
        INSERT INTO ppa_LocMatrixAssignments (LocationID, MatrixKey, MatrixType, created_date, created_by, last_updated_date, last_updated_by)
        VALUES (PAC_MNT_MATRIX_CREATE_SP.matrixLocation, PAC_MNT_MATRIX_CREATE_SP.matrixKey,
              PAC_MNT_MATRIX_CREATE_SP.matrixType, SYSDATE, Pac_Mnt_Matrix_Create_Sp.userId, SYSDATE, Pac_Mnt_Matrix_Create_Sp.userId);
        StoO_rowcnt := SQL%ROWCOUNT;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
          WHEN OTHERS THEN
            StoO_error := SQLCODE;
            StoO_errmsg := SQLERRM;
      END;
    END;

    IF StoO_error != 0 THEN
      BEGIN
        ROLLBACK TO SAVEPOINT Transactn;
        raise_application_error(-20211, 'Error Location Matrix  Assignments SQLERRM = ' || SQLERRM);
        RETURN ;
      END;
    END IF;
  END IF;

  IF PAC_MNT_MATRIX_CREATE_SP.matrixSecurity = 1 THEN
    BEGIN
      BEGIN
        StoO_error   := 0;
        StoO_rowcnt  := 0;

        INSERT INTO pac_mnt_matrix_permisions
              (ID, MATRIX_ID, USER_ID, CREATED_DATE, CREATED_BY, LAST_UPDATED_DATE, LAST_UPDATED_BY)
        VALUES (PAC_MNT_MATRIX_PERMISIONS_S1.nextval,PAC_MNT_MATRIX_CREATE_SP.matrixKey, PAC_MNT_MATRIX_CREATE_SP.userId,
            --CURRENT_TIMESTAMP,
            SYSDATE,
            PAC_MNT_MATRIX_CREATE_SP.userId,
            --CURRENT_TIMESTAMP,
            SYSDATE,
            PAC_MNT_MATRIX_CREATE_SP.userId);
        StoO_rowcnt := SQL%ROWCOUNT;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
          WHEN OTHERS THEN
            StoO_error := SQLCODE;
            StoO_errmsg := SQLERRM;
      END;

      IF StoO_error != 0 THEN
        BEGIN
          ROLLBACK TO SAVEPOINT Transactn;
          raise_application_error(-20212, 'Error Inserting New Private Matrix');
          RETURN;
        END;
      END IF;
    END;
  END IF;

  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;

    INSERT INTO ppa_MatrixCheckout( MATRIXKEY,RESOURCE_CODE,STARTED,FINISHED, CREATED_DATE, CREATED_BY, LAST_UPDATED_DATE, LAST_UPDATED_BY)
    SELECT PAC_MNT_MATRIX_CREATE_SP.matrixKey,
            PAC_MNT_MATRIX_CREATE_SP.userName,
            SYSDATE,
            null,
            --CURRENT_TIMESTAMP,
            SYSDATE,
            PAC_MNT_MATRIX_CREATE_SP.userId,
            --CURRENT_TIMESTAMP,
            SYSDATE,
            PAC_MNT_MATRIX_CREATE_SP.userId
      FROM DUAL;
    StoO_rowcnt := SQL%ROWCOUNT;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  IF StoO_error = 0 THEN
    COMMIT WORK;
  ELSE
    BEGIN
      ROLLBACK TO SAVEPOINT Transactn;
      raise_application_error(-20213, 'Error locking New Matrix');
      RETURN;
    END;
  END IF;
END PAC_MNT_MATRIX_CREATE_SP;
 
 
 
 
 </definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>