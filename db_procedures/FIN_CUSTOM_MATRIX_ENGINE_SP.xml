<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_procedure</Code>
      <Records>
        <Record>
          <code>FIN_CUSTOM_MATRIX_ENGINE_SP</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PPM"."FIN_CUSTOM_MATRIX_ENGINE_SP" 
(
  cTask_Id                      IN NUMBER DEFAULT 0,
  cInvestment_Id                IN NUMBER DEFAULT 0,
  cResource_Id                	IN NUMBER DEFAULT 0,
  cLocation_Id                  IN NUMBER DEFAULT 0,
  cRole_Id                      IN NUMBER DEFAULT 0,
  cFrom_Date                    IN VARCHAR2 DEFAULT NULL,
  cTo_Date                      IN VARCHAR2 DEFAULT NULL,
  cThread_ID                    IN NUMBER DEFAULT 0
)
AS
  nActualCost                 NUMBER(32, 6);
  nStartDate                  VARCHAR(20);
  nEndDate                    VARCHAR(20);

BEGIN
-- Here developer of custom matrix engine will need to run a matching/costing algorithm to determine costs for each date range
-- defined in rate matrix (with matching financial input values) which falls within the cFrom_Date and cTo_Date input values

-- Below are fake values just to initialize.
  nStartDate := '01/01/2009';
  nEndDate := '01/31/2009';
  nActualCost := 0;

-- Next developer of custom matrix engine will need to store resulting costs and their date ranges, along with cThread_ID input,
-- in temp table TEMP_FIN_MATRIX_COSTS.  Matrix API will then read results out of that table for processing.  Thread ID is needed
-- to differentiate callers in case of concurrent access of custom matrix engine by multiple callers.
END;
 
 
 </definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>