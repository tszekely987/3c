<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_procedure</Code>
      <Records>
        <Record>
          <code>PAC_MNT_UPDATE_PROJECT_SP</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PPM"."PAC_MNT_UPDATE_PROJECT_SP" (
  ID  NUMBER            DEFAULT 0,
  COMPANY_CODE          PAC_MNT_PROJECTS.COMPANY_CODE%TYPE  DEFAULT '',
  in_projcode           PAC_MNT_PROJECTS.MASTER_PROJECT_CODE%TYPE  DEFAULT '',
  title                 VARCHAR2 DEFAULT '',
  status                VARCHAR2,
  type_                 VARCHAR2,
  manager               VARCHAR2,
  affiliateproject      VARCHAR2,
  targetedstartdate     DATE,
  startdate             DATE,
  targetedcompldate     DATE,
  completedate          DATE,
  CLASS                 VARCHAR2,
  WIPCLASS              VARCHAR2,
  locationid            VARCHAR2,
  departcode            VARCHAR2,
  budget                NUMBER,
  poc                   VARCHAR2,
  BILL_TO_COMPANY_CODE  VARCHAR2,
  batchcycle            VARCHAR2,
  historymode           NUMBER,
  timeincrement         NUMBER,
  COSTPLUS              NUMBER,
  RESOURCE_CODE         VARCHAR2,
  in_projid          IN PAC_MNT_PROJECTS.PROJECT_CODE%TYPE,
  changeorder           VARCHAR2,
  is_changeorder        NUMBER,
  template              NUMBER,
  ex_allow_expenses     PAC_MNT_PROJECTS.ex_allow_expenses%TYPE DEFAULT 0,
  ex_bill_expenses      PAC_MNT_PROJECTS.ex_bill_expenses%TYPE DEFAULT 0,
  billing_currency_code PAC_MNT_PROJECTS.billing_currency_code%TYPE,
  forecast              PAC_MNT_PROJECTS.forecast%TYPE,
  billing_project_code  PAC_MNT_PROJECTS.PROJECT_CODE%TYPE
)
AS
  MASTER_PROJECT_CODE       Globalpkg.STRING;
  PROJECT_CODE              Globalpkg.STRING;
  StoO_selcnt               INTEGER;
  StoO_error                INTEGER;
  StoO_rowcnt               INTEGER;
  StoO_crowcnt              INTEGER := 0;
  StoO_fetchstatus          INTEGER := 0;
  StoO_errmsg               Globalpkg.STRING;
  StoO_sqlstatus            INTEGER;
  L_RESOURCE_CODE           Globalpkg.STRING;
  projrevisionid            NUMBER;
  save_dates_to_project     NUMBER(1,0);
  LANGUAGE_ID               NUMBER;
  msg                       Globalpkg.STRING;
  poc_int                   NUMBER;
  P_REVISION_TYPE           NUMBER;
  budgetlevellabor          PAC_MNT_PROJECTS.budgetlevellabor%TYPE;
  budgetlevelmaterial       PAC_MNT_PROJECTS.budgetlevelmaterial%TYPE;
  budgetlevelequipment      PAC_MNT_PROJECTS.budgetlevelequipment%TYPE;
  budgetratesourcelabor     PAC_MNT_PROJECTS.budgetratesourcelabor%TYPE;
  budgetratesourcematerials PAC_MNT_PROJECTS.budgetratesourcematerials%TYPE;
  budgetratesourceequipment PAC_MNT_PROJECTS.budgetratesourceequipment%TYPE;
  budgetcostsourcelabor     PAC_MNT_PROJECTS.budgetcostsourcelabor%TYPE;
  budgetcostsourcematerials PAC_MNT_PROJECTS.budgetcostsourcematerials%TYPE;
  budgetcostsourceequipment PAC_MNT_PROJECTS.budgetcostsourceequipment%TYPE;
  transratesourcelabor      PAC_MNT_PROJECTS.transratesourcelabor%TYPE;
  transratesourcematerials  PAC_MNT_PROJECTS.transratesourcematerials%TYPE;
  transratesourceequipment  PAC_MNT_PROJECTS.transratesourceequipment%TYPE;
  transratesourcexpenses    PAC_MNT_PROJECTS.transratesourceexpenses%TYPE;
  transcostsourcelabor      PAC_MNT_PROJECTS.transcostsourcelabor%TYPE;
  transcostsourcematerials  PAC_MNT_PROJECTS.transcostsourcematerials%TYPE;
  transcostsourceequipment  PAC_MNT_PROJECTS.transcostsourceequipment%TYPE;
  transcostsourcexpenses    PAC_MNT_PROJECTS.transcostsourceexpenses%TYPE;

  v_billing_project_code	PAC_MNT_PROJECTS.PROJECT_CODE%TYPE ;
  v_billing_project_id		PAC_MNT_PROJECTS.billing_project_id%TYPE ;
  v_InsertedCount			NUMBER;
  v_Status					Globalpkg.STRING;
  v_HasSubProjects 			INTEGER;
  v_IsBillingMaster			INTEGER := 0;
  v_MasterBillingProjectCode 		PAC_MNT_PROJECTS.PROJECT_CODE%TYPE ;
  v_EnforceContractAmount   		INTEGER;
  v_ProjectTitle  			Globalpkg.STRING;


  BEGIN
  /* Called From:
      Procedure         :-
      Trigger           :-
      PMD TransactionId :-
      WMD ActionId      :-
    Modified By   :Nitin
    Modified Date :07/25/01
  */

    Pac_Mnt_Update_Project_Sp.poc_int := poc;
    Pac_Mnt_Update_Project_Sp.MASTER_PROJECT_CODE := Pac_Mnt_Update_Project_Sp.in_projcode;
    Pac_Mnt_Update_Project_Sp.PROJECT_CODE := Pac_Mnt_Update_Project_Sp.in_projid;
    Pac_Mnt_Update_Project_Sp.MASTER_PROJECT_CODE :=  UPPER(Pac_Mnt_Update_Project_Sp.MASTER_PROJECT_CODE);
	Pac_Mnt_Update_Project_Sp.v_billing_project_code := Pac_Mnt_Update_Project_Sp.billing_project_code ;

    BEGIN
      BEGIN
        StoO_selcnt := 0;
        SELECT  1
        INTO  StoO_selcnt
        FROM  DUAL
        WHERE   EXISTS( SELECT  1
            FROM  CLNTSUPP
            WHERE   COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20031, 'COMPANY_CODE is invalid');
            RETURN;
      END;

      IF StoO_selcnt = 0 THEN
        RAISE_APPLICATION_ERROR(-20031, 'COMPANY_CODE is invalid');
        RETURN;
      END IF;


	  BEGIN
        StoO_selcnt := 0;
        SELECT  1
        INTO  StoO_selcnt
        FROM  DUAL
        WHERE   EXISTS( SELECT  1
            FROM  PAC_MNT_PROJECTS
            WHERE   COMPANY_CODE &lt;&gt; Pac_Mnt_Update_Project_Sp.COMPANY_CODE AND
			        PROJECT_CODE = Pac_Mnt_Update_Project_Sp.PROJECT_CODE );
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
      END;

	  /* If StoO_selcnt = 1 then the company code has changed so we must update
         the appropriate tables for the unapproved project */

      IF StoO_selcnt = 1 THEN
        BEGIN
		  UPDATE PAC_MNT_PROJECTS
		    SET COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE
			WHERE PROJECT_CODE = Pac_Mnt_Update_Project_Sp.PROJECT_CODE ;

		  UPDATE PROJCNTRTS
		    SET COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE
			WHERE PROJECT_CODE = Pac_Mnt_Update_Project_Sp.PROJECT_CODE ;

		  UPDATE PROJREVISION
		    SET COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE
			WHERE PROJECT_CODE = Pac_Mnt_Update_Project_Sp.PROJECT_CODE ;

		  UPDATE PROJSTAFF
		    SET COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE
			WHERE PROJECT_CODE = Pac_Mnt_Update_Project_Sp.PROJECT_CODE ;

          StoO_rowcnt := SQL%ROWCOUNT;

	  	  EXCEPTION
	  	    WHEN NO_DATA_FOUND THEN
	  	      StoO_rowcnt := 0;
			  StoO_selcnt := 0;
	  	    WHEN OTHERS THEN
	    	  StoO_error := SQLCODE;
	    	  StoO_errmsg := SQLERRM;
        END;
      END IF;

      IF is_changeorder = 1 THEN
        BEGIN
          StoO_selcnt := 0;
          SELECT  1
          INTO  StoO_selcnt
          FROM  DUAL
          WHERE   EXISTS( SELECT  1
            FROM  PAC_MNT_PROJECTS
            WHERE   COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE
            AND   MASTER_PROJECT_CODE = Pac_Mnt_Update_Project_Sp.MASTER_PROJECT_CODE);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20032, 'PROJECT_CODE code is invalid');
              RETURN;
        END;
        IF StoO_selcnt = 0 THEN
          RAISE_APPLICATION_ERROR(-20032, 'PROJECT_CODE code is invalid');
          RETURN;
        END IF;
      END IF;

      IF affiliateproject IS NOT NULL THEN
        BEGIN
          StoO_selcnt := 0;
          SELECT  1
          INTO  StoO_selcnt
          FROM  DUAL
          WHERE   EXISTS( SELECT  1
            FROM  PAC_MNT_PROJECTS
            WHERE   COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE
            AND   MASTER_PROJECT_CODE = Pac_Mnt_Update_Project_Sp.affiliateproject);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20041, 'Affiliate PROJECT_CODE code is invalid');
              RETURN;
        END;

        IF StoO_selcnt = 0 THEN
          RAISE_APPLICATION_ERROR(-20041, 'Affiliate PROJECT_CODE code is invalid');
          RETURN;
        END IF;
      END IF;
      IF manager IS NOT NULL THEN
        BEGIN
          StoO_selcnt := 0;
          SELECT  1
          INTO  StoO_selcnt
          FROM  DUAL
          WHERE   EXISTS( SELECT  1
            FROM  PAC_MNT_RESOURCES
            WHERE   RESOURCE_CODE = manager);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20034, 'PROJECT_CODE manager is invalid');
              RETURN;
        END;
        IF StoO_selcnt = 0 THEN
          RAISE_APPLICATION_ERROR(-20034, 'PROJECT_CODE manager is invalid');
          RETURN;
        END IF;
      END IF;

 IF v_billing_project_code IS NOT NULL THEN
	    BEGIN
	      IF v_billing_project_code = Pac_Mnt_Update_Project_Sp.PROJECT_CODE THEN
		  	BEGIN
	      	  SELECT ID
	            INTO v_Billing_Project_ID
	            FROM PAC_MNT_PROJECTS
	            WHERE PROJECT_CODE = v_billing_project_code ;

          	  EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  RAISE_APPLICATION_ERROR(-20982, 'Billing Project is invalid');
                  RETURN;
                WHEN OTHERS THEN
                  RAISE_APPLICATION_ERROR(-20982, 'Billing Project is invalid');
                  RETURN;
			END;
		  ELSE
		    BEGIN
			  --If the billing project is same as the current project, we don't need to check for this validatiom
			  --because it is the same as leaving it blank.
			  IF v_billing_project_code != in_projcode THEN
			  BEGIN
		          SELECT ID
		            INTO v_Billing_Project_ID
		            FROM PAC_MNT_PROJECTS
		            WHERE PROJECT_CODE = v_billing_project_code AND
			   		 	TYPE_ = Pac_Mnt_Update_Project_Sp.TYPE_ AND
						BILLING_CURRENCY_CODE = Pac_Mnt_Update_Project_Sp.BILLING_CURRENCY_CODE AND
						COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE AND
						STATUS != 'C' AND
			    			APPROVED = 1 ;
	          	  EXCEPTION
	                WHEN NO_DATA_FOUND THEN
	                  RAISE_APPLICATION_ERROR(-20990, 'Billing Project is invalid. Select a Billing Project with the same Type, Billing Currency and Company Code as the current project.');
	                  RETURN;
	                WHEN OTHERS THEN
	                  RAISE_APPLICATION_ERROR(-20990, 'Billing Project is invalid. Select a Billing Project with the same Type, Billing Currency and Company Code as the current project.');
	                  RETURN;
			  END;
			  END IF;
			END;
		  END IF;
	    END;
	  ELSE
	    v_Billing_Project_ID := NULL ;
	  END IF;

      IF CLASS IS NOT NULL THEN
        BEGIN
          StoO_selcnt := 0;
          SELECT  1
          INTO  StoO_selcnt
          FROM  DUAL
          WHERE   EXISTS( SELECT  1
            FROM  PROJCLASS
            WHERE   PROJCLASS = CLASS);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20035, 'PROJECT_CODE class is invalid');
              RETURN;
        END;
        IF StoO_selcnt = 0 THEN
          RAISE_APPLICATION_ERROR(-20035, 'PROJECT_CODE class is invalid');
          RETURN;
        END IF;
      END IF;
      IF WIPCLASS IS NOT NULL THEN
        BEGIN
          StoO_selcnt := 0;
          SELECT  1
          INTO  StoO_selcnt
          FROM  DUAL
          WHERE   EXISTS( SELECT  1
            FROM  WIPCLASS
            WHERE   WIPCLASS = Pac_Mnt_Update_Project_Sp.WIPCLASS);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20036, 'WIP class is invalid');
              RETURN;
        END;
        IF StoO_selcnt = 0 THEN
          RAISE_APPLICATION_ERROR(-20036, 'WIP class is invalid');
          RETURN;
        END IF;
      END IF;
      IF locationid IS NOT NULL THEN
        BEGIN
          StoO_selcnt := 0;
          SELECT  1
          INTO  StoO_selcnt
          FROM  DUAL
          WHERE   EXISTS( SELECT  1
            FROM  LOCATIONS
            WHERE   locationid = Pac_Mnt_Update_Project_Sp.locationid);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20037, 'Location is invalid');
              RETURN;
        END;
        IF StoO_selcnt = 0 THEN
          RAISE_APPLICATION_ERROR(-20037, 'Location is invalid');
          RETURN;
        END IF;
      END IF;
      IF departcode IS NOT NULL THEN
        BEGIN
          StoO_selcnt := 0;
          SELECT  1
          INTO  StoO_selcnt
          FROM  DUAL
          WHERE   EXISTS( SELECT  1
            FROM  LOCATIONDEPT
            WHERE   locationid = Pac_Mnt_Update_Project_Sp.locationid
            AND departcode = Pac_Mnt_Update_Project_Sp.departcode);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20038, 'Department is invalid  for this location.');
              RETURN;
        END;
        IF StoO_selcnt = 0 THEN
          RAISE_APPLICATION_ERROR(-20038, 'Department is invalid  for this location.');
          RETURN;
        END IF;
      END IF;

      IF BILL_TO_COMPANY_CODE IS NOT NULL THEN
        BEGIN
          StoO_selcnt := 0;
          SELECT  1
          INTO  StoO_selcnt
          FROM  DUAL
          WHERE   EXISTS( SELECT  1
            FROM  int_BillTo
            WHERE   ClientID = Pac_Mnt_Update_Project_Sp.COMPANY_CODE
            AND BillToID = Pac_Mnt_Update_Project_Sp.BILL_TO_COMPANY_CODE);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20039, 'Bill To code is invalid for this COMPANY_CODE.');
              RETURN;
        END;
        IF StoO_selcnt = 0 THEN
          RAISE_APPLICATION_ERROR(-20039, 'Bill To code is invalid for this COMPANY_CODE.');
          RETURN;
        END IF;
      END IF;
      IF batchcycle IS NOT NULL THEN
        BEGIN
          StoO_selcnt := 0;
          SELECT  1
          INTO  StoO_selcnt
          FROM  DUAL
          WHERE   EXISTS( SELECT  1
            FROM  BATCHSETTINGS
            WHERE   batchcycle = Pac_Mnt_Update_Project_Sp.batchcycle);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20040, 'Batch cycle is invalid.');
              RETURN;
        END;
        IF StoO_selcnt = 0 THEN
          RAISE_APPLICATION_ERROR(-20040, 'Batch cycle is invalid.');
          RETURN;
        END IF;
      END IF;
    END;
    IF  Pac_Mnt_Update_Project_Sp.type_  IN('S', 'I') THEN
      BEGIN
        Pac_Mnt_Update_Project_Sp.poc_int :=  0;
      END;
    ELSE
      BEGIN
        BEGIN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
          StoO_error  := 0;

          SELECT   LANGUAGE_ID
          INTO Pac_Mnt_Update_Project_Sp.LANGUAGE_ID FROM CMN_SEC_USERS;
          StoO_rowcnt := SQL%ROWCOUNT;
          EXCEPTION
            WHEN TOO_MANY_ROWS THEN
              StoO_rowcnt := 2;
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20042, 'Language of the user is not supported');
              RETURN;
        END;
      END;
    END IF;

    IF  Pac_Mnt_Update_Project_Sp.is_changeorder = 0 THEN
      Pac_Mnt_Update_Project_Sp.PROJECT_CODE :=  Pac_Mnt_Update_Project_Sp.MASTER_PROJECT_CODE;
    END IF;

    BEGIN
      StoO_rowcnt := 0;
      StoO_selcnt := 0;
      StoO_error  := 0;

--      SELECT   initials
      SELECT Pac_Mnt_Update_Project_Sp.RESOURCE_CODE
        INTO Pac_Mnt_Update_Project_Sp.L_RESOURCE_CODE
        FROM DUAL;
--        FROM pac_mnt_resources
--        WHERE RESOURCE_CODE = PAC_MNT_UPDATE_PROJECT_SP.L_RESOURCE_CODE;
      StoO_rowcnt := SQL%ROWCOUNT;
      EXCEPTION
        WHEN TOO_MANY_ROWS THEN
          NULL;
        WHEN NO_DATA_FOUND THEN
          NULL;
    END;

    BEGIN
      BEGIN
        -- If the targeted dates are changed from the last revision, update the revision or create a new one if approved
        StoO_selcnt := 0;
        StoO_error  := 0;
        StoO_rowcnt := 0;
        SELECT 1 INTO StoO_selcnt
        FROM DUAL
        WHERE NOT EXISTS (  SELECT  1
              FROM  PROJREVISION
              WHERE   COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE
              AND   PROJECT_CODE = Pac_Mnt_Update_Project_Sp.PROJECT_CODE
              AND   currenttargetedstartdate = Pac_Mnt_Update_Project_Sp.targetedstartdate
              AND   currenttargetedcompldate = Pac_Mnt_Update_Project_Sp.targetedcompldate
              AND   projrevisionid  IN (  SELECT  MAX(projrevisionid)
                      FROM  PROJREVISION
                      WHERE   COMPANY_CODE = Pac_Mnt_Update_Project_Sp.COMPANY_CODE
                      AND   PROJECT_CODE = Pac_Mnt_Update_Project_Sp.PROJECT_CODE
                      AND   datesrevision = 1 ) );
        StoO_rowcnt := SQL%ROWCOUNT;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            StoO_selcnt := 0;
      END;

      IF StoO_selcnt != 0 THEN
      BEGIN
        P_REVISION_TYPE := 2;

        BEGIN
          Pac_Mnt_Get_Curr_Revision_Sp(  COMPANY_CODE =&gt; Pac_Mnt_Update_Project_Sp.COMPANY_CODE,
                  PROJECT_CODE =&gt; Pac_Mnt_Update_Project_Sp.PROJECT_CODE,
                  revision_type =&gt; P_REVISION_TYPE,
                  RESOURCE_CODE =&gt; Pac_Mnt_Update_Project_Sp.L_RESOURCE_CODE,
                  in_targetedstartdate =&gt; Pac_Mnt_Update_Project_Sp.targetedstartdate,
                  in_targetedcompldate =&gt; Pac_Mnt_Update_Project_Sp.targetedcompldate,
                  in_userinitials =&gt; Pac_Mnt_Update_Project_Sp.L_RESOURCE_CODE,
                  increment_revision_if_approved =&gt; 1,
                  projrevisionid =&gt; Pac_Mnt_Update_Project_Sp.projrevisionid);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              NULL;
        END;

        IF  Pac_Mnt_Update_Project_Sp.projrevisionid = -1 THEN
          RETURN ;
        END IF;

        Pac_Mnt_Update_Project_Sp.save_dates_to_project :=  0;
      END;
      ELSE
        BEGIN
          Pac_Mnt_Update_Project_Sp.save_dates_to_project :=  1;
        END;
      END IF;
    END;
    

	BEGIN
      StoO_selcnt := 0;
      SELECT  1
        INTO  StoO_selcnt
        FROM  DUAL
        WHERE   EXISTS( SELECT  1
            			  FROM  PAC_MNT_PROJECTS
            			  WHERE company_code = Pac_Mnt_Update_Project_Sp.COMPANY_CODE AND
						  		project_code =  Pac_Mnt_Update_Project_Sp.PROJECT_CODE AND
								NVL( BILLING_PROJECT_ID, ID ) = ID);
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              NULL ;
    END;

	IF StoO_selcnt &gt; 0 AND Pac_Mnt_Update_Project_Sp.status = 'C' THEN
	  /* If project is a billing master we need to check if it has billing sub projects
	     that are open. If any subprojects are open it cannot be closed  */
      BEGIN
		BEGIN
		  DELETE FROM TEMP_BIL_SUBPROJECTS ;
		END;

		BEGIN
		  StoO_error   := 0;
		  StoO_rowcnt  := 0;
		  INSERT INTO TEMP_BIL_SUBPROJECTS (  COMPANY_CODE, PROJECT_CODE, PROJECT_ID, MASTER_PROJECT_ID,
			    							  BILLING_PROJECT_ID, BILL_AMOUNT, PROJECT_STATUS  )
			SELECT Pac_Mnt_Update_Project_Sp.COMPANY_CODE, Pac_Mnt_Update_Project_Sp.PROJECT_CODE, Pac_Mnt_Update_Project_Sp.ID, Pac_Mnt_Update_Project_Sp.ID,
				   Pac_Mnt_Update_Project_Sp.v_Billing_Project_ID, 0, Pac_Mnt_Update_Project_Sp.status
		 	  FROM DUAL ;

  	  	  StoO_rowcnt := SQL%ROWCOUNT;
		  v_InsertedCount := StoO_rowcnt ;
	  	  EXCEPTION
	  	    WHEN NO_DATA_FOUND THEN
	  		  StoO_rowcnt := 0;
			  StoO_selcnt := 0;
			  v_InsertedCount := 0;
	  		WHEN OTHERS THEN
	    	  StoO_error := SQLCODE;
	    	  StoO_errmsg := SQLERRM;
  		END;

		BEGIN
    	  Pac_Bil_Get_Subprojects_Sp ( 0, v_Status, v_HasSubProjects ) ;
  		END;

		BEGIN
		  SELECT 1 INTO StoO_selcnt
		    FROM DUAL
		    WHERE  EXISTS ( SELECT  1
		  		 		      FROM TEMP_BIL_SUBPROJECTS
							  WHERE PROJECT_STATUS != 'C' AND
							  		PROJECT_ID != Pac_Mnt_Update_Project_Sp.ID  );
		  StoO_rowcnt := SQL%ROWCOUNT;
		  EXCEPTION
		  WHEN NO_DATA_FOUND THEN
		    StoO_rowcnt := 0;
			StoO_selcnt := 0;
		END;

		IF StoO_selcnt != 0 THEN
		  BEGIN
	      DELETE FROM TEMP_BIL_SUBPROJECTS ;
		  RAISE_APPLICATION_ERROR(-20987, 'Unable TO CLOSE PROJECT_CODE because project has billing subprojects which are not closed.');
		  RETURN ;
		  END;
		END IF;

	    DELETE FROM TEMP_BIL_SUBPROJECTS ;
	  END ;
	END IF;

    /* If Billing Sub Project and we are opening then the master billing project must be opened */
	IF v_IsBillingMaster != 1 AND Pac_Mnt_Update_Project_Sp.status = 'O' THEN
	  BEGIN
	    Pac_Bil_Get_Billing_Project_Sp( Pac_Mnt_Update_Project_Sp.v_Billing_Project_ID, v_MasterBillingProjectCode, v_EnforceContractAmount, v_ProjectTitle ) ;
	  END;

	  BEGIN
	     StoO_selcnt:=0;
		  /* Check only if the billing project is different than the current project */
		  IF Pac_Mnt_Update_Project_Sp.PROJECT_CODE != Pac_Mnt_Update_Project_Sp.v_MasterBillingProjectCode THEN
	  	  BEGIN
		  	   SELECT 1 INTO StoO_selcnt
		  	   FROM DUAL
		  	   WHERE  EXISTS ( SELECT  1
		   		            FROM PAC_MNT_PROJECTS P
							  WHERE P.PROJECT_CODE = Pac_Mnt_Update_Project_Sp.v_MasterBillingProjectCode AND
							  		P.Status = 'C' );
			   StoO_rowcnt := SQL%ROWCOUNT;
			   EXCEPTION
			   WHEN NO_DATA_FOUND THEN
				 StoO_rowcnt := 0;
				 StoO_selcnt := 0;
		   END;
		   END IF;
	  END;

	  IF StoO_selcnt != 0 THEN
		BEGIN
		  RAISE_APPLICATION_ERROR(-20989, 'Unable TO OPEN PROJECT_CODE because master billing project is currently closed.');
		  RETURN ;
	    END;
	  END IF;
	END IF;

	/* Must validate the Billing Project entered. Check for circular references. */
	IF Pac_Mnt_Update_Project_Sp.v_Billing_Project_ID IS NOT NULL AND Pac_Mnt_Update_Project_Sp.v_Billing_Project_ID != Pac_Mnt_Update_Project_Sp.ID THEN
	  BEGIN
	    DELETE FROM TEMP_BIL_SUBPROJECTS ;
	  END;

	  /* Insert current project first. Then we'll get all the subprojects. */
	  BEGIN
		StoO_error   := 0;
		StoO_rowcnt  := 0;
		INSERT INTO TEMP_BIL_SUBPROJECTS (  COMPANY_CODE, PROJECT_CODE, PROJECT_ID, MASTER_PROJECT_ID,
		    							    BILLING_PROJECT_ID, BILL_AMOUNT, PROJECT_STATUS  )
		  SELECT Pac_Mnt_Update_Project_Sp.COMPANY_CODE, Pac_Mnt_Update_Project_Sp.PROJECT_CODE, Pac_Mnt_Update_Project_Sp.ID, Pac_Mnt_Update_Project_Sp.ID,
				 NULL, 0, Pac_Mnt_Update_Project_Sp.status
		 	FROM DUAL ;

  	  	StoO_rowcnt := SQL%ROWCOUNT;

	  	EXCEPTION
	  	  WHEN NO_DATA_FOUND THEN
	  	    StoO_rowcnt := 0;
			StoO_selcnt := 0;
	  	  WHEN OTHERS THEN
	    	StoO_error := SQLCODE;
	    	StoO_errmsg := SQLERRM;
  	  END;

	  BEGIN
    	    Pac_Bil_Get_Subprojects_Sp ( 0, v_Status, v_HasSubProjects ) ;
  	  END;

	  BEGIN
		SELECT 1 INTO StoO_selcnt
		  FROM DUAL
		  WHERE  EXISTS ( SELECT  1
			 		        FROM TEMP_BIL_SUBPROJECTS
							WHERE Pac_Mnt_Update_Project_Sp.v_Billing_Project_ID = PROJECT_ID );
		StoO_rowcnt := SQL%ROWCOUNT;
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
		  StoO_rowcnt := 0;
		  StoO_selcnt := 0;
	  END;

	  IF StoO_selcnt != 0 THEN
		BEGIN
	    DELETE FROM TEMP_BIL_SUBPROJECTS ;
		RAISE_APPLICATION_ERROR(-20991, 'Billing Project is invalid. Selected Billing Project is a descendant of the current project.');
		RETURN ;
		END;
	  END IF;

	  BEGIN
	    DELETE FROM TEMP_BIL_SUBPROJECTS ;
	  END;
	END IF;

    BEGIN
      StoO_error   := 0;
      StoO_rowcnt  := 0;

      UPDATE PAC_MNT_PROJECTS
      SET
      title = Pac_Mnt_Update_Project_Sp.title,
      status = Pac_Mnt_Update_Project_Sp.status,
      type_ = Pac_Mnt_Update_Project_Sp.type_,
      manager = Pac_Mnt_Update_Project_Sp.manager,
      affiliateproject = Pac_Mnt_Update_Project_Sp.affiliateproject,
      targetedstartdate = DECODE(Pac_Mnt_Update_Project_Sp.save_dates_to_project,
      1, Pac_Mnt_Update_Project_Sp.targetedstartdate , targetedstartdate),
      startdate = Pac_Mnt_Update_Project_Sp.startdate,
      targetedcompldate = DECODE(Pac_Mnt_Update_Project_Sp.save_dates_to_project,
        1, Pac_Mnt_Update_Project_Sp.targetedcompldate , targetedcompldate),
      completedate = Pac_Mnt_Update_Project_Sp.completedate,
      CLASS = Pac_Mnt_Update_Project_Sp.CLASS,
      WIPCLASS = Pac_Mnt_Update_Project_Sp.WIPCLASS,
      locationid = Pac_Mnt_Update_Project_Sp.locationid,
      departcode = Pac_Mnt_Update_Project_Sp.departcode,
      budget = Pac_Mnt_Update_Project_Sp.budget,
      poc_method = NVL(Pac_Mnt_Update_Project_Sp.poc_int, 0),
      BILL_TO_COMPANY_CODE = Pac_Mnt_Update_Project_Sp.BILL_TO_COMPANY_CODE,
      billcycle = Pac_Mnt_Update_Project_Sp.batchcycle,
      historymode = Pac_Mnt_Update_Project_Sp.historymode,
      COSTPLUS = Pac_Mnt_Update_Project_Sp.COSTPLUS,
      timeincrement = Pac_Mnt_Update_Project_Sp.timeincrement,
      RESOURCE_CODE = Pac_Mnt_Update_Project_Sp.L_RESOURCE_CODE,
      template_only = Pac_Mnt_Update_Project_Sp.template,
      ex_allow_expenses = Pac_Mnt_Update_Project_Sp.ex_allow_expenses,
      ex_bill_expenses = Pac_Mnt_Update_Project_Sp.ex_bill_expenses,
      billing_currency_code =  Pac_Mnt_Update_Project_Sp.billing_currency_code,
      forecast = 1,
	  billing_project_id = Pac_Mnt_Update_Project_Sp.v_billing_project_id
    WHERE Pac_Mnt_Update_Project_Sp.ID = ID;
  END;

END Pac_Mnt_Update_Project_Sp;
 
 
 
 
 </definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>