<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_procedure</Code>
      <Records>
        <Record>
          <code>REV_PRC_ADJWIPMODXFERXACTION</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PPM"."REV_PRC_ADJWIPMODXFERXACTION" (
  iTransaction             NUMBER,
  in_cProjId            IN VARCHAR2,
  in_cCharge_Code       IN VARCHAR2,
  in_cResource_Code     IN VARCHAR2,
  in_cCostKeyLevel6     IN VARCHAR2,
  in_cCostKeyLevel7     IN VARCHAR2,
  in_cInput_Type        IN VARCHAR2,
  bOverrideDate            NUMBER,
  dXferDate                DATE,
  in_bChargeable        IN NUMBER DEFAULT NULL,
  in_nUnitQty           IN NUMBER DEFAULT NULL,
  in_nRate              IN NUMBER DEFAULT NULL,
  in_cNotes             IN VARCHAR2 DEFAULT NULL,
  in_cTransType         IN VARCHAR2 DEFAULT NULL,
  in_cTransClass        IN VARCHAR2 DEFAULT NULL,
  in_cMatlVendorCode    IN VARCHAR2 DEFAULT NULL,
  in_cMatlPoNumber      IN VARCHAR2 DEFAULT NULL,
  in_nActualCost        IN NUMBER DEFAULT NULL,
  cAdjType                 VARCHAR2,
  cUserId                  VARCHAR2 DEFAULT NULL,
  in_bCalcNewRate       IN NUMBER DEFAULT NULL,
  dWIPTransDate         IN OUT DATE,
  cWIPClntCode          IN OUT VARCHAR2,
  cWIPProjId            IN OUT VARCHAR2,
  cWIPCharge_Code       IN OUT VARCHAR2,
  cWIPResource_Code     IN OUT VARCHAR2,
  cWIPInputType         IN OUT VARCHAR2,
  cWIPTransactionClass  IN OUT VARCHAR2,
  iTransferStatus       IN OUT NUMBER,
  iAdjustXactionNo      IN OUT NUMBER,
  iAdjustNumber         IN OUT NUMBER,
  cErrorMessage         IN OUT VARCHAR2,
  cLanguageCode                VARCHAR2 DEFAULT 'en',
  in_rateCurrency           IN CMN_CURRENCIES.CURRENCY_CODE%TYPE DEFAULT NULL,
  in_ActualCostCurrency     IN CMN_CURRENCIES.CURRENCY_CODE%TYPE DEFAULT NULL,
  in_roleCode               IN VARCHAR2 DEFAULT NULL,
  in_ChangeRole             IN NUMBER DEFAULT 0,
  in_TaskID                 IN NUMBER DEFAULT NULL,
  in_UserLov1               IN VARCHAR2 DEFAULT NULL,
  in_UserLov2               IN VARCHAR2 DEFAULT NULL,
  in_ExpenseType           IN VARCHAR2 DEFAULT NULL
)
AS
  cClntCode                    Globalpkg.STRING;
  cProjId                      Globalpkg.STRING;
  cCharge_Code                 Globalpkg.STRING;
  cResource_Code               Globalpkg.STRING;
  cCostKeyLevel6               Globalpkg.STRING;
  cCostKeyLevel7               Globalpkg.STRING;
  cInput_Type                  Globalpkg.STRING;
  bChargeable                  NUMBER(1,0);
  nUnitQty                     NUMBER(32,6);
  nRate                        NUMBER(32,6);
  cNotes                       Globalpkg.STRING;
  cTransType                   Globalpkg.STRING;
  cMatlVendorCode              Globalpkg.STRING;
  cMatlPoNumber                Globalpkg.STRING;
  nActualCost                  NUMBER(32,6);
  bCalcNewRate                 NUMBER(1,0);
  StoO_selcnt                  INTEGER;
  StoO_error                   INTEGER;
  StoO_rowcnt                  INTEGER;
  StoO_crowcnt                 INTEGER := 0;
  StoO_fetchstatus             INTEGER := 0;
  StoO_errmsg                  Globalpkg.STRING;
  StoO_sqlstatus               INTEGER;
  iSourceModule                NUMBER(5,0);
  cLastUpdateUserId            Globalpkg.STRING;
  cMatlVoucherNo               Globalpkg.STRING;
  documentType                 Globalpkg.STRING;
  apinfoId                     PPA_WIP.PPA_WIPAPINFO_ID%TYPE;
  cEntryUser                   Globalpkg.STRING;
  cMatlItemNumber              Globalpkg.STRING;
  dXactionDate                 DATE;
  iErrorFlag                   NUMBER;
  cBatchId                     Globalpkg.STRING;
  nMinuteCalc                  NUMBER(32,6);
  iWIPBatchNo                  NUMBER;
  nStdCost                     NUMBER(32,6);
  cMultiplier                  Globalpkg.STRING;
  nFactorAmount                NUMBER(32,6);
  nBurdenAmount                NUMBER(32,6);
  tax                          NUMBER(32,6);
  nOverheadAmount              NUMBER(32,6);
  nAmount                      NUMBER(32,6);
  nTotalAmount                 NUMBER(32,6);
  cCostruleCode                Globalpkg.STRING;
  nTotalCost                   NUMBER(32,6);
  nPrice                       NUMBER(32,6);
  iEnfProjStartDate            NUMBER(3,0);
  dProjectStartDate            DATE;
  iChangeNo                    NUMBER;
  cEmplyHomeLocation           Globalpkg.STRING;
  cEmplyHomeDepartment         Globalpkg.STRING;
  nOriginalRate                NUMBER(32,6);
  tempVar1                     NUMBER :=1;
  nTaskID                      NUMBER;
  cRoleCode                    VARCHAR2(32);
  exr_rate                     Cmn_Exchangerate_Pkg.exchangeRateTAB;
  exr_AmountRemaining          Cmn_Exchangerate_Pkg.exchangeRateTAB;
  exr_actualcost               Cmn_Exchangerate_Pkg.exchangeRateTAB;
  exr_stdcost                  Cmn_Exchangerate_Pkg.exchangeRateTAB;
  currencyType                 VARCHAR2(30);
  fromCurrency                 VARCHAR2(30);
  toCurrency                   VARCHAR2(30);
  convertedAmount              NUMBER;
  temp_cost_Exchange_Rate      NUMBER;
  temp_rate_Exchange_Rate      NUMBER;
  temp_rate_exchange_ID        NUMBER;
  temp_cost_exchange_ID        NUMBER;
  exchangeRateType             VARCHAR2(30);
  projectId                    PAC_MNT_PROJECTS.id%TYPE;
  LABOR_EXCHANGE_RATE_TYPE     PAC_MNT_PROJECTS.LABOR_EXCHANGE_RATE_TYPE%TYPE;
  EXPENSE_EXCHANGE_RATE_TYPE   PAC_MNT_PROJECTS.EXPENSE_EXCHANGE_RATE_TYPE%TYPE;
  MATERIALS_EXCHANGE_RATE_TYPE PAC_MNT_PROJECTS.MATERIALS_EXCHANGE_RATE_TYPE%TYPE ;
  EQUIPMENT_EXCHANGE_RATE_TYPE PAC_MNT_PROJECTS.EQUIPMENT_EXCHANGE_RATE_TYPE%TYPE;
  temp_Amount                  PPA_WIP_VALUES.amount%TYPE ;
  tempCurrencyCode             PPA_WIP_VALUES.currency_code%TYPE;
  temp_BillRate                PPA_WIP_VALUES.billrate%TYPE;
  temp_Price                   PPA_WIP_VALUES.price%TYPE;
  temp_FactorAmount            PPA_WIP_VALUES.factoramount%TYPE;
  temp_Burden                  PPA_WIP_VALUES.burden%TYPE;
  temp_Overhead                PPA_WIP_VALUES.overhead%TYPE;
  temp_TotalAmount             PPA_WIP_VALUES.totalamount%TYPE;
  temp_ActualCost              PPA_WIP_VALUES.actualcost%TYPE;
  temp_StdCost                 PPA_WIP_VALUES.stdcost%TYPE;
  temp_TotalCost               PPA_WIP_VALUES.totalcost%TYPE;
  temp_EmplyActualCost         PPA_WIP_VALUES.actualcost%TYPE;
  temp_EmplyStdcost            PPA_WIP_VALUES.stdcost%TYPE;
  temp_AmountRemaining         PPA_WIP_VALUES.AMOUNTREMAINING%TYPE;
  temp_rate_currency_code      PPA_WIP_VALUES.rate_currency_code%TYPE;
  temp_cost_currency_code      PPA_WIP_VALUES.cost_currency_code%TYPE;
  temp_natural_BillRate        PPA_WIP_VALUES.natural_billrate%TYPE;
  temp_natural_stdcost         PPA_WIP_VALUES.natural_stdcost%TYPE;
  temp_natural_actualcost      PPA_WIP_VALUES.natural_actualcost%TYPE;
  temp_stdcost_currency_code   PPA_WIP_VALUES.STDCOST_CURRENCY_CODE%TYPE;
  bUseCostPlus                 NUMBER;
  cTransClass                  PPA_WIP.TRANSCLASS%TYPE;
  cUserLov1                    PPA_WIP.USER_LOV1%TYPE;
  cUserLov2                    PPA_WIP.USER_LOV2%TYPE;
  cExpenseType                 PPA_WIP.EXPENSE_TYPE%TYPE;
  v_isRole     NUMBER;

BEGIN
  Rev_Prc_Adjwipmodxferxaction.cProjId := Rev_Prc_Adjwipmodxferxaction.in_cProjId;
  Rev_Prc_Adjwipmodxferxaction.cCharge_Code := Rev_Prc_Adjwipmodxferxaction.in_cCharge_Code;
  Rev_Prc_Adjwipmodxferxaction.cResource_Code := Rev_Prc_Adjwipmodxferxaction.in_cResource_Code;
  Rev_Prc_Adjwipmodxferxaction.cCostKeyLevel6 := Rev_Prc_Adjwipmodxferxaction.in_cCostKeyLevel6;
  Rev_Prc_Adjwipmodxferxaction.cCostKeyLevel7 := Rev_Prc_Adjwipmodxferxaction.in_cCostKeyLevel7;
  Rev_Prc_Adjwipmodxferxaction.cInput_Type := Rev_Prc_Adjwipmodxferxaction.in_cInput_Type;
  Rev_Prc_Adjwipmodxferxaction.bChargeable := Rev_Prc_Adjwipmodxferxaction.in_bChargeable;
  Rev_Prc_Adjwipmodxferxaction.nUnitQty := Rev_Prc_Adjwipmodxferxaction.in_nUnitQty;
  Rev_Prc_Adjwipmodxferxaction.nRate := Rev_Prc_Adjwipmodxferxaction.in_nRate;
  Rev_Prc_Adjwipmodxferxaction.cNotes := Rev_Prc_Adjwipmodxferxaction.in_cNotes;
  Rev_Prc_Adjwipmodxferxaction.cTransType := Rev_Prc_Adjwipmodxferxaction.in_cTransType;
  Rev_Prc_Adjwipmodxferxaction.cMatlVendorCode := Rev_Prc_Adjwipmodxferxaction.in_cMatlVendorCode;
  Rev_Prc_Adjwipmodxferxaction.cMatlPoNumber := Rev_Prc_Adjwipmodxferxaction.in_cMatlPoNumber;
  Rev_Prc_Adjwipmodxferxaction.nActualCost := Rev_Prc_Adjwipmodxferxaction.in_nActualCost;
  Rev_Prc_Adjwipmodxferxaction.bCalcNewRate := Rev_Prc_Adjwipmodxferxaction.in_bCalcNewRate;

/* Check if the Role code is present in the Transaction*/
    BEGIN
     SELECT prj.prisrole
     INTO v_isRole
     FROM srm_resources s,
       prj_resources prj
     WHERE s.ID       = prj.prid
     AND s.unique_name=(select w.RESOURCE_CODE FROM ppa_WIP w WHERE W.TransNo = Rev_Prc_Adjwipmodxferxaction.iTransaction);

     IF v_isRole = 1 THEN
           RAISE_APPLICATION_ERROR( -20901, 'Role is not allowed in Resource ID.' );
     END IF;
     END;

  BEGIN
    StoO_rowcnt := 0;
    StoO_selcnt := 0;
    StoO_error  := 0;

    SELECT NVL(enforceprojectstartdate, 0)
      INTO Rev_Prc_Adjwipmodxferxaction.iEnfProjStartDate
      FROM NAMEOPTIONS;

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        StoO_rowcnt := 2;
      WHEN NO_DATA_FOUND THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
      WHEN OTHERS THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  Rev_Prc_Adjwipmodxferxaction.nOriginalRate :=  NVL(Rev_Prc_Adjwipmodxferxaction.nRate, 0);
  Rev_Prc_Adjwipmodxferxaction.bCalcNewRate :=  NVL(Rev_Prc_Adjwipmodxferxaction.bCalcNewRate, 0);

  BEGIN
    StoO_rowcnt := 0;
    StoO_selcnt := 0;
    StoO_error  := 0;

    SELECT NVL(Rev_Prc_Adjwipmodxferxaction.dXferDate,W.TransDate),
           W.COMPANY_CODE,
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cProjId),W.PROJECT_CODE),
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cCharge_Code),W.CHARGE_CODE),
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cResource_Code),W.RESOURCE_CODE),
           NVL(in_TaskID, W.TASK_ID),
           DECODE(in_ChangeRole, 0, W.ROLE_CODE, in_roleCode),
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cInput_Type), W.Input_Type),
           NVL(Rev_Prc_Adjwipmodxferxaction.in_cTransClass, W.TRANSCLASS),
           Rev_Prc_Adjwipmodxferxaction.in_userLov1,
           Rev_Prc_Adjwipmodxferxaction.in_userLov2,
           Rev_Prc_Adjwipmodxferxaction.in_expenseType
      INTO Rev_Prc_Adjwipmodxferxaction.dWIPTransDate,
           Rev_Prc_Adjwipmodxferxaction.cWIPClntCode,
           Rev_Prc_Adjwipmodxferxaction.cWIPProjId,
           Rev_Prc_Adjwipmodxferxaction.cWIPCharge_Code,
           Rev_Prc_Adjwipmodxferxaction.cWIPResource_Code,
           Rev_Prc_Adjwipmodxferxaction.nTaskID,
           Rev_Prc_Adjwipmodxferxaction.cRoleCode,
           Rev_Prc_Adjwipmodxferxaction.cWIPInputType,
           Rev_Prc_Adjwipmodxferxaction.cWIPTransactionClass,
           Rev_Prc_Adjwipmodxferxaction.cUserLov1,
           Rev_Prc_Adjwipmodxferxaction.cUserLov2,
           Rev_Prc_Adjwipmodxferxaction.cExpenseType
      FROM PPA_WIP W
     WHERE W.TransNo = Rev_Prc_Adjwipmodxferxaction.iTransaction;  
   
   
    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        StoO_rowcnt := 2;
      WHEN NO_DATA_FOUND THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
      WHEN OTHERS THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  BEGIN
    StoO_rowcnt := 0;
    StoO_selcnt := 0;
    StoO_error  := 0;

    SELECT W.TransDate,
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cProjId), W.PROJECT_CODE),
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cCharge_Code), W.CHARGE_CODE),  NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cResource_Code), W.RESOURCE_CODE),
           Rev_Prc_Adjwipmodxferxaction.cCostKeyLevel6,
           Rev_Prc_Adjwipmodxferxaction.cCostKeyLevel7,  NVL(Rev_Prc_Adjwipmodxferxaction.nUnitQty, W.Quantity),
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cNotes), W.Notes),
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cUserId), W.LASTUPDTDBY_RESOURCE_CODE),  W.ENTRY_RESOURCE_CODE,
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cMatlVendorCode), A.VENDOR_CODE),  A.VoucherNo,
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cMatlPoNumber), A.PONo),  A.DOCUMENT_TYPE, W.SOURCEMODULE,
           NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cTransType), W.TRANSTYPE),  NVL(Rev_Prc_Adjwipmodxferxaction.nRate, WV.BillRate),  WV.StdCost,
           NVL(Rev_Prc_Adjwipmodxferxaction.nActualCost, WV.ActualCost),  WV.FactorAmount,  WV.Burden,  WV.Overhead,  WV.Amount,  WV.TotalAmount,
           W.CostRuleCode,  WV.TotalCost,  WV.Price,  0,  W.ExternalTransNo,  W.EmplyHomeLocation,
           W.EmplyHomeDepart,  NVL(RTRIM(Rev_Prc_Adjwipmodxferxaction.cInput_Type), W.Input_Type),
           W.ExternalBatchID,  W.BatchNo,  NVL(Rev_Prc_Adjwipmodxferxaction.bChargeable, W.Chargeable),
           NVL(Rev_Prc_Adjwipmodxferxaction.in_cTransClass, W.TRANSCLASS), W.PPA_WIPAPINFO_ID
      INTO Rev_Prc_Adjwipmodxferxaction.dXactionDate,
           Rev_Prc_Adjwipmodxferxaction.cProjId,
           Rev_Prc_Adjwipmodxferxaction.cCharge_Code, Rev_Prc_Adjwipmodxferxaction.cResource_Code,
           Rev_Prc_Adjwipmodxferxaction.cCostKeyLevel6,
           Rev_Prc_Adjwipmodxferxaction.cCostKeyLevel7, Rev_Prc_Adjwipmodxferxaction.nUnitQty,
           Rev_Prc_Adjwipmodxferxaction.cNotes,
           Rev_Prc_Adjwipmodxferxaction.cLastUpdateUserId, Rev_Prc_Adjwipmodxferxaction.cEntryUser,
           Rev_Prc_Adjwipmodxferxaction.cMatlVendorCode, Rev_Prc_Adjwipmodxferxaction.cMatlVoucherNo,
           Rev_Prc_Adjwipmodxferxaction.cMatlPoNumber, documentType, Rev_Prc_Adjwipmodxferxaction.iSourceModule,
           Rev_Prc_Adjwipmodxferxaction.cTransType, Rev_Prc_Adjwipmodxferxaction.nRate, Rev_Prc_Adjwipmodxferxaction.nStdCost,
           Rev_Prc_Adjwipmodxferxaction.nActualCost, Rev_Prc_Adjwipmodxferxaction.nFactorAmount, Rev_Prc_Adjwipmodxferxaction.nBurdenAmount, Rev_Prc_Adjwipmodxferxaction.nOverheadAmount, Rev_Prc_Adjwipmodxferxaction.nAmount, Rev_Prc_Adjwipmodxferxaction.nTotalAmount,
           Rev_Prc_Adjwipmodxferxaction.cCostruleCode, Rev_Prc_Adjwipmodxferxaction.nTotalCost, Rev_Prc_Adjwipmodxferxaction.nPrice, Rev_Prc_Adjwipmodxferxaction.tax, Rev_Prc_Adjwipmodxferxaction.iChangeNo, Rev_Prc_Adjwipmodxferxaction.cEmplyHomeLocation,
           Rev_Prc_Adjwipmodxferxaction.cEmplyHomeDepartment, Rev_Prc_Adjwipmodxferxaction.cInput_Type,
           Rev_Prc_Adjwipmodxferxaction.cBatchId, Rev_Prc_Adjwipmodxferxaction.iWIPBatchNo, Rev_Prc_Adjwipmodxferxaction.bChargeable,
           Rev_Prc_Adjwipmodxferxaction.cTransClass, apinfoId
      FROM PPA_WIP W, PPA_WIPAPINFO A, PPA_WIP_VALUES WV
     WHERE W.TransNo = Rev_Prc_Adjwipmodxferxaction.iTransaction
       AND A.ID (+) = W.PPA_WIPAPINFO_ID
       AND WV.TRANSNO = W.TRANSNO
       AND WV.CURRENCY_TYPE = 'NATURAL';

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        StoO_rowcnt := 2;
      WHEN NO_DATA_FOUND THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
      WHEN OTHERS THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

/* Original transno in ate_trans */
  IF StoO_rowcnt = 0 THEN
    BEGIN
      IF Rev_Prc_Adjwipmodxferxaction.cAdjType = 'T' THEN
        Rev_Prc_Adjwipmodxferxaction.iTransferStatus := 0;
        Rev_Prc_Adjwipmodxferxaction.iAdjustXactionNo := 0;
        Rev_Prc_Adjwipmodxferxaction.iAdjustNumber := 0;
        Rev_Prc_Adjwipmodxferxaction.cErrorMessage := '-40';
      ELSE
        RAISE_APPLICATION_ERROR(-20313, 'Data NOT FOUND ON PPA_WIP / PPA_WIPAPINFO TABLE' || StoO_error );
      END IF;

      RETURN;
    END;
  END IF;

  BEGIN
    StoO_rowcnt := 0;
    StoO_selcnt := 0;
    StoO_error  := 0;

    SELECT COMPANY_CODE
      INTO Rev_Prc_Adjwipmodxferxaction.cClntCode
      FROM PAC_MNT_PROJECTS
     WHERE PROJECT_CODE = Rev_Prc_Adjwipmodxferxaction.cProjId;

    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
        StoO_rowcnt := 2;
      WHEN NO_DATA_FOUND THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
      WHEN OTHERS THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  IF Rev_Prc_Adjwipmodxferxaction.cAdjType = 'T' THEN
    Rev_Prc_Adjwipmodxferxaction.dXactionDate := Rev_Prc_Adjwipmodxferxaction.dWIPTransDate;
  ELSE
    IF Rev_Prc_Adjwipmodxferxaction.bOverrideDate = 1 THEN
      Rev_Prc_Adjwipmodxferxaction.dXactionDate := Rev_Prc_Adjwipmodxferxaction.dXferDate;
    END IF;
  END IF;

  IF Rev_Prc_Adjwipmodxferxaction.iEnfProjStartDate = 1 THEN
    BEGIN
      BEGIN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error  := 0;

        SELECT startdate
          INTO Rev_Prc_Adjwipmodxferxaction.dProjectStartDate
          FROM PAC_MNT_PROJECTS
          WHERE COMPANY_CODE = Rev_Prc_Adjwipmodxferxaction.cClntCode
            AND PROJECT_CODE = Rev_Prc_Adjwipmodxferxaction.cProjId;

        StoO_rowcnt := SQL%ROWCOUNT;
        EXCEPTION
          WHEN TOO_MANY_ROWS THEN
            StoO_rowcnt := 2;
          WHEN NO_DATA_FOUND THEN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
          WHEN OTHERS THEN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
            StoO_error := SQLCODE;
            StoO_errmsg := SQLERRM;
      END;

      IF TRUNC(Rev_Prc_Adjwipmodxferxaction.dXactionDate - (Rev_Prc_Adjwipmodxferxaction.dProjectStartDate)) &lt; 0 THEN
        BEGIN
          IF Rev_Prc_Adjwipmodxferxaction.cAdjType = 'T' THEN
            Rev_Prc_Adjwipmodxferxaction.iTransferStatus := 0;
            Rev_Prc_Adjwipmodxferxaction.iAdjustXactionNo := 0;
            Rev_Prc_Adjwipmodxferxaction.iAdjustNumber := 0;
            Rev_Prc_Adjwipmodxferxaction.cErrorMessage := '-41';
          ELSE
            RAISE_APPLICATION_ERROR(-20314, 'TRANSACTION DATE IS BEFORE PROJECT_CODE START DATE' || StoO_error );
          END IF;

          RETURN;
        END;
      END IF;
    END;
  END IF;

  BEGIN
  
      if ( ( cAdjType = 'M'  and bCalcNewRate = 0 ) and ( ( Rev_Prc_Adjwipmodxferxaction.in_nRate is null ) 
    or ( Rev_Prc_Adjwipmodxferxaction.in_nActualCost is null ) ) ) then
    begin
      raise_application_error( -20242, 'PPA_GETRATE =&gt; Rate Not Found ' );
    end;
    end if;
    
  
    Rev_Prc_Ppaxactionentry(
      Rev_Prc_Adjwipmodxferxaction.cClntCode,
      Rev_Prc_Adjwipmodxferxaction.cProjId,
      Rev_Prc_Adjwipmodxferxaction.cCharge_Code,
      Rev_Prc_Adjwipmodxferxaction.cResource_Code,
      Rev_Prc_Adjwipmodxferxaction.cCostKeyLevel6,
      Rev_Prc_Adjwipmodxferxaction.cCostKeyLevel7,
      Rev_Prc_Adjwipmodxferxaction.cInput_Type,
      Rev_Prc_Adjwipmodxferxaction.iSourceModule,
      ' ',
      ' ',
      Rev_Prc_Adjwipmodxferxaction.dXactionDate,
      NULL,
      Rev_Prc_Adjwipmodxferxaction.nUnitQty,
      Rev_Prc_Adjwipmodxferxaction.cLastUpdateUserId,
      Rev_Prc_Adjwipmodxferxaction.cNotes,
      Rev_Prc_Adjwipmodxferxaction.cMatlVendorCode,
      Rev_Prc_Adjwipmodxferxaction.cMatlVoucherNo,
      Rev_Prc_Adjwipmodxferxaction.cMatlPoNumber,
      Rev_Prc_Adjwipmodxferxaction.cMatlItemNumber,
      documentType,
      'WA',
      Rev_Prc_Adjwipmodxferxaction.cTransClass,
      bCalcNewRate,
      Rev_Prc_Adjwipmodxferxaction.nActualCost,
      Rev_Prc_Adjwipmodxferxaction.nRate,
      Rev_Prc_Adjwipmodxferxaction.iAdjustXactionNo,
      Rev_Prc_Adjwipmodxferxaction.iErrorFlag,
      NULL,
      NULL,
      NULL,
      Rev_Prc_Adjwipmodxferxaction.cEntryUser,
      Rev_Prc_Adjwipmodxferxaction.cAdjType,
      Rev_Prc_Adjwipmodxferxaction.cLanguageCode,
      Rev_Prc_Adjwipmodxferxaction.in_rateCurrency,
      Rev_Prc_Adjwipmodxferxaction.in_ActualCostCurrency,
      Rev_Prc_Adjwipmodxferxaction.iTransaction,
      Rev_Prc_Adjwipmodxferxaction.nTaskID,
      Rev_Prc_Adjwipmodxferxaction.cRoleCode,
      Rev_Prc_Adjwipmodxferxaction.cUserLov1,
      Rev_Prc_Adjwipmodxferxaction.cUserLov2,
      Rev_Prc_Adjwipmodxferxaction.cExpenseType,
      apinfoId
    );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
        ROLLBACK;
        RAISE_APPLICATION_ERROR( SQLCODE, SQLERRM );
  END;

  IF (iErrorFlag = -4) THEN
    iErrorFlag := 0;
  END IF;

  IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag != 0 THEN
    BEGIN
      IF Rev_Prc_Adjwipmodxferxaction.cAdjType = 'T' THEN
        Rev_Prc_Adjwipmodxferxaction.iTransferStatus := Rev_Prc_Adjwipmodxferxaction.iErrorFlag;
        Rev_Prc_Adjwipmodxferxaction.iAdjustNumber := 0;
        Rev_Prc_Adjwipmodxferxaction.cErrorMessage := Rev_Prc_Adjwipmodxferxaction.iErrorFlag;
      ELSE
        BEGIN
          IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -1 THEN
            RAISE_APPLICATION_ERROR(-20315, 'CHARGE CODE/INPUT TYPE data NOT FOUND IN PRCHARGECODE/PRTYPECODE' );
          ELSE
            IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -2 THEN
              RAISE_APPLICATION_ERROR(-20316, 'Data NOT FOUND IN RESOURCE_CODE TABLE FOR RESOURCE_CODE' );
            ELSE
              IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -3 THEN
                RAISE_APPLICATION_ERROR(-20317, 'PROJECT_CODE OR PROJECT_CODE Changeorder NOT FOUND ON pac_mnt_projects TABLE FOR COMPANY_CODE/PROJECT_CODE combination' );
              ELSE
                IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -6 THEN
                  RAISE_APPLICATION_ERROR(-20319, 'Charge code rate NOT FOUND FOR charge code locationid, departcode, inputtype combination' );
                ELSE
                  IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -5 THEN
                    RAISE_APPLICATION_ERROR(-20320, 'COMPANY_CODE rate NOT FOUND ON CLNTSUPP TABLE FOR COMPANY_CODE');
                  ELSE
                    IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -7 THEN
                      RAISE_APPLICATION_ERROR(-20321, 'RESOURCE_CODE rate NOT FOUND ON EMPLYBILLRATE TABLE FOR RESOURCE_CODE');
                    ELSE
                      IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -8 THEN
                        RAISE_APPLICATION_ERROR(-20322, 'INSERT failed ON transactioncontrol TABLE');
                      ELSE
                        IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -9 THEN
                          RAISE_APPLICATION_ERROR(-20323, 'TRANSTYPE NOT FOUND ON COSTCODE TABLE FOR CHARGE CODE passsed TO proc');
                        ELSE
                          IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -10 THEN
                            RAISE_APPLICATION_ERROR(-20324, 'Error INSERTING INTO entrycyclecontrol TABLE');
                          ELSE
                            IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -11 THEN
                              RAISE_APPLICATION_ERROR(-20325, 'UDK rate NOT FOUND ON UDK TABLE');
                            ELSE
                              IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -13 THEN
                RAISE_APPLICATION_ERROR(-20327, 'Originating TRANSACTION NOT IN WIP');
                ELSE
                                IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -14 THEN
                  RAISE_APPLICATION_ERROR(-20328, 'Originating TRANSACTION IS being billed');
                ELSE
                                  IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -15 THEN
                  RAISE_APPLICATION_ERROR(-20329, 'TRANSACTION DATE IS BEFORE RESOURCE_CODE hire DATE OR AFTER RESOURCE_CODE separation DATE');
                  ELSE
                                IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -20 THEN
                  RAISE_APPLICATION_ERROR(-20330, 'COMPANY_CODE cost NOT FOUND');
                    ELSE
                                      IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -22 THEN
                                        RAISE_APPLICATION_ERROR(-20331, 'CHARGE CODE cost NOT FOUND');
                                      ELSE
                                        IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -23 THEN
                                          RAISE_APPLICATION_ERROR(-20332, 'RESOURCE_CODE cost NOT FOUND');
                                        ELSE
                                          IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -25 THEN
                                            RAISE_APPLICATION_ERROR(-20333, 'UDK cost NOT FOUND');
                                          ELSE
                                            IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -26 THEN
                                              RAISE_APPLICATION_ERROR(-20334, 'Inactive COSTCLASS FOUND');
                                            ELSE
                                              IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -27 THEN
                                                RAISE_APPLICATION_ERROR(-20335, 'Inactive CHARGECODE FOUND');
                                              ELSE
                                                IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -28 THEN
                                                  RAISE_APPLICATION_ERROR(-20336, 'Error calling pattern match');
                                                ELSE
                                                  IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -29 THEN
                                                    RAISE_APPLICATION_ERROR(-20337, 'Matrix rate NOT FOUND');
                                                  ELSE
                                                    IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -30 THEN
                                                      RAISE_APPLICATION_ERROR(-20338, 'COMPANY_CODE, PROJECT_CODE, CHARGE CODE OR RESOURCE_CODE invalid FOR transactionno selected');
                                                    ELSE
                                                      IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -31 THEN
                                                        RAISE_APPLICATION_ERROR(-20339, 'Debit Memo amount exceeds original supplier invoice amount');
                                                      ELSE
                                                        IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -32 THEN
                                                          RAISE_APPLICATION_ERROR(-20340, 'INSERT failed ON the APDETAILS TABLE');
                                                        ELSE
                                                          IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -33 THEN
                                                            RAISE_APPLICATION_ERROR(-20341, 'INSERT failed ON the APDETAILSACCTS TABLE');
                                                          ELSE
                                                            IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -34 THEN
                                                              RAISE_APPLICATION_ERROR(-20342, 'DELETE failed ON the APTRANS TABLE');
                                                            ELSE
                                                              IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -44 THEN
                                                                RAISE_APPLICATION_ERROR(-20345, 'Update failed on PPA_TRANSWIPADJUST table');
                                                              ELSE
                                                                IF Rev_Prc_Adjwipmodxferxaction.iErrorFlag = -46 THEN
                                                                  RAISE_APPLICATION_ERROR(-20347, 'Insert failed on PPA_TRANSWIPADJUST table');
                                                                END IF;
                                                              END IF;
                                                            END IF;
                                                          END IF;
                                                        END IF;
                                                      END IF;
                                                    END IF;
                                                  END IF;
                                                END IF;
                                              END IF;
                                            END IF;
                                          END IF;
                                        END IF;
                                      END IF;
                                    END IF;
                                  END IF;
                                END IF;
                              END IF;
                            END IF;
                          END IF;
                        END IF;
                      END IF;
                    END IF;
                  END IF;
                END IF;
              END IF;
            END IF;
          END IF;
        END;
      END IF;
      ROLLBACK;
      RETURN;
    END;
  END IF;

SAVEPOINT tran1;

  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
  
  select PPA_TRANSWIPADJ_ADJGRPNBR_S1.NEXTVAL into Rev_Prc_Adjwipmodxferxaction.iAdjustNumber from dual; 

    UPDATE PPA_TRANSWIPADJUST
       SET AdjustGroupNo = Rev_Prc_Adjwipmodxferxaction.iAdjustNumber,
           ExternalBatchID = Rev_Prc_Adjwipmodxferxaction.cBatchId,
           BatchNo = Rev_Prc_Adjwipmodxferxaction.iWIPBatchNo,
           Chargeable = Rev_Prc_Adjwipmodxferxaction.bChargeable,
           ExternalTransNo = Rev_Prc_Adjwipmodxferxaction.iChangeNo,
           EmplyHomeLocation = Rev_Prc_Adjwipmodxferxaction.cEmplyHomeLocation,
           EmplyHomeDepart = Rev_Prc_Adjwipmodxferxaction.cEmplyHomeDepartment,
           WorkInt = 0
     WHERE TransNo = Rev_Prc_Adjwipmodxferxaction.iAdjustXactionNo;

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  IF StoO_error != 0 THEN
    BEGIN
      ROLLBACK TO SAVEPOINT tran1;

      IF Rev_Prc_Adjwipmodxferxaction.cAdjType = 'T' THEN
        Rev_Prc_Adjwipmodxferxaction.iTransferStatus :=  0;
        Rev_Prc_Adjwipmodxferxaction.cErrorMessage := '-44';
      ELSE
        RAISE_APPLICATION_ERROR(-20345, 'UPDATE failed ON PPA_TRANSWIPADJUST TABLE' || StoO_error );
      END IF;

      RETURN;
    END;
  END IF;

  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;

    UPDATE PPA_WIP
       SET Status = 4
     WHERE TransNo = Rev_Prc_Adjwipmodxferxaction.iTransaction;

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  IF StoO_error != 0 THEN
    BEGIN
      ROLLBACK TO SAVEPOINT tran1;

      IF Rev_Prc_Adjwipmodxferxaction.cAdjType = 'T' THEN
        Rev_Prc_Adjwipmodxferxaction.iTransferStatus :=  0;
        Rev_Prc_Adjwipmodxferxaction.cErrorMessage := '-45';
      ELSE
        RAISE_APPLICATION_ERROR(-20346, 'UPDATE failed ON PPA_WIP TABLE' || StoO_error );
      END IF;

      RETURN;
    END;
  END IF;

  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;

    INSERT INTO PPA_TRANSWIPADJUST (TRANSNO, ApplyTo, SOURCEMODULE, TRANSTYPE, BatchNo, ENTRY_RESOURCE_CODE,
           EntryDate, LASTUPDTDBY_RESOURCE_CODE, LastUpdateDate, ExternalBatchID, ExternalTransNo,
           LocationID, DepartCode, ENTITY, TransDate, COMPANY_CODE, PROJECT_CODE, CHARGE_CODE, INPUT_TYPE,
           RESOURCE_CODE, Quantity, CostRuleCode,
           BurdenCode, OverheadCode, Chargeable, Status, Notes, InvoiceNo,
           EmplyHomeLocation, EmplyHomeDepart, ProjectType,
           ClientClass, ProjectClass, TRANSCLASS, RESOURCE_CLASS, WIPCLASS, WorkInt,
           WorkBuf, GLPosted, GLPeriod, AdjustGroupNo, TransDescription, Del, AdjType, VENDOR_CODE,
           VoucherNo, PONo, TASK_ID, ROLE_CODE, INCURRED_BY, DOCUMENT_TYPE, APINFO_ID, USER_LOV1, USER_LOV2, EXPENSE_TYPE,COST_TYPE)
    SELECT S_116_1_PPA_TRANSWIPADJUST.NEXTVAL, Rev_Prc_Adjwipmodxferxaction.iTransaction "ApplyTo", W.SOURCEMODULE,
           'A', W.BatchNo, Rev_Prc_Adjwipmodxferxaction.cLastUpdateUserId,
           SYSDATE, Rev_Prc_Adjwipmodxferxaction.cLastUpdateUserId, SYSDATE,
           W.ExternalBatchID, W.ExternalTransNo, W.LocationID, W.DepartCode,
           W.ENTITY, W.TransDate, W.COMPANY_CODE, W.PROJECT_CODE, W.CHARGE_CODE, W.Input_type,
           W.RESOURCE_CODE, W.Quantity, W.CostRuleCode, W.BurdenCode,
           W.OverheadCode, W.Chargeable, 0, W.Notes, W.InvoiceNo,
           W.EmplyHomeLocation, W.EmplyHomeDepart,
           W.ProjectType, W.ClientClass, W.ProjectClass, W.TRANSCLASS "TransClass",
           W.RESOURCE_CLASS, W.WIPCLASS,
           W.WorkInt,
           W.WorkBuf, W.GLPosted, W.GLPeriod, Rev_Prc_Adjwipmodxferxaction.iAdjustNumber "AdjustGroupNo",
           'R' "TransDescription", 0 "Del", Rev_Prc_Adjwipmodxferxaction.cAdjType "AdjType",
           A.VENDOR_CODE, A.VoucherNo, A.PONo, w.TASK_ID, w.ROLE_CODE, A.INCURRED_BY, A.DOCUMENT_TYPE, 
       W.PPA_WIPAPINFO_ID, W.USER_LOV1, W.USER_LOV2, W.EXPENSE_TYPE,W.COST_TYPE
      FROM PPA_WIP w, PPA_WIPAPINFO a
     WHERE W.TransNo = Rev_Prc_Adjwipmodxferxaction.iTransaction
       AND W.PPA_WIPAPINFO_ID = A.id (+);

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  IF StoO_error != 0 THEN
    BEGIN
      ROLLBACK TO SAVEPOINT tran1;
        IF Rev_Prc_Adjwipmodxferxaction.cAdjType = 'T' THEN
          Rev_Prc_Adjwipmodxferxaction.iTransferStatus :=  0;
          Rev_Prc_Adjwipmodxferxaction.cErrorMessage := '-46';
        ELSE
          RAISE_APPLICATION_ERROR(-20347, 'INSERT failed ON PPA_TRANSWIPADJUST TABLE' || StoO_error );
        END IF;

        RETURN;
    END;
  END IF;


/* veeru - start */
  BEGIN
        INSERT INTO PPA_TRANSWIPADJUST_VALUES (
               ID,
               TRANSNO,
               CURRENCY_TYPE,
               CURRENCY_CODE,
               RATE_EXCHANGE_ID,
               RATE_EXCHANGE_RATE,
               RATE_CURRENCY_CODE,
               STDCOST_CURRENCY_CODE,
               NATURAL_BILLRATE,
               BillRate,
               amount,
               COST_EXCHANGE_ID,
               COST_EXCHANGE_RATE,
               COST_CURRENCY_CODE,
               NATURAL_ACTUALCOST,
               NATURAL_STDCOST,
               ActualCost,
               StdCost,
               totalCost,
               Price,
               FactorAmount,
               Burden,
               overhead,
               TotalAmount,
               EmplyActualCost,
               EmplyStdcost,
               AmountRemaining )
        SELECT PPA_TRANSWIPADJUST_VALUES_S1.NEXTVAL,
               S_116_1_PPA_TRANSWIPADJUST.CURRVAL,
               wv.CURRENCY_TYPE,
               wv.CURRENCY_CODE,
               wv.RATE_EXCHANGE_ID,
               wv.RATE_EXCHANGE_RATE,
               wv.RATE_CURRENCY_CODE,
               wv.STDCOST_CURRENCY_CODE,
               wv.NATURAL_BILLRATE,
               wv.BillRate,
               wv.amount,
               wv.COST_EXCHANGE_ID,
               wv.COST_EXCHANGE_RATE,
               wv.COST_CURRENCY_CODE,
               wv.NATURAL_ACTUALCOST,
               wv.NATURAL_STDCOST,
               wv.ActualCost,
               wv.StdCost,
               wv.totalCost,
               wv.Price,
               wv.FactorAmount,
               wv.Burden,
               wv.overhead,
               wv.TotalAmount,
               wv.EmplyActualCost,
               wv.EmplyStdcost,
               wv.AmountRemaining
          FROM PPA_WIP w, PPA_WIP_VALUES wv
         WHERE w.TransNo = Rev_Prc_Adjwipmodxferxaction.iTransaction
           AND wv.TRANSNO = w.TRANSNO;
        EXCEPTION
          WHEN OTHERS THEN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
            StoO_error := SQLCODE;
            StoO_errmsg := SQLERRM;
            ROLLBACK TO SAVEPOINT tran1;
            RAISE_APPLICATION_ERROR(-20347,'Insert failed on PPA_TRANSWIPADJUST_VALUES table');
  END;

  IF StoO_error = 0 THEN
    BEGIN
      COMMIT WORK;

      IF Rev_Prc_Adjwipmodxferxaction.cAdjType = 'T' THEN
        Rev_Prc_Adjwipmodxferxaction.iTransferStatus :=  1;
        Rev_Prc_Adjwipmodxferxaction.cErrorMessage := '-47';
      END IF;
    END;
  ELSE
    BEGIN
      ROLLBACK TO SAVEPOINT tran1;

      IF Rev_Prc_Adjwipmodxferxaction.cAdjType = 'T' THEN
        Rev_Prc_Adjwipmodxferxaction.iTransferStatus :=  0;
        Rev_Prc_Adjwipmodxferxaction.cErrorMessage := '-48';
      ELSE
        RAISE_APPLICATION_ERROR(-20350, 'Failed TO MODIFY Transactions' || StoO_error);
      END IF;
    END;
  END IF;
END Rev_Prc_Adjwipmodxferxaction;</definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>