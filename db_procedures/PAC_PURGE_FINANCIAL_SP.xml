<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_procedure</Code>
      <Records>
        <Record>
          <code>PAC_PURGE_FINANCIAL_SP</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PPM"."PAC_PURGE_FINANCIAL_SP" (
  do_commit     NUMBER  
)
AS
  TEMP_FATAL_ERROR	VARCHAR2(4000);
  TEMP_PROJECT_STATUS VARCHAR2(2);
  TRANSACTIONS_PURGED NUMBER;
  TEMP_TRANS_COUNT NUMBER;
  PROJECT_STATUS_ERROR 	EXCEPTION;
  
   
 CURSOR CURSOR_PROJECT_REC IS
      SELECT PROJECT_CODE
    FROM PAC_PURGE_FINANCIAL_LIST
	  WHERE STATUS_CODE != 'S' OR STATUS_CODE IS NULL;
	  

BEGIN
 --insert the parameters to the project list if not exist in the list
 INSERT INTO PAC_PURGE_FINANCIAL_LIST(PROJECT_CODE,CREATED_DATE,CREATED_BY,LAST_UPDATED_DATE,LAST_UPDATED_BY)
       SELECT   P.PROJECT_CODE, SYSDATE,1,SYSDATE,1
        FROM   	CMN_ATTRIBUTES A,
		        CMN_ATTRIBUTE_VALUES AV,
				CMN_ATTRIBUTE_VALUE_SETS AVS, 
                CMN_BUSINESS_OBJECTS BO, 
				CMN_SCH_JOB_DEFINITIONS D,
				PAC_MNT_PROJECTS P
		WHERE   D.ID = 50340
		  AND 	BO.PK_ID = D.ID
		  AND	BO.TABLE_NAME = 'CMN_SCH_JOB_DEFINITIONS'
		  AND	BO.ID = AVS.BUSINESS_OBJECT_ID
		  AND   AVS.BUSINESS_OBJECT_INSTANCE_ID = 99
		  AND 	AVS.ID = AV.ATTRIBUTE_SET_ID
		  AND   AV.ATTRIBUTE_ID=A.ID
		  AND   A.COLUMN_NAME ='param_project_code'
		  AND   DBMS_LOB.COMPARE(AV.ATTRIBUTE_VALUE, TO_CLOB(TO_CHAR(P.ID))) = 0
		  AND   P.PROJECT_CODE NOT IN (SELECT PROJECT_CODE 
				                         FROM PAC_PURGE_FINANCIAL_LIST);
  IF do_commit = 1 THEN
    COMMIT;
  END IF;
 
  
  FOR CURSOR_PROJECT_DATA IN CURSOR_PROJECT_REC
  LOOP
  BEGIN
     BEGIN
	     SELECT STATUS INTO TEMP_PROJECT_STATUS
		   FROM PAC_MNT_PROJECTS
		  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);   	  
     EXCEPTION
	 	 WHEN NO_DATA_FOUND THEN
		 	TEMP_FATAL_ERROR := 'NF';
			RAISE PROJECT_STATUS_ERROR;
		 WHEN OTHERS THEN
		    TEMP_FATAL_ERROR := SUBSTR('Failed - ' || SQLCODE || ' - ' || SQLERRM, 0,3999);
			RAISE PROJECT_STATUS_ERROR;       	  
	 END;	     
	 /** Now, delete all the transactions for each project if the project is closed
	     or mark the project as "Failed" if the project is not closed.**/
	 
	 IF TEMP_PROJECT_STATUS != 'C' THEN
	   BEGIN
	   		UPDATE PAC_PURGE_FINANCIAL_LIST
			   SET STATUS_CODE = 'F',
			       STATUS = 'NC',
				   NUMBER_OF_TRANS_PURGED = 0,
				   LAST_UPDATED_DATE = SYSDATE
			 WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
	            IF do_commit = 1 THEN
		      COMMIT;
		    END IF;
	   END;
	 ELSE -- i.e. if TEMP_PROJECT_STATUS = 'C'
	   BEGIN -- Begin TEMP_PROJECT_STATUS = 'C'
	         TRANSACTIONS_PURGED := 0;
			 
			 --Get a count of Transaction Entry  records
			 SELECT COUNT(*) INTO TEMP_TRANS_COUNT 
			   FROM PPA_TRANSCONTROL 
			  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			  TRANSACTIONS_PURGED :=  TRANSACTIONS_PURGED + TEMP_TRANS_COUNT;
			 --Delete Transaction Entry records
			 DELETE FROM PPA_TRANSCONTROLAPINFO
			       WHERE ID IN (SELECT PPA_TRANSCONTROLAPINFO_ID FROM PPA_TRANSCONTROL
					             WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM PPA_TRANSCONTROL_VALUES
			       WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_TRANSCONTROL
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 
			 DELETE FROM PPA_TRANSCONTROL WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 
			 
			 --Get a count of Interface Entry  records
			 SELECT COUNT(*) INTO TEMP_TRANS_COUNT 
			     FROM  IMP_TRANSACTIONIMPORT 
			     WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 TRANSACTIONS_PURGED :=  TRANSACTIONS_PURGED + TEMP_TRANS_COUNT;
			 --Delete Interface Table records
			 DELETE FROM PAC_IMP_TRANSIMPORT_HEADER
			       WHERE ID IN (SELECT PAC_IMP_HEADER_ID FROM IMP_TRANSACTIONIMPORT
					             WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM IMP_TRANSACTIONIMPORT WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 
			 --Delete incident financial transactions
			 SELECT COUNT(*) INTO TEMP_TRANS_COUNT
			      FROM FIN_TXNS
			      WHERE IS_PROCESSED = 0 AND OBJECT_ID IN (SELECT ID FROM INV_INVESTMENTS
				                                            WHERE NLS_UPPER(CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
             TRANSACTIONS_PURGED :=  TRANSACTIONS_PURGED + TEMP_TRANS_COUNT;

             DELETE FROM FIN_TXNS
				   WHERE OBJECT_ID IN (SELECT ID FROM INV_INVESTMENTS
					             WHERE NLS_UPPER(CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));

			 --Delete GL Allocation tables before deleting WIP and Billing
			 DELETE FROM PAC_CHG_TRANS_VALUES 
			       WHERE TRANSACTION_ID IN (SELECT ID FROM  PAC_CHG_TRANSACTIONS
					                          WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_WIP
					                  		  				   	 WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE))
					   						     OR TRANSNO IN (SELECT TRANSNO FROM PPA_BILLINGS
					                  		  	 		 		 WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE)));					  
			 DELETE FROM PAC_CHG_TRANSACTIONS
			       WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_WIP
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE))
					   OR TRANSNO IN (SELECT TRANSNO FROM PPA_BILLINGS
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
									  
			 DELETE FROM PAC_CHG_TRIALRUNS_VALUES 
			       WHERE TRIALRUN_ID IN (SELECT ID FROM  PAC_CHG_TRANSACTIONS
					                              WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_WIP
					                  		  				   	     WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE))
					   						     OR TRANSNO IN (SELECT TRANSNO FROM PPA_BILLINGS
					                  		  	 		 		 WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE)));					  
			 DELETE FROM PAC_CHG_TRIALRUNS
			       WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_WIP
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE))
					  OR TRANSNO IN (SELECT TRANSNO FROM PPA_BILLINGS
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
	
				
			 --Get a count of WIP records
			 SELECT COUNT(*) INTO TEMP_TRANS_COUNT 
			   FROM  PPA_WIP 
			  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 TRANSACTIONS_PURGED :=  TRANSACTIONS_PURGED + TEMP_TRANS_COUNT;
			 --Delete Wip records
			 DELETE FROM PPA_WIPAPINFO
			       WHERE ID IN (SELECT PPA_WIPAPINFO_ID FROM PPA_WIP
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM PPA_WIP_VALUES
			       WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_WIP
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM PPA_WIP WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 
			 DELETE FROM PPA_TRANSWIPADJUST_VALUES
			       WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_TRANSWIPADJUST
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM PPA_TRANSWIPADJUST WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 
			 --Delete Billing records 
			 DELETE FROM PPA_BILLING_VALUES
			       WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_BILLINGS
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM PPA_BILLINGDETAILS
			       WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_BILLINGS
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM PPA_BILLINGS WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 
			 DELETE FROM PPA_TRANSBILL_VALUES
			       WHERE TRANSNO IN (SELECT TRANSNO FROM PPA_TRANSBILL
					                  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM PPA_TRANSBILL WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 
			 --Delete Invoice Records
			 DELETE FROM INVOICEHEADER_VALUES
			       WHERE INVOICENO IN (SELECT INVOICENO FROM INVOICEHEADER
					                    WHERE NLS_UPPER(BILLING_PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM PPA_INVOICEDETAILS
			       WHERE INVOICENO IN (SELECT INVOICENO FROM INVOICEHEADER
					                    WHERE NLS_UPPER(BILLING_PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM PPA_INVOICEDETAILS_VALUES
			       WHERE INVOICENO IN (SELECT INVOICENO FROM INVOICEHEADER
					                    WHERE NLS_UPPER(BILLING_PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE));
			 DELETE FROM INVOICEHEADER WHERE NLS_UPPER(BILLING_PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 
			   
			 --update the status
			 UPDATE PAC_PURGE_FINANCIAL_LIST
			    SET STATUS_CODE = 'S',
			        STATUS = 'Success',
				    NUMBER_OF_TRANS_PURGED = TRANSACTIONS_PURGED,
				    LAST_UPDATED_DATE = SYSDATE
			  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			  
			  --update IS_FINANCIALLY_ENABLED = 0 on pac_mnt_projects
			 UPDATE PAC_MNT_PROJECTS
			    SET IS_FINANCIALLY_ENABLED = 0
			  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 IF do_commit = 1 THEN
			   COMMIT;
			 END IF;
	   END; --TEMP_PROJECT_STATUS = 'C'
	 END IF;
	 EXCEPTION
	        WHEN PROJECT_STATUS_ERROR THEN
			 ROLLBACK;
		     UPDATE PAC_PURGE_FINANCIAL_LIST
			    SET STATUS_CODE = 'F',
			        STATUS = TEMP_FATAL_ERROR,
				    NUMBER_OF_TRANS_PURGED = 0,
				    LAST_UPDATED_DATE = SYSDATE
			  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 IF do_commit = 1 THEN
			   COMMIT;
			 END IF;
		    WHEN OTHERS THEN
		         IF do_commit = 1 THEN
			   ROLLBACK;
			 END IF;
		     TEMP_FATAL_ERROR := SUBSTR('Failed - ' || SQLCODE || ' - ' || SQLERRM, 0,3999);
			 UPDATE PAC_PURGE_FINANCIAL_LIST
			    SET STATUS_CODE = 'F',
			        STATUS = TEMP_FATAL_ERROR,
				    NUMBER_OF_TRANS_PURGED = 0,
				    LAST_UPDATED_DATE = SYSDATE
			  WHERE NLS_UPPER(PROJECT_CODE) = NLS_UPPER(CURSOR_PROJECT_DATA.PROJECT_CODE);
			 IF do_commit = 1 THEN
			   COMMIT;
			 END IF;
  END;
 END LOOP;
END;</definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>