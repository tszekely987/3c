<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_procedure</Code>
      <Records>
        <Record>
          <code>PAC_MNT_MATRIX_ROW_UPDATE_SP</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PPM"."PAC_MNT_MATRIX_ROW_UPDATE_SP" (
   iMatrixRowKey        NUMBER,
   in_cFromDate    IN   DATE,
   in_cToDate      IN   DATE,
   nNumVal1             NUMBER,
   nNumVal2             NUMBER,
   nNumVal3             NUMBER,
   in_cStrVal1     IN   VARCHAR2,
   cValue1              VARCHAR2 DEFAULT NULL,
   cValue2              VARCHAR2 DEFAULT NULL,
   cValue3              VARCHAR2 DEFAULT NULL,
   cValue4              VARCHAR2 DEFAULT NULL,
   cValue5              VARCHAR2 DEFAULT NULL,
   cValue6              VARCHAR2 DEFAULT NULL,
   cValue7              VARCHAR2 DEFAULT NULL,
   cValue8              VARCHAR2 DEFAULT NULL,
   cValue9              VARCHAR2 DEFAULT NULL,
   cValue10             VARCHAR2 DEFAULT NULL,
   currency             VARCHAR2,
   LANGUAGE             VARCHAR2,
   p_username           VARCHAR2,
   userId               NUMBER DEFAULT 1
)
AS
   cFromDate          DATE;
   cToDate            DATE;
   cStrVal1           GLOBALPKG.STRING;
   StoO_selcnt        INTEGER;
   StoO_error         INTEGER;
   StoO_rowcnt        INTEGER;
   StoO_crowcnt       INTEGER          := 0;
   StoO_fetchstatus   INTEGER          := 0;
   StoO_errmsg        GLOBALPKG.STRING;
   StoO_sqlstatus     INTEGER;
   dFromDate          DATE;
   dToDate            DATE;
   iMatrixKey         NUMBER;
   report             VARCHAR2 ( 256 );
   p_cValue1          GLOBALPKG.STRING;
   p_cValue2          GLOBALPKG.STRING;
   p_cValue3          GLOBALPKG.STRING;
   p_cValue4          GLOBALPKG.STRING;
   p_cValue5          GLOBALPKG.STRING;
   p_cValue6          GLOBALPKG.STRING;
   p_cValue7          GLOBALPKG.STRING;
   p_cValue8          GLOBALPKG.STRING;
   p_cValue9          GLOBALPKG.STRING;
   p_cValue10         GLOBALPKG.STRING;
BEGIN
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue1 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue1 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue2 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue2 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue3 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue3 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue4 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue4 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue5 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue5 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue6 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue6 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue7 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue7 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue8 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue8 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue9 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue9 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue10 :=
                               TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cValue10 );
   PAC_MNT_MATRIX_ROW_UPDATE_SP.cFromDate :=
                                    PAC_MNT_MATRIX_ROW_UPDATE_SP.in_cFromDate;
   PAC_MNT_MATRIX_ROW_UPDATE_SP.cToDate :=
                                      PAC_MNT_MATRIX_ROW_UPDATE_SP.in_cToDate;
   PAC_MNT_MATRIX_ROW_UPDATE_SP.cStrVal1 :=
                                     PAC_MNT_MATRIX_ROW_UPDATE_SP.in_cStrVal1;

   BEGIN
      StoO_rowcnt                := 0;
      StoO_selcnt                := 0;
      StoO_error                 := 0;

      SELECT MatrixKey
        INTO PAC_MNT_MATRIX_ROW_UPDATE_SP.iMatrixKey
        FROM ppa_MatrixValues
       WHERE MatrixRowKey = PAC_MNT_MATRIX_ROW_UPDATE_SP.iMatrixRowKey;

      StoO_rowcnt                := SQL%ROWCOUNT;
   EXCEPTION
      WHEN TOO_MANY_ROWS
      THEN
         StoO_rowcnt                := 2;
      WHEN NO_DATA_FOUND
      THEN
         StoO_rowcnt                := 0;
         StoO_selcnt                := 0;
      WHEN OTHERS
      THEN
         StoO_rowcnt                := 0;
         StoO_selcnt                := 0;
         StoO_error                 := SQLCODE;
         StoO_errmsg                := SQLERRM;
   END;

   PAC_MNT_MATRIX_ROW_UPDATE_SP.cStrVal1 :=
                                TRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cStrVal1 );

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue1 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue1 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue1 := NULL;
   END IF;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue2 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue2 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue2 := NULL;
   END IF;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue3 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue3 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue3 := NULL;
   END IF;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue4 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue4 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue4 := NULL;
   END IF;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue5 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue5 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue5 := NULL;
   END IF;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue6 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue6 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue6 := NULL;
   END IF;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue7 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue7 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue7 := NULL;
   END IF;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue8 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue8 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue8 := NULL;
   END IF;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue9 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue9 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue9 := NULL;
   END IF;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue10 = '*'
      OR PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue10 = ' '
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue10 := NULL;
   END IF;

   PAC_MNT_MATRIX_ROW_UPDATE_SP.report := '';

   BEGIN
      PAC_MNT_MATRIX_ROW_VALIDATE_SP ( PAC_MNT_MATRIX_ROW_UPDATE_SP.iMatrixKey,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.cFromDate,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.cToDate,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.cStrVal1,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue1,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue2,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue3,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue4,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue5,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue6,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue7,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue8,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue9,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue10,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.LANGUAGE,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.report,
                                       PAC_MNT_MATRIX_ROW_UPDATE_SP.p_username
                                     );
   /*EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       StoO_error := SQLCODE;
       StoO_errmsg := SQLERRM;*/
   END;

/*
  IF LTRIM(RTRIM(PAC_MNT_MATRIX_ROW_UPDATE_SP.report)) IS NOT NULL THEN
    BEGIN
      raise_application_error(-20115, PAC_MNT_MATRIX_ROW_UPDATE_SP.report);
      RETURN;
    END;
   END IF;
*/
   IF NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cFromDate ), '' ) IS NULL
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.cFromDate := '01/01/1900';
   END IF;

   IF NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.cToDate ), '' ) IS NULL
   THEN
      PAC_MNT_MATRIX_ROW_UPDATE_SP.cToDate := '12/31/2999';
   END IF;

   PAC_MNT_MATRIX_ROW_UPDATE_SP.dFromDate :=
                                        PAC_MNT_MATRIX_ROW_UPDATE_SP.cFromDate;
   PAC_MNT_MATRIX_ROW_UPDATE_SP.dToDate :=
                                          PAC_MNT_MATRIX_ROW_UPDATE_SP.cToDate;

   IF PAC_MNT_MATRIX_ROW_UPDATE_SP.dFromDate &gt;
                                          PAC_MNT_MATRIX_ROW_UPDATE_SP.dToDate
   THEN
      BEGIN
         raise_application_error ( -20218,
                                   'Your From date cannot be greater than your To date! '
                                 );
         RETURN;
      END;
   END IF;

   BEGIN
      BEGIN
         StoO_selcnt                := 0;
         StoO_error                 := 0;
         StoO_rowcnt                := 0;

         SELECT 1
           INTO StoO_selcnt
           FROM DUAL
          WHERE EXISTS (
                   SELECT 1
                     FROM ppa_MatrixValues
                    WHERE MatrixKey = PAC_MNT_MATRIX_ROW_UPDATE_SP.iMatrixKey
                      AND MatrixRowKey !=
                                    PAC_MNT_MATRIX_ROW_UPDATE_SP.iMatrixRowKey
                      AND -- this set of or condition's makes sure that
                          -- matrix rows will not be created with overlapping date range's (Fixes bug # 46356)
                          ( -- this condition checks if any of the existing rows from date
                            -- falls within in the new row's date range
                            ( TRUNC ( PAC_MNT_MATRIX_ROW_UPDATE_SP.dFromDate ) &lt;=
                                                            TRUNC ( FromDate )
                              AND TRUNC ( PAC_MNT_MATRIX_ROW_UPDATE_SP.dToDate ) &gt;=
                                                            TRUNC ( FromDate )
                            )
                            OR -- this condition checks if any of the existing rows to date
                               -- falls  within in the new row's date range
                            (    TRUNC ( PAC_MNT_MATRIX_ROW_UPDATE_SP.dFromDate
                                       ) &lt;= TRUNC ( ToDate )
                                 AND TRUNC ( PAC_MNT_MATRIX_ROW_UPDATE_SP.dToDate
                                           ) &gt;= TRUNC ( ToDate )
                               )
                            OR -- this condition checks if the from date and the to date fall within
                               -- the existing date range
                            (    TRUNC ( PAC_MNT_MATRIX_ROW_UPDATE_SP.dFromDate
                                       ) &gt; TRUNC ( FromDate )
                                 AND TRUNC ( PAC_MNT_MATRIX_ROW_UPDATE_SP.dToDate
                                           ) &lt; TRUNC ( ToDate )
                               )
                          )
                      AND NVL ( RTRIM ( Value1 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue1
                                        ),
                                  ' '
                                )
                      AND NVL ( RTRIM ( Value2 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue2
                                        ),
                                  ' '
                                )
                      AND NVL ( RTRIM ( Value3 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue3
                                        ),
                                  ' '
                                )
                      AND NVL ( RTRIM ( Value4 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue4
                                        ),
                                  ' '
                                )
                      AND NVL ( RTRIM ( Value5 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue5
                                        ),
                                  ' '
                                )
                      AND NVL ( RTRIM ( Value6 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue6
                                        ),
                                  ' '
                                )
                      AND NVL ( RTRIM ( Value7 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue7
                                        ),
                                  ' '
                                )
                      AND NVL ( RTRIM ( Value8 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue8
                                        ),
                                  ' '
                                )
                      AND NVL ( RTRIM ( Value9 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue9
                                        ),
                                  ' '
                                )
                      AND NVL ( RTRIM ( Value10 ), ' ' ) =
                            NVL ( RTRIM ( PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue10
                                        ),
                                  ' '
                                ));

         StoO_rowcnt                := SQL%ROWCOUNT;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            StoO_rowcnt                := 0;
            StoO_selcnt                := 0;
         WHEN OTHERS
         THEN
            StoO_rowcnt                := 0;
            StoO_selcnt                := 0;
            StoO_error                 := SQLCODE;
            StoO_errmsg                := SQLERRM;
      END;

      IF StoO_selcnt != 0
      THEN
         BEGIN
            raise_application_error ( -20220,
                                      'A row already exists with this information '
                                    );
            RETURN;
         END;
      END IF;
   END;

   BEGIN
      StoO_error                 := 0;
      StoO_rowcnt                := 0;

      UPDATE ppa_MatrixValues
         SET FromDate = PAC_MNT_MATRIX_ROW_UPDATE_SP.dFromDate,
             ToDate = PAC_MNT_MATRIX_ROW_UPDATE_SP.dToDate,
             Value1 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue1,
             Value2 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue2,
             Value3 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue3,
             Value4 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue4,
             Value5 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue5,
             Value6 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue6,
             Value7 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue7,
             Value8 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue8,
             Value9 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue9,
             Value10 = PAC_MNT_MATRIX_ROW_UPDATE_SP.p_cValue10,
             NumVal1 = PAC_MNT_MATRIX_ROW_UPDATE_SP.nNumVal1,
             NumVal2 = PAC_MNT_MATRIX_ROW_UPDATE_SP.nNumVal2,
             NumVal3 = PAC_MNT_MATRIX_ROW_UPDATE_SP.nNumVal3,
             StrVal1 = PAC_MNT_MATRIX_ROW_UPDATE_SP.cStrVal1,
             matrix_currency_code = PAC_MNT_MATRIX_ROW_UPDATE_SP.currency,
             LAST_UPDATED_DATE = SYSDATE,
             LAST_UPDATED_BY = PAC_MNT_MATRIX_ROW_UPDATE_SP.userId
       WHERE MatrixRowKey = PAC_MNT_MATRIX_ROW_UPDATE_SP.iMatrixRowKey;

      StoO_rowcnt                := SQL%ROWCOUNT;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         raise_application_error ( -20229, 'Error Updating Matrix Row' );
      WHEN OTHERS
      THEN
         StoO_error                 := SQLCODE;
         StoO_errmsg                := SQLERRM;
         raise_application_error ( -20229, 'Error Updating Matrix Row' );
   END;

   BEGIN
      StoO_error                 := 0;
      StoO_rowcnt                := 0;

      UPDATE ppa_Matrix
         SET LAST_UPDATED_DATE = SYSDATE
       WHERE MatrixKey = PAC_MNT_MATRIX_ROW_UPDATE_SP.iMatrixKey;

      StoO_rowcnt                := SQL%ROWCOUNT;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         raise_application_error ( -20229, 'Error Updating Matrix Row' );
      WHEN OTHERS
      THEN
         StoO_error                 := SQLCODE;
         StoO_errmsg                := SQLERRM;
         raise_application_error ( -20229, 'Error Updating Matrix Row' );
   END;
END PAC_MNT_MATRIX_ROW_UPDATE_SP;</definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>