<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_procedure</Code>
      <Records>
        <Record>
          <code>PPA_MATRIXCREATECOPYSTRUCTURE</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PPM"."PPA_MATRIXCREATECOPYSTRUCTURE" 
(
  iTemplateMatrixKey NUMBER,
  cNewMatrixName     VARCHAR2,
  in_cMatrixType  IN VARCHAR2,
  bCopyData          NUMBER,
  RC1         IN OUT PPA_MATRIXCREATECOPYSTRUCTUPkg.RCT1,
  userId             NUMBER DEFAULT 1)
AS
  cMatrixType        GLOBALPKG.STRING;
  StoO_selcnt        INTEGER;
  StoO_error         INTEGER;
  StoO_rowcnt        INTEGER;
  StoO_crowcnt       INTEGER := 0;
  StoO_fetchstatus   INTEGER := 0;
  StoO_errmsg        GLOBALPKG.STRING;
  StoO_sqlstatus     INTEGER;
  iNewMatrixID       NUMBER;
BEGIN
	ppa_MatrixCreateCopyStructure.cMatrixType := ppa_MatrixCreateCopyStructure.in_cMatrixType;
  ppa_MatrixCreateCopyStructure.iNewMatrixID := 0;
  ppa_MatrixCreateCopyStructure.cMatrixType := RTRIM(ppa_MatrixCreateCopyStructure.cMatrixType);

  IF ppa_MatrixCreateCopyStructure.cMatrixType = ':' THEN
		ppa_MatrixCreateCopyStructure.cMatrixType :=  NULL;
	END IF;

  BEGIN
    StoO_selcnt := 0;
    StoO_error  := 0;
    StoO_rowcnt := 0;
    SELECT 1 INTO StoO_selcnt
    FROM DUAL
    WHERE  EXISTS (
      SELECT  1
      FROM ppa_Matrix
      WHERE Description = ppa_MatrixCreateCopyStructure.cNewMatrixName
        );
    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
      WHEN OTHERS THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
	END;

  IF StoO_selcnt != 0 THEN
    BEGIN
      raise_application_error(-20203, 'A Matrix with this name already exists!  Matrix names must be unique.');
      RETURN;
    END;
	END IF;

	BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;
    INSERT INTO ppa_Matrix (MATRIXKEY, Description, MatrixType, Comments,
    CREATED_DATE, CREATED_BY, LAST_UPDATED_DATE, LAST_UPDATED_BY)
    SELECT S_285_1_PPA_MATRIX.nextval, ppa_MatrixCreateCopyStructure.cNewMatrixName,
           NVL(ppa_MatrixCreateCopyStructure.cMatrixType, MatrixType), 'Copied From Matrix ' || Description
           , SYSDATE, userId, SYSDATE, userId
      FROM ppa_Matrix
     WHERE MatrixKey = ppa_MatrixCreateCopyStructure.iTemplateMatrixKey;

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
	END;

  IF StoO_error = 0 THEN
	BEGIN
		ppa_MatrixCreateCopyStructure.iNewMatrixID :=   globalPkg.identity;
		BEGIN
      StoO_error   := 0;
      StoO_rowcnt  := 0;

      INSERT INTO ppa_MatrixColDef (MATRIXCOLDEFKEY, MatrixKey, ColumnNo, ColumnName, FieldName, CompareCol, CompareOp, DataType,
      CREATED_DATE, CREATED_BY, LAST_UPDATED_DATE, LAST_UPDATED_BY)
      SELECT S_129_1_PPA_MATRIXCOLDEF.nextval, ppa_MatrixCreateCopyStructure.iNewMatrixID, ColumnNo,
             ColumnName, FieldName, CompareCol, CompareOp, DataType, SYSDATE, userId, SYSDATE, userId
        FROM ppa_MatrixColDef
       WHERE MatrixKey = ppa_MatrixCreateCopyStructure.iTemplateMatrixKey
      ;

      StoO_rowcnt := SQL%ROWCOUNT;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
        WHEN OTHERS THEN
          StoO_error := SQLCODE;
          StoO_errmsg := SQLERRM;
		END;

    IF StoO_error = 0 THEN
      BEGIN
        IF ppa_MatrixCreateCopyStructure.bCopyData != 0 THEN
          BEGIN
            BEGIN
              StoO_error   := 0;
              StoO_rowcnt  := 0;

              INSERT INTO ppa_MatrixValues (MATRIXROWKEY, MatrixKey, FromDate, ToDate, Value1, Value2, Value3, Value4, Value5, Value6, Value7, Value8, Value9, Value10, NumVal1, NumVal2, NumVal3, StrVal1,
              CREATED_DATE, CREATED_BY, LAST_UPDATED_DATE, LAST_UPDATED_BY)
              SELECT S_252_1_PPA_MATRIXVALUES.nextval, ppa_MatrixCreateCopyStructure.iNewMatrixID, FromDate,
                     ToDate, Value1, Value2, Value3, Value4, Value5, Value6, Value7,
                     Value8, Value9, Value10, NumVal1, NumVal2, NumVal3, StrVal1,
                     SYSDATE, userId, SYSDATE, userId
                FROM ppa_MatrixValues
               WHERE MatrixKey = ppa_MatrixCreateCopyStructure.iTemplateMatrixKey;

              StoO_rowcnt := SQL%ROWCOUNT;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  NULL;
                WHEN OTHERS THEN
                  StoO_error := SQLCODE;
                  StoO_errmsg := SQLERRM;
            END;

            IF StoO_error != 0 THEN
              BEGIN
                BEGIN
                  ppa_MatrixDelete(ppa_MatrixCreateCopyStructure.iNewMatrixID);

                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                      NULL;
                    WHEN OTHERS THEN
                      StoO_error := SQLCODE;
                      StoO_errmsg := SQLERRM;
                END;

                ppa_MatrixCreateCopyStructure.iNewMatrixID :=  0;
              END;
            END IF;
          END;
        END IF;
      END;
      ELSE
        BEGIN
          BEGIN
            ppa_MatrixDelete(ppa_MatrixCreateCopyStructure.iNewMatrixID);
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                NULL;
              WHEN OTHERS THEN
                StoO_error := SQLCODE;
                StoO_errmsg := SQLERRM;
          END;

          ppa_MatrixCreateCopyStructure.iNewMatrixID :=  0;
        END;
      END IF;
    END;
	END IF;

  StoO_rowcnt := 0;
	StoO_selcnt := 0;
	StoO_error  := 0;

  OPEN RC1 FOR
  SELECT ppa_MatrixCreateCopyStructure.iNewMatrixID
    FROM DUAL;
END ppa_MatrixCreateCopyStructure;
 
 
 
 
 </definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>