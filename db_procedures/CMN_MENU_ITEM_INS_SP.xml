<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_procedure</Code>
      <Records>
        <Record>
          <code>CMN_MENU_ITEM_INS_SP</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PPM"."CMN_MENU_ITEM_INS_SP" (
   P_ACTION_CODE      IN   VARCHAR2,
   P_CONTAINER_CODE   IN   VARCHAR2,
   P_MENU_TYPE      IN   VARCHAR2 DEFAULT 'MENU',
   P_PARENT_MENU_CODE IN   VARCHAR2 DEFAULT NULL,
   P_MENU_ITEM_LEVEL  IN   NUMBER DEFAULT 0,
   P_MENU_ITEM_POSITION IN   NUMBER DEFAULT NULL,
   P_IS_REQUIRED    IN   NUMBER DEFAULT 1,
   P_IS_DEFAULT     IN   NUMBER DEFAULT 1,
   P_IS_HIDDEN      IN   NUMBER DEFAULT 0,
   P_CREATED_BY         IN   NUMBER DEFAULT 1,
   P_MENU_ITEM_ID IN   NUMBER DEFAULT NULL, -- ID (PK) to use to avoid blocks in SQL Server. Added to the Oracle version for symmetry reasons
   P_MENU_NAME IN   VARCHAR2 DEFAULT NULL,
   P_MENU_DESCRIPTION IN   VARCHAR2 DEFAULT NULL
)
IS
   V_ACTION_COUNT          NUMBER;
   V_ACTION_ID             NUMBER;
   V_CONTAINER_COUNT     NUMBER;
   V_CONTAINER_ID      NUMBER;
   V_MENU_ITEM_ID      NUMBER;
   V_PARENT_MENU_COUNT     NUMBER;
   V_PARENT_MENU_ID      NUMBER := NULL;
   V_MENU_ITEM_POSITION    NUMBER := P_MENU_ITEM_POSITION;
   V_CREATED_DATE      DATE := SYSDATE;
   V_NLS_NAME                   VARCHAR2(255);
   V_NLS_DESCRIPTION            VARCHAR2(255);
BEGIN

  -- CHECK IF ACTION EXISTS FIRST

  SELECT   COUNT (*)
  INTO     V_ACTION_COUNT
  FROM     CMN_ACTIONS
  WHERE    ACTION_CODE = P_ACTION_CODE;

    IF V_ACTION_COUNT = 0 THEN
      RAISE_APPLICATION_ERROR (-20006, 'ACTION DOES NOT EXIST');
    END IF;

  -- GET ACTION ID
  BEGIN
     SELECT  ID
     INTO    V_ACTION_ID
     FROM    CMN_ACTIONS
     WHERE   ACTION_CODE = P_ACTION_CODE;
     EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;


  -- CHECK FOR VALID CONTAINER/MENU TYPE

  IF ( ( P_MENU_TYPE != 'MENU' ) and ( P_MENU_TYPE != 'PANE' )and ( P_MENU_TYPE != 'SUBTAB' ) ) THEN
      RAISE_APPLICATION_ERROR (-20000, 'INVALID CONTAINER/MENU TYPE');
    END IF;

  -- CHECK IF CONTAINER PAGE EXISTS
  -- AND SAVE A REFERENCE TO THIS PAGE ID
  IF (P_MENU_TYPE = 'PANE' OR P_MENU_TYPE = 'SUBTAB') THEN

    SELECT COUNT(*)
    INTO   V_CONTAINER_COUNT
    FROM   CMN_PAGES
    WHERE  PAGE_CODE = P_CONTAINER_CODE;

    IF ( V_CONTAINER_COUNT = 0 ) THEN
       RAISE_APPLICATION_ERROR(-20006, 'PAGE PANE CONTAINER DOES NOT EXIST');
    END IF;

    -- GET CONTAINER PAGE ID
    BEGIN
       SELECT  ID
       INTO    V_CONTAINER_ID
       FROM    CMN_PAGES
       WHERE   PAGE_CODE = P_CONTAINER_CODE;
       EXCEPTION
        WHEN OTHERS THEN
           NULL;
      END;

  END IF;


  -- CHECK IF MENU PORTLET CONTAINER EXISTS
  -- AND SAVE A REFERENCE TO THIS PORTLET ID
  IF (P_MENU_TYPE = 'MENU') THEN

    SELECT COUNT(*)
    INTO   V_CONTAINER_COUNT
    FROM   CMN_PORTLETS
    WHERE  PORTLET_CODE = P_CONTAINER_CODE;

    IF ( V_CONTAINER_COUNT = 0 ) THEN
       RAISE_APPLICATION_ERROR(-20006, 'MENU PORTLET CONTAINER DOES NOT EXIST');
    END IF;

    -- GET CONTAINER MENU PORTLET ID
    BEGIN
       SELECT  ID
       INTO    V_CONTAINER_ID
       FROM    CMN_PORTLETS
       WHERE   PORTLET_CODE = P_CONTAINER_CODE;
       EXCEPTION
        WHEN OTHERS THEN
           NULL;
      END;

  END IF;


   -- CHECK IF MENU EXISTS FIRST

   SELECT COUNT(*)
   INTO V_ACTION_COUNT
   FROM CMN_ACTIONS, CMN_MENU_ITEMS
   WHERE CMN_ACTIONS.ID = V_ACTION_ID
   AND   CMN_MENU_ITEMS.ACTION_ID = CMN_ACTIONS.ID
   AND   CMN_MENU_ITEMS.CONTAINER_ID = V_CONTAINER_ID;

   IF ( V_ACTION_COUNT &gt; 0 ) THEN
      RAISE_APPLICATION_ERROR(-20006, 'MENU ITEM ALREADY EXISTS');
   END IF;


  -- CHECK IF PARENT MENU EXISTS
  -- AND GET A PAREMT MENU ID
  IF NOT( P_PARENT_MENU_CODE IS NULL ) THEN

     -- CHECK IF PARENT MENU ITEM AND ACTION EXISTS

     SELECT COUNT(*)
     INTO V_PARENT_MENU_COUNT
     FROM CMN_ACTIONS, CMN_MENU_ITEMS
     WHERE CMN_ACTIONS.ACTION_CODE = P_PARENT_MENU_CODE
     AND   CMN_MENU_ITEMS.ACTION_ID = CMN_ACTIONS.ID;

     IF ( V_PARENT_MENU_COUNT = 0 ) THEN
        RAISE_APPLICATION_ERROR(-20006, 'PARENT MENU/ACTION DOES NOT EXIST');
     END IF;

     -- GET PARENT MENU ID
     SELECT CMN_MENU_ITEMS.ID
     INTO V_PARENT_MENU_ID
     FROM CMN_ACTIONS, CMN_MENU_ITEMS
     WHERE CMN_ACTIONS.ACTION_CODE = P_PARENT_MENU_CODE
     AND   CMN_MENU_ITEMS.ACTION_ID = CMN_ACTIONS.ID;

  END IF;


  -- CALCULATE NEW MENU ITEM POSITION

  IF ( P_MENU_ITEM_POSITION IS NULL ) THEN
    -- CALCULATE POSITION BASED ON PREVIOSLY ADDED MENU ITEMS
    BEGIN
      -- problems with CMN_MENU_ITEMS.PARENT_MENU_ID = NULL (wants IS NULL?)
      IF ( V_PARENT_MENU_ID IS NULL ) THEN
        BEGIN
          SELECT  NVL( MAX(POSITION), -1 ) + 1
          INTO    V_MENU_ITEM_POSITION
          FROM    CMN_ACTIONS, CMN_MENU_ITEMS
          WHERE   CMN_ACTIONS.ID = CMN_MENU_ITEMS.ACTION_ID
          AND     CMN_ACTIONS.PRINCIPAL_TYPE = 'SYSTEM' AND CMN_ACTIONS.PRINCIPAL_ID = 0
          AND     CMN_MENU_ITEMS.CONTAINER_ID = V_CONTAINER_ID
          AND     CMN_MENU_ITEMS.MENU_ITEM_LEVEL = P_MENU_ITEM_LEVEL;
          EXCEPTION
          WHEN OTHERS THEN
            V_MENU_ITEM_POSITION := 0;
        END;
      ELSE
        BEGIN
          SELECT  NVL( MAX(POSITION), -1 ) + 1
          INTO    V_MENU_ITEM_POSITION
          FROM    CMN_ACTIONS, CMN_MENU_ITEMS
          WHERE   CMN_ACTIONS.ID = CMN_MENU_ITEMS.ACTION_ID
          AND     CMN_ACTIONS.PRINCIPAL_TYPE = 'SYSTEM' AND CMN_ACTIONS.PRINCIPAL_ID = 0
          AND     CMN_MENU_ITEMS.CONTAINER_ID = V_CONTAINER_ID
          AND     CMN_MENU_ITEMS.PARENT_MENU_ID = V_PARENT_MENU_ID
          AND     CMN_MENU_ITEMS.MENU_ITEM_LEVEL = P_MENU_ITEM_LEVEL;
          EXCEPTION
          WHEN OTHERS THEN
            V_MENU_ITEM_POSITION := 0;
        END;
      END IF;
    END;
  END IF;

  -- GET NEW MENU ITEM ID

  IF (P_MENU_ITEM_ID IS NULL) THEN
    BEGIN
      SELECT   CMN_MENU_ITEMS_S1.NEXTVAL
      INTO     V_MENU_ITEM_ID
      FROM     DUAL;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
    END;
  ELSE
    V_MENU_ITEM_ID := P_MENU_ITEM_ID;
  END IF;

  -- CREATE NEW MENU ITEM

  INSERT INTO CMN_MENU_ITEMS
  (
   ID, ACTION_ID, CONTAINER_ID, CONTAINER_TYPE_CODE,
   ITEM_TYPE_CODE, PARENT_MENU_ID, MENU_ITEM_LEVEL, POSITION,
   IS_REQUIRED, IS_DEFAULT, IS_HIDDEN,
   PRINCIPAL_ID, PRINCIPAL_TYPE,
   CREATED_DATE, CREATED_BY, LAST_UPDATED_DATE, LAST_UPDATED_BY
  )
  VALUES
  ( V_MENU_ITEM_ID, V_ACTION_ID, V_CONTAINER_ID, P_MENU_TYPE,
    P_MENU_TYPE, V_PARENT_MENU_ID, P_MENU_ITEM_LEVEL, V_MENU_ITEM_POSITION,
    P_IS_REQUIRED, P_IS_DEFAULT, P_IS_HIDDEN,
    0, 'SYSTEM',
      V_CREATED_DATE, P_CREATED_BY, V_CREATED_DATE, P_CREATED_BY );


  -- needed for page/pane menu items (tabs)
  -- get the text from the action
  IF ( P_MENU_NAME IS NULL and p_menu_description is null) THEN
  BEGIN
    cmn_captions_nls_copy_sp( 'CMN_ACTIONS', V_ACTION_ID, 'CMN_MENU_ITEMS', V_MENU_ITEM_ID );
  END;
  ELSE
  BEGIN
    SELECT  NAME, DESCRIPTION
    INTO    V_NLS_NAME, V_NLS_DESCRIPTION
    FROM    CMN_CAPTIONS_NLS
    WHERE   PK_ID = V_ACTION_ID AND TABLE_NAME = 'CMN_ACTIONS' AND LANGUAGE_CODE = 'en';

    IF ( P_MENU_NAME IS NOT NULL ) THEN
      V_NLS_NAME := P_MENU_NAME;
    END IF;

    IF ( P_MENU_DESCRIPTION IS NOT NULL ) THEN
      V_NLS_DESCRIPTION := P_MENU_DESCRIPTION;
    END IF;

    CMN_CAPTIONS_NLS_UPD_SP( 'CMN_MENU_ITEMS', V_MENU_ITEM_ID, V_NLS_NAME, V_NLS_DESCRIPTION, P_CREATED_BY );
  END;
  END IF;



END;
 
 
 </definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>