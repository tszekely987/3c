<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_procedure</Code>
      <Records>
        <Record>
          <code>PAC_CHG_REVERSE_GL_TRANS_SP</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PPM"."PAC_CHG_REVERSE_GL_TRANS_SP" 
(
  P_USER_ID         NUMBER,
  P_TRANSNO         NUMBER,
  P_GL_PERIOD       VARCHAR2
)
AS
  V_DATE            DATE;
  V_TRANSACTION_ID  NUMBER;
  V_STMT            VARCHAR2(255);
  V_GL_PERIOD       DATE;

  StoO_selcnt       INTEGER;
  StoO_error        INTEGER;
  StoO_rowcnt       INTEGER;
  StoO_crowcnt      INTEGER := 0;
  StoO_fetchstatus  INTEGER := 0;
  StoO_errmsg       GLOBALPKG.STRING;
  StoO_sqlstatus    INTEGER;

  CURSOR C_TRANS_REC (C_TRANSNO NUMBER) IS
  SELECT T.ID,
         DECODE(T.CHARGEBACK_TYPE, 'C', 'D', 'C') CHARGEBACK_TYPE,
         T.TRANSNO,
         T.ENTITY_ID,
         T.ACCOUNT_CODE_ID,
         T.QUANTITY
    FROM PAC_CHG_TRANSACTIONS T
   WHERE T.TRANS_SOURCE = 'W'
     AND T.TRANSNO = P_TRANSNO;

  CURSOR C_TRANS_VALUES_REC (C_ID NUMBER) IS
   SELECT V.AMOUNT "AMOUNT",
          V.CURRENCY_TYPE,
          V.CURRENCY_CODE
     FROM PAC_CHG_TRANS_VALUES V
    WHERE V.TRANSACTION_ID = C_ID;

BEGIN
  V_STMT := 'Initializing variables';
  V_DATE := SYSDATE;

  V_STMT := 'Selecting end date for GL period';
  SELECT P.END_DATE
    INTO V_GL_PERIOD
    FROM BIZ_COM_PERIODS P
   WHERE P.PERIOD_NAME = P_GL_PERIOD;

  FOR C_TRANS_DATA IN C_TRANS_REC (P_TRANSNO)
    LOOP
      V_STMT := 'Getting transaction ID';
      SELECT PAC_CHG_TRANSACTIONS_S1.NEXTVAL
        INTO V_TRANSACTION_ID
        FROM DUAL;

      V_STMT := 'Populating transaction table';
      INSERT INTO PAC_CHG_TRANSACTIONS
      (
        ID,
        BATCH_ID,
        CHARGEBACK_TYPE,
        SOURCE_ID,
        TRANS_SOURCE,
        TRANSNO,
        GL_PERIOD,
        ENTITY_ID,
        ACCOUNT_CODE_ID,
        QUANTITY,
        STATUS,
        CREATED_DATE,
        CREATED_BY,
        LAST_UPDATED_DATE,
        LAST_UPDATED_BY
      )
      SELECT
        V_TRANSACTION_ID,
        0,  -- not part of a posting batch...
        C_TRANS_DATA.CHARGEBACK_TYPE,
        C_TRANS_DATA.ID,
        'R',
        C_TRANS_DATA.TRANSNO,
        V_GL_PERIOD,
        C_TRANS_DATA.ENTITY_ID,
        C_TRANS_DATA.ACCOUNT_CODE_ID,
        C_TRANS_DATA.QUANTITY,
        0,
        V_DATE,
        P_USER_ID,
        V_DATE,
        P_USER_ID
      FROM DUAL;

      V_STMT := 'Populating transaction values table';

      FOR C_TRANS_VALUES_DATA IN C_TRANS_VALUES_REC (C_TRANS_DATA.ID)
        LOOP
          INSERT INTO PAC_CHG_TRANS_VALUES
          (
            ID,
            TRANSACTION_ID,
            CURRENCY_TYPE,
            CURRENCY_CODE,
            AMOUNT,
            CREATED_DATE,
            CREATED_BY,
            LAST_UPDATED_DATE,
            LAST_UPDATED_BY
          )
          SELECT
            PAC_CHG_TRANS_VALUES_S1.NEXTVAL,
            V_TRANSACTION_ID,
            C_TRANS_VALUES_DATA.CURRENCY_TYPE,
            C_TRANS_VALUES_DATA.CURRENCY_CODE,
            C_TRANS_VALUES_DATA.AMOUNT,
            V_DATE,
            P_USER_ID,
            V_DATE,
            P_USER_ID
          FROM
            DUAL;
        END LOOP;
    END LOOP;

  V_STMT := 'Updating gl transaction status';
  UPDATE PAC_CHG_TRANSACTIONS
     SET STATUS = 2
   WHERE TRANS_SOURCE = 'W'
     AND TRANSNO = P_TRANSNO;

  V_STMT := 'Updating wip transaction status';
  UPDATE PPA_WIP
     SET GLPOSTED = 'N',
         GLPERIOD = NULL
   WHERE TRANSNO = P_TRANSNO;

  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR(-20779, 'REVERSING GL TRANSACTIONS FAILED : ' || V_STMT || ': ' || SQLERRM);
END PAC_CHG_REVERSE_GL_TRANS_SP;
 
 
 
 
 </definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>