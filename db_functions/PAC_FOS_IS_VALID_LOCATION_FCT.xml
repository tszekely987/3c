<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_function</Code>
      <Records>
        <Record>
          <code>PAC_FOS_IS_VALID_LOCATION_FCT</code>
          <parallel>NO</parallel>
          <definition>
  CREATE OR REPLACE EDITIONABLE FUNCTION "PPM"."PAC_FOS_IS_VALID_LOCATION_FCT" 
 (P_RESOURCE_CODE VARCHAR2,
  P_LOCATION_ID   VARCHAR2)
  RETURN INTEGER
IS
  V_SECURITY_LEVEL INTEGER := 0;
  V_DEFAULT_ENTITY  VARCHAR2(60);
  V_RESOURCE_ENTITY VARCHAR2(60);
  V_RETURN_VALUE   INTEGER := 0;
  V_COUNT          INTEGER := 0;
BEGIN
  -- make sure the location is valid
  IF P_LOCATION_ID IS NOT NULL THEN
      BEGIN
      SELECT COUNT(1)
        INTO V_COUNT
        FROM LOCATIONS
      WHERE LOCATIONID = P_LOCATION_ID;

      EXCEPTION
        WHEN OTHERS THEN
          RETURN 0;
    END;

    IF V_COUNT = 0 THEN
      RETURN 0;
    END IF;
  END IF;

  BEGIN
    SELECT NVL(ENTITY_SECURITY, 0),
           NVL(DEFAULTENTITY, ' ')
      INTO V_SECURITY_LEVEL,
           V_DEFAULT_ENTITY
      FROM NAMEOPTIONS;

    EXCEPTION
      WHEN OTHERS THEN
        RETURN 0;
  END;

  IF V_SECURITY_LEVEL &gt; 0 THEN  -- we don't want to require resource financial properties to be enabled if security is off...
    BEGIN
      -- make sure the resource is valid
      BEGIN
        SELECT COUNT(1)
          INTO V_COUNT
          FROM PAC_MNT_RESOURCES P, SRM_RESOURCES S
          WHERE P.ID = S.ID and S.UNIQUE_NAME = P_RESOURCE_CODE;

        EXCEPTION
          WHEN OTHERS THEN
            RETURN 0;
      END;

      IF V_COUNT = 0 THEN
        RETURN 0;
      END IF;
    END;
  END IF;

  IF V_SECURITY_LEVEL = 0 THEN -- if there is no security, return TRUE to give them access to this location
    V_RETURN_VALUE := 1;
  ELSE
    BEGIN
      BEGIN
        SELECT L.ENTITY
          INTO V_RESOURCE_ENTITY
          FROM PAC_MNT_RESOURCES R,
               LOCATIONS L, SRM_RESOURCES S
         WHERE R.ID = S.ID and S.UNIQUE_NAME = P_RESOURCE_CODE
           AND R.LOCATIONID = L.LOCATIONID;

        EXCEPTION
          WHEN OTHERS THEN
            RETURN 0; -- if the resource code is invalid, or an error occurs, they can't see anything
      END;

      IF V_RESOURCE_ENTITY = V_DEFAULT_ENTITY AND V_SECURITY_LEVEL = 2 THEN  -- if resource belongs to parent entity, give them access
        V_RETURN_VALUE := 1;
      ELSE
        BEGIN
          SELECT COUNT(1)                             -- otherwise, they only get access if they belong to the
            INTO V_RETURN_VALUE                       --   same entity as this location
            FROM LOCATIONS
           WHERE LOCATIONID = P_LOCATION_ID
             AND ENTITY = V_RESOURCE_ENTITY;

          EXCEPTION
            WHEN OTHERS THEN
              RETURN 0; -- if the resource code is invalid, or an error occurs, they can't see anything
        END;
      END IF;
    END;
  END IF;

  IF NVL(V_RETURN_VALUE, 0) &gt; 1 THEN
    V_RETURN_VALUE := 1;
  END IF;

  RETURN NVL(V_RETURN_VALUE, 0);
END;
 
 
 </definition>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>