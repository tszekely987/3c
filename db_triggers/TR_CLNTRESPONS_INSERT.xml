<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_trigger</Code>
      <Records>
        <Record>
          <code>TR_CLNTRESPONS_INSERT</code>
          <table_name>CLNTRESPONS</table_name>
          <trigger_type>AFTER EACH ROW</trigger_type>
          <triggering_event>INSERT</triggering_event>
          <column_name xsi:nil="true"/>
          <referencing_names>REFERENCING NEW AS NEW OLD AS OLD</referencing_names>
          <when_clause xsi:nil="true"/>
          <status>ENABLED</status>
          <description>"PPM"."TR_CLNTRESPONS_INSERT" 
AFTER INSERT
ON CLNTRESPONS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
</description>
          <trigger_body>DECLARE
  StoO_selcnt      INTEGER;
  StoO_error       INTEGER;
  StoO_rowcnt      INTEGER := 1;
  StoO_crowcnt     INTEGER := 0;
  StoO_fetchstatus INTEGER := 0;
  StoO_errmsg      GLOBALPKG.STRING;
  StoO_sqlstatus   INTEGER;
  msg              GLOBALPKG.STRING;
  minkey1          GLOBALPKG.STRING;
  minkey2          GLOBALPKG.STRING;
  return_          NUMBER;
BEGIN
  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;

    DELETE  projstaff
      WHERE projstaff.COMPANY_CODE = :NEW.COMPANY_CODE
      AND projstaff.RESOURCE_CODE = :NEW.RESOURCE_CODE;
    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
	END;

  IF  StoO_error != 0 THEN
    BEGIN
      RAISE_APPLICATION_ERROR(-20425,'Trigger forces a rollback');
      RETURN ;
    END;
  END IF;

  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;

    INSERT INTO projstaff (COMPANY_CODE, PROJECT_CODE, RESOURCE_CODE,
                  projectaccess, projectapproval, billingaccess,
                billingapproval, projecttogo, individualtogo,
                FORECASTACCESS, FORECASTAPPROVAL )
      SELECT  pac_mnt_projects.COMPANY_CODE, pac_mnt_projects.PROJECT_CODE, :NEW.RESOURCE_CODE, 1,
        1, 1, 1, 1, 1, 1, 1
      FROM pac_mnt_projects
      WHERE pac_mnt_projects.COMPANY_CODE = :NEW.COMPANY_CODE;
    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
	END;

  IF  StoO_error != 0 THEN
    BEGIN
      RAISE_APPLICATION_ERROR(-20425,'Trigger forces a rollback');
      RETURN;
    END;
	END IF;

  BEGIN
		StoO_rowcnt := 0;
		StoO_selcnt := 0;
		StoO_error  := 0;

		SELECT   :new.COMPANY_CODE
		INTO minkey1 FROM DUAL;
		StoO_rowcnt := SQL%ROWCOUNT;

		EXCEPTION
			WHEN TOO_MANY_ROWS THEN
				StoO_rowcnt := 2;
			WHEN NO_DATA_FOUND THEN
				StoO_rowcnt := 0;
				StoO_selcnt := 0;
			WHEN OTHERS THEN
				StoO_rowcnt := 0;
				StoO_selcnt := 0;
				StoO_error := SQLCODE;
				StoO_errmsg := SQLERRM;
	END;

	&lt;&lt;i_loop1&gt;&gt;
  WHILE  StoO_rowcnt &gt; 0 AND minkey1 IS NOT NULL LOOP
    BEGIN
      BEGIN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error  := 0;

        SELECT   :new.RESOURCE_CODE
        INTO minkey2 FROM DUAL
        WHERE :new.COMPANY_CODE = minkey1;
        StoO_rowcnt := SQL%ROWCOUNT;

        EXCEPTION
          WHEN TOO_MANY_ROWS THEN
            StoO_rowcnt := 2;
          WHEN NO_DATA_FOUND THEN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
          WHEN OTHERS THEN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
            StoO_error := SQLCODE;
            StoO_errmsg := SQLERRM;
      END;

      &lt;&lt;i_loop2&gt;&gt;
      WHILE  StoO_rowcnt &gt; 0 AND minkey2 IS NOT NULL LOOP
        BEGIN
          BEGIN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
            StoO_error  := 0;

            SELECT   :new.RESOURCE_CODE
            INTO minkey2 FROM DUAL
            WHERE :new.COMPANY_CODE = minkey1
            AND :new.RESOURCE_CODE &gt; minkey2;
            StoO_rowcnt := SQL%ROWCOUNT;

            EXCEPTION
              WHEN TOO_MANY_ROWS THEN
                StoO_rowcnt := 2;
              WHEN NO_DATA_FOUND THEN
                StoO_rowcnt := 0;
                StoO_selcnt := 0;
              WHEN OTHERS THEN
                StoO_rowcnt := 0;
                StoO_selcnt := 0;
                StoO_error := SQLCODE;
                StoO_errmsg := SQLERRM;
          END;
        END;
      END LOOP;

      BEGIN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error  := 0;

        SELECT   :new.COMPANY_CODE
        INTO minkey1 FROM DUAL
        WHERE :new.COMPANY_CODE &gt; minkey1;
        StoO_rowcnt := SQL%ROWCOUNT;

        EXCEPTION
          WHEN TOO_MANY_ROWS THEN
            StoO_rowcnt := 2;
          WHEN NO_DATA_FOUND THEN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
          WHEN OTHERS THEN
            StoO_rowcnt := 0;
            StoO_selcnt := 0;
            StoO_error := SQLCODE;
            StoO_errmsg := SQLERRM;
      END;
    END;
	END LOOP;
END tr_clntrespons_insert;
















































</trigger_body>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>