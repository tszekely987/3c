<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_trigger</Code>
      <Records>
        <Record>
          <code>TR_PROJCNTRTS_DELETE</code>
          <table_name>PROJCNTRTS</table_name>
          <trigger_type>AFTER EACH ROW</trigger_type>
          <triggering_event>DELETE</triggering_event>
          <column_name xsi:nil="true"/>
          <referencing_names>REFERENCING NEW AS NEW OLD AS OLD</referencing_names>
          <when_clause xsi:nil="true"/>
          <status>ENABLED</status>
          <description>"PPM"."TR_PROJCNTRTS_DELETE" 
AFTER DELETE
ON PROJCNTRTS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
</description>
          <trigger_body>DECLARE
  StoO_selcnt INTEGER;
  StoO_error  INTEGER;
  StoO_rowcnt INTEGER := 1;
  StoO_crowcnt  INTEGER := 0;
  StoO_fetchstatus  INTEGER := 0;
  StoO_errmsg GLOBALPKG.STRING;
  StoO_sqlstatus  INTEGER;
BEGIN
	BEGIN
    StoO_selcnt := 0;
    StoO_error  := 0;
    StoO_rowcnt := 0;

    SELECT 1 INTO StoO_selcnt
    FROM DUAL
    WHERE  EXISTS (
      SELECT  1
      FROM pac_mnt_projects p
      WHERE p.COMPANY_CODE = :OLD.COMPANY_CODE
      AND p.PROJECT_CODE = :OLD.PROJECT_CODE
      AND p.awaitingapproval = 1
      AND p.type_ = 'P'
      AND p.status = 'O');

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
      WHEN OTHERS THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
	END;

  IF StoO_selcnt != 0 THEN
    BEGIN
      raise_application_error(-20589, 'The contract cannot be deleted because the PROJECT_CODE is already approved or submitted for approval and is a contracted PROJECT_CODE.');
      RETURN;
    END;
	END IF;

	BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;

    DELETE  billingschedule
      WHERE billingschedule.COMPANY_CODE = :OLD.COMPANY_CODE
      AND billingschedule.PROJECT_CODE = :OLD.PROJECT_CODE;

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
	END;

  IF StoO_error != 0 THEN
    BEGIN
      RAISE_APPLICATION_ERROR(-20425,'Trigger forces a rollback');
      RETURN;
    END;
	END IF;

  BEGIN
    StoO_selcnt := 0;
    StoO_error  := 0;
    StoO_rowcnt := 0;

    SELECT 1 INTO StoO_selcnt
    FROM DUAL
    WHERE  EXISTS (
      SELECT  1
      FROM ppa_TransBill
      WHERE ppa_TransBill.COMPANY_CODE = :OLD.COMPANY_CODE
      AND ppa_TransBill.PROJECT_CODE = :OLD.PROJECT_CODE);

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
      WHEN OTHERS THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  IF StoO_selcnt != 0 THEN
    BEGIN
      raise_application_error(-20590, 'PROJECT_CODE contract has open transactions');
      RETURN;
    END;
  END IF;

  BEGIN
    StoO_selcnt := 0;
    StoO_error  := 0;
    StoO_rowcnt := 0;

    SELECT 1 INTO StoO_selcnt
    FROM DUAL
    WHERE  EXISTS (
      SELECT  1
      FROM ppa_WIP
      WHERE ppa_WIP.COMPANY_CODE = :OLD.COMPANY_CODE
      AND ppa_WIP.PROJECT_CODE = :OLD.PROJECT_CODE);

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
      WHEN OTHERS THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  IF StoO_selcnt != 0 THEN
    BEGIN
      raise_application_error(-20590, 'PROJECT_CODE contract has open transactions');
      RETURN;
    END;
  END IF;

  /*
  BEGIN
    StoO_selcnt := 0;
    StoO_error  := 0;
    StoO_rowcnt := 0;

    SELECT 1 INTO StoO_selcnt
    FROM DUAL
    WHERE  EXISTS (
      SELECT  1
      FROM ppa_WIPHistory
      WHERE ppa_WIPHistory.COMPANY_CODE = :OLD.COMPANY_CODE
      AND ppa_WIPHistory.PROJECT_CODE = :OLD.PROJECT_CODE );

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
      WHEN OTHERS THEN
        StoO_rowcnt := 0;
        StoO_selcnt := 0;
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
  END;

  IF StoO_selcnt != 0 THEN
    BEGIN
      raise_application_error(-20590, 'PROJECT_CODE contract has open transactions');
      RETURN ;
    END;
  END IF;
  */
END tr_projcntrts_delete;
















































</trigger_body>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>