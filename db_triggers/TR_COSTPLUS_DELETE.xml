<?xml version="1.0" encoding="UTF-8" standalone="no"?><QueryResult xmlns="http://www.niku.com/xog/Query" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Code>capture3c.get_db_trigger</Code>
      <Records>
        <Record>
          <code>TR_COSTPLUS_DELETE</code>
          <table_name>COSTPLUS</table_name>
          <trigger_type>AFTER EACH ROW</trigger_type>
          <triggering_event>DELETE</triggering_event>
          <column_name xsi:nil="true"/>
          <referencing_names>REFERENCING NEW AS NEW OLD AS OLD</referencing_names>
          <when_clause xsi:nil="true"/>
          <status>ENABLED</status>
          <description>"PPM"."TR_COSTPLUS_DELETE" 
AFTER DELETE
ON COSTPLUS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
</description>
          <trigger_body>DECLARE
  StoO_selcnt       INTEGER;
  StoO_error        INTEGER;
  StoO_rowcnt       INTEGER := 1;
  StoO_crowcnt      INTEGER := 0;
  StoO_fetchstatus  INTEGER := 0;
  StoO_errmsg       GLOBALPKG.STRING;
  StoO_sqlstatus    INTEGER;
BEGIN
	BEGIN
    BEGIN
      StoO_selcnt := 0;
      StoO_error  := 0;
      StoO_rowcnt := 0;

      SELECT 1 INTO StoO_selcnt
      FROM DUAL
      WHERE  EXISTS (
        SELECT  1
        FROM ppa_TransWIPAdjust transwipadjust
        WHERE transwipadjust.CostRuleCode = :OLD.costpluscode);

      StoO_rowcnt := SQL%ROWCOUNT;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
        WHEN OTHERS THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
          StoO_error := SQLCODE;
          StoO_errmsg := SQLERRM;
    END;

    IF StoO_selcnt != 0 THEN
      BEGIN
        raise_application_error(-20500, 'cost plus code in use in transwipadjust');
        RETURN;
      END;
    END IF;
	END;

	BEGIN
    BEGIN
      StoO_selcnt := 0;
      StoO_error  := 0;
      StoO_rowcnt := 0;

      SELECT 1 INTO StoO_selcnt
      FROM DUAL
      WHERE  EXISTS (
        SELECT  1
        FROM ppa_TransControl
        WHERE ppa_TransControl.CostRuleCode = :OLD.costpluscode );

      StoO_rowcnt := SQL%ROWCOUNT;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
        WHEN OTHERS THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
          StoO_error := SQLCODE;
          StoO_errmsg := SQLERRM;
    END;
    IF StoO_selcnt != 0 THEN
      BEGIN
        raise_application_error(-20501, 'cost plus code in use in ppa_TransControl');
        RETURN;
      END;
    END IF;
	END;

	BEGIN
    BEGIN
      StoO_selcnt := 0;
      StoO_error  := 0;
      StoO_rowcnt := 0;

      SELECT 1 INTO StoO_selcnt
      FROM DUAL
      WHERE  EXISTS (
        SELECT  1
        FROM ppa_Wip
        WHERE ppa_Wip.CostRuleCode = :OLD.costpluscode );

      StoO_rowcnt := SQL%ROWCOUNT;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
        WHEN OTHERS THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
          StoO_error := SQLCODE;
          StoO_errmsg := SQLERRM;
    END;

    IF StoO_selcnt != 0 THEN
      BEGIN
        raise_application_error(-20502, 'cost plus code in use in ppa_Wip');
        RETURN;
      END;
    END IF;
	END;

	BEGIN
    BEGIN
      StoO_selcnt := 0;
      StoO_error  := 0;
      StoO_rowcnt := 0;

      SELECT 1 INTO StoO_selcnt
      FROM DUAL
      WHERE  EXISTS (
        SELECT  1
        FROM ppa_MatrixValues
        WHERE ppa_MatrixValues.strVal1 = :OLD.costpluscode);

      StoO_rowcnt := SQL%ROWCOUNT;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
        WHEN OTHERS THEN
          StoO_rowcnt := 0;
          StoO_selcnt := 0;
          StoO_error := SQLCODE;
          StoO_errmsg := SQLERRM;
    END;

    IF StoO_selcnt != 0 THEN
      BEGIN
        raise_application_error(-20503, 'cost plus code in use in ppa_MatrixValue');
        RETURN;
      END;
    END IF;
	END;

  BEGIN
    StoO_error   := 0;
    StoO_rowcnt  := 0;

    DELETE  costplusrules
      WHERE ROWID IN
      (SELECT costplusrules.ROWID FROM costplus, costplusrules
      WHERE costplusrules.costpluscode = :OLD.costpluscode);

    StoO_rowcnt := SQL%ROWCOUNT;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        StoO_error := SQLCODE;
        StoO_errmsg := SQLERRM;
	END;
END tr_costplus_delete;
















































</trigger_body>
        </Record>
      </Records>
      <Slice>
        <Number>0</Number>
        <Size>1</Size>
        <Total>1</Total>
      </Slice>
    </QueryResult>